
PiPonics-SensorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e394  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  0800e528  0800e528  0001e528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebb4  0800ebb4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebb4  0800ebb4  0001ebb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebbc  0800ebbc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebbc  0800ebbc  0001ebbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebc0  0800ebc0  0001ebc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ebc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002778  200001e8  0800edac  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002960  0800edac  00022960  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024a96  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044cb  00000000  00000000  00044cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  00049180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a80  00000000  00000000  0004ada8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006b42  00000000  00000000  0004c828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dd34  00000000  00000000  0005336a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8763  00000000  00000000  0007109e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149801  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a58  00000000  00000000  00149854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e50c 	.word	0x0800e50c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800e50c 	.word	0x0800e50c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <getRTDReading>:
/**
 *  Returns EZO RTD sensor reading as a double from ASCII string in response buffer.
 *	@param buf	The I2C response buffer from the Read command. Typically RTD_I2C_resBuf
 */
double getRTDReading(uint8_t* buf)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	uint8_t readingArr[RTD_I2C_READ_BUFFER_MAX_SZ] = {'0'};
 8000ff4:	2330      	movs	r3, #48	; 0x30
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
	uint8_t readingArrIdx = 0, bufIdx = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	77fb      	strb	r3, [r7, #31]
 8001000:	2300      	movs	r3, #0
 8001002:	77bb      	strb	r3, [r7, #30]
	while (buf[bufIdx] != '\0')
 8001004:	e026      	b.n	8001054 <getRTDReading+0x68>
	{
		if ((buf[bufIdx] >= '0' && buf[bufIdx] <= '9') || buf[bufIdx] == '-' || buf[bufIdx] == '.')
 8001006:	7fbb      	ldrb	r3, [r7, #30]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b2f      	cmp	r3, #47	; 0x2f
 8001010:	d905      	bls.n	800101e <getRTDReading+0x32>
 8001012:	7fbb      	ldrb	r3, [r7, #30]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b39      	cmp	r3, #57	; 0x39
 800101c:	d90b      	bls.n	8001036 <getRTDReading+0x4a>
 800101e:	7fbb      	ldrb	r3, [r7, #30]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b2d      	cmp	r3, #45	; 0x2d
 8001028:	d005      	beq.n	8001036 <getRTDReading+0x4a>
 800102a:	7fbb      	ldrb	r3, [r7, #30]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b2e      	cmp	r3, #46	; 0x2e
 8001034:	d10b      	bne.n	800104e <getRTDReading+0x62>
		{
			readingArr[readingArrIdx++] = buf[bufIdx];
 8001036:	7fbb      	ldrb	r3, [r7, #30]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	441a      	add	r2, r3
 800103c:	7ffb      	ldrb	r3, [r7, #31]
 800103e:	1c59      	adds	r1, r3, #1
 8001040:	77f9      	strb	r1, [r7, #31]
 8001042:	7812      	ldrb	r2, [r2, #0]
 8001044:	f107 0120 	add.w	r1, r7, #32
 8001048:	440b      	add	r3, r1
 800104a:	f803 2c18 	strb.w	r2, [r3, #-24]
		}
		bufIdx++;
 800104e:	7fbb      	ldrb	r3, [r7, #30]
 8001050:	3301      	adds	r3, #1
 8001052:	77bb      	strb	r3, [r7, #30]
	while (buf[bufIdx] != '\0')
 8001054:	7fbb      	ldrb	r3, [r7, #30]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1d2      	bne.n	8001006 <getRTDReading+0x1a>
	}
	double res = atof((const char*)readingArr);
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	4618      	mov	r0, r3
 8001066:	f009 f9c1 	bl	800a3ec <atof>
 800106a:	ed87 0b04 	vstr	d0, [r7, #16]
	return res;
 800106e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001072:	ec43 2b17 	vmov	d7, r2, r3
}
 8001076:	eeb0 0a47 	vmov.f32	s0, s14
 800107a:	eef0 0a67 	vmov.f32	s1, s15
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001088:	f000 ffc7 	bl	800201a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108c:	f000 f882 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001090:	f000 f9cc 	bl	800142c <MX_GPIO_Init>
  MX_DMA_Init();
 8001094:	f000 f9a4 	bl	80013e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001098:	f000 f972 	bl	8001380 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800109c:	f000 f940 	bl	8001320 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80010a0:	f000 f8fe 	bl	80012a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("START\n\r");
 80010a4:	4829      	ldr	r0, [pc, #164]	; (800114c <main+0xc8>)
 80010a6:	f009 fe4f 	bl	800ad48 <iprintf>

  // Pi UART Rx DMA init
  if (HAL_UART_Receive_DMA(&huart1, &piUartBuffer[0], PI_UART_BUFFER_SZ) != HAL_OK) {
 80010aa:	2206      	movs	r2, #6
 80010ac:	4928      	ldr	r1, [pc, #160]	; (8001150 <main+0xcc>)
 80010ae:	4829      	ldr	r0, [pc, #164]	; (8001154 <main+0xd0>)
 80010b0:	f004 ff12 	bl	8005ed8 <HAL_UART_Receive_DMA>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <main+0x3a>
	Error_Handler();
 80010ba:	f000 fc49 	bl	8001950 <Error_Handler>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010be:	f005 ff05 	bl	8006ecc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UARTSemaphore */
  UARTSemaphoreHandle = osSemaphoreNew(1, 1, &UARTSemaphore_attributes);
 80010c2:	4a25      	ldr	r2, [pc, #148]	; (8001158 <main+0xd4>)
 80010c4:	2101      	movs	r1, #1
 80010c6:	2001      	movs	r0, #1
 80010c8:	f005 fff7 	bl	80070ba <osSemaphoreNew>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a23      	ldr	r2, [pc, #140]	; (800115c <main+0xd8>)
 80010d0:	6013      	str	r3, [r2, #0]

  /* creation of overflowSemaphore */
  overflowSemaphoreHandle = osSemaphoreNew(1, 1, &overflowSemaphore_attributes);
 80010d2:	4a23      	ldr	r2, [pc, #140]	; (8001160 <main+0xdc>)
 80010d4:	2101      	movs	r1, #1
 80010d6:	2001      	movs	r0, #1
 80010d8:	f005 ffef 	bl	80070ba <osSemaphoreNew>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a21      	ldr	r2, [pc, #132]	; (8001164 <main+0xe0>)
 80010e0:	6013      	str	r3, [r2, #0]

  /* creation of I2CSemaphore */
  I2CSemaphoreHandle = osSemaphoreNew(1, 1, &I2CSemaphore_attributes);
 80010e2:	4a21      	ldr	r2, [pc, #132]	; (8001168 <main+0xe4>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	2001      	movs	r0, #1
 80010e8:	f005 ffe7 	bl	80070ba <osSemaphoreNew>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a1f      	ldr	r2, [pc, #124]	; (800116c <main+0xe8>)
 80010f0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  osSemaphoreAcquire(UARTSemaphoreHandle, 0);
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <main+0xd8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f006 f867 	bl	80071cc <osSemaphoreAcquire>
  osSemaphoreAcquire(overflowSemaphoreHandle, 0);
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <main+0xe0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f006 f861 	bl	80071cc <osSemaphoreAcquire>
  osSemaphoreAcquire(I2CSemaphoreHandle, 0);
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <main+0xe8>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f006 f85b 	bl	80071cc <osSemaphoreAcquire>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001116:	4a16      	ldr	r2, [pc, #88]	; (8001170 <main+0xec>)
 8001118:	2100      	movs	r1, #0
 800111a:	4816      	ldr	r0, [pc, #88]	; (8001174 <main+0xf0>)
 800111c:	f005 ff20 	bl	8006f60 <osThreadNew>
 8001120:	4603      	mov	r3, r0
 8001122:	4a15      	ldr	r2, [pc, #84]	; (8001178 <main+0xf4>)
 8001124:	6013      	str	r3, [r2, #0]

  /* creation of receiveUART */
  receiveUARTHandle = osThreadNew(StartReceiveUART, NULL, &receiveUART_attributes);
 8001126:	4a15      	ldr	r2, [pc, #84]	; (800117c <main+0xf8>)
 8001128:	2100      	movs	r1, #0
 800112a:	4815      	ldr	r0, [pc, #84]	; (8001180 <main+0xfc>)
 800112c:	f005 ff18 	bl	8006f60 <osThreadNew>
 8001130:	4603      	mov	r3, r0
 8001132:	4a14      	ldr	r2, [pc, #80]	; (8001184 <main+0x100>)
 8001134:	6013      	str	r3, [r2, #0]

  /* creation of detectOverflow */
  detectOverflowHandle = osThreadNew(StartDetectOverflow, NULL, &detectOverflow_attributes);
 8001136:	4a14      	ldr	r2, [pc, #80]	; (8001188 <main+0x104>)
 8001138:	2100      	movs	r1, #0
 800113a:	4814      	ldr	r0, [pc, #80]	; (800118c <main+0x108>)
 800113c:	f005 ff10 	bl	8006f60 <osThreadNew>
 8001140:	4603      	mov	r3, r0
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <main+0x10c>)
 8001144:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001146:	f005 fee5 	bl	8006f14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800114a:	e7fe      	b.n	800114a <main+0xc6>
 800114c:	0800e588 	.word	0x0800e588
 8001150:	200027a4 	.word	0x200027a4
 8001154:	200027ac 	.word	0x200027ac
 8001158:	0800e690 	.word	0x0800e690
 800115c:	20002710 	.word	0x20002710
 8001160:	0800e6a0 	.word	0x0800e6a0
 8001164:	200028bc 	.word	0x200028bc
 8001168:	0800e6b0 	.word	0x0800e6b0
 800116c:	2000270c 	.word	0x2000270c
 8001170:	0800e624 	.word	0x0800e624
 8001174:	080017dd 	.word	0x080017dd
 8001178:	200026b8 	.word	0x200026b8
 800117c:	0800e648 	.word	0x0800e648
 8001180:	080017ed 	.word	0x080017ed
 8001184:	200026bc 	.word	0x200026bc
 8001188:	0800e66c 	.word	0x0800e66c
 800118c:	080018ed 	.word	0x080018ed
 8001190:	20002830 	.word	0x20002830

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b0ac      	sub	sp, #176	; 0xb0
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800119e:	2244      	movs	r2, #68	; 0x44
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f009 f95e 	bl	800a464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2254      	movs	r2, #84	; 0x54
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f009 f950 	bl	800a464 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011c4:	f003 f8e6 	bl	8004394 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011c8:	4b34      	ldr	r3, [pc, #208]	; (800129c <SystemClock_Config+0x108>)
 80011ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ce:	4a33      	ldr	r2, [pc, #204]	; (800129c <SystemClock_Config+0x108>)
 80011d0:	f023 0318 	bic.w	r3, r3, #24
 80011d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80011d8:	2314      	movs	r3, #20
 80011da:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011dc:	2301      	movs	r3, #1
 80011de:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011e0:	2301      	movs	r3, #1
 80011e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011ec:	2360      	movs	r3, #96	; 0x60
 80011ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f2:	2302      	movs	r3, #2
 80011f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011f8:	2301      	movs	r3, #1
 80011fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011fe:	2301      	movs	r3, #1
 8001200:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001204:	2310      	movs	r3, #16
 8001206:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800120a:	2307      	movs	r3, #7
 800120c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001210:	2302      	movs	r3, #2
 8001212:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001220:	4618      	mov	r0, r3
 8001222:	f003 f92b 	bl	800447c <HAL_RCC_OscConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800122c:	f000 fb90 	bl	8001950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001230:	230f      	movs	r3, #15
 8001232:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001234:	2303      	movs	r3, #3
 8001236:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001244:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001248:	2101      	movs	r1, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f003 fd36 	bl	8004cbc <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001256:	f000 fb7b 	bl	8001950 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800125a:	2343      	movs	r3, #67	; 0x43
 800125c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001266:	2300      	movs	r3, #0
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	4618      	mov	r0, r3
 800126e:	f003 ff5d 	bl	800512c <HAL_RCCEx_PeriphCLKConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001278:	f000 fb6a 	bl	8001950 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800127c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001280:	f003 f8a6 	bl	80043d0 <HAL_PWREx_ControlVoltageScaling>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800128a:	f000 fb61 	bl	8001950 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800128e:	f004 f941 	bl	8005514 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001292:	bf00      	nop
 8001294:	37b0      	adds	r7, #176	; 0xb0
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000

080012a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <MX_I2C1_Init+0x74>)
 80012a6:	4a1c      	ldr	r2, [pc, #112]	; (8001318 <MX_I2C1_Init+0x78>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_I2C1_Init+0x74>)
 80012ac:	4a1b      	ldr	r2, [pc, #108]	; (800131c <MX_I2C1_Init+0x7c>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_I2C1_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_I2C1_Init+0x74>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_I2C1_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_I2C1_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_I2C1_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_I2C1_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_I2C1_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012da:	480e      	ldr	r0, [pc, #56]	; (8001314 <MX_I2C1_Init+0x74>)
 80012dc:	f001 fc12 	bl	8002b04 <HAL_I2C_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012e6:	f000 fb33 	bl	8001950 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ea:	2100      	movs	r1, #0
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <MX_I2C1_Init+0x74>)
 80012ee:	f002 ffb9 	bl	8004264 <HAL_I2CEx_ConfigAnalogFilter>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012f8:	f000 fb2a 	bl	8001950 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012fc:	2100      	movs	r1, #0
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_I2C1_Init+0x74>)
 8001300:	f002 fffb 	bl	80042fa <HAL_I2CEx_ConfigDigitalFilter>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800130a:	f000 fb21 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200026c0 	.word	0x200026c0
 8001318:	40005400 	.word	0x40005400
 800131c:	00707cbb 	.word	0x00707cbb

08001320 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_USART1_UART_Init+0x58>)
 8001326:	4a15      	ldr	r2, [pc, #84]	; (800137c <MX_USART1_UART_Init+0x5c>)
 8001328:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <MX_USART1_UART_Init+0x58>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_USART1_UART_Init+0x58>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_USART1_UART_Init+0x58>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_USART1_UART_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_USART1_UART_Init+0x58>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <MX_USART1_UART_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_USART1_UART_Init+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <MX_USART1_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_USART1_UART_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_USART1_UART_Init+0x58>)
 8001364:	f004 fc58 	bl	8005c18 <HAL_UART_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800136e:	f000 faef 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200027ac 	.word	0x200027ac
 800137c:	40013800 	.word	0x40013800

08001380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 8001386:	4a15      	ldr	r2, [pc, #84]	; (80013dc <MX_USART2_UART_Init+0x5c>)
 8001388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_USART2_UART_Init+0x58>)
 80013c4:	f004 fc28 	bl	8005c18 <HAL_UART_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013ce:	f000 fabf 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20002838 	.word	0x20002838
 80013dc:	40004400 	.word	0x40004400

080013e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_DMA_Init+0x48>)
 80013e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ea:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <MX_DMA_Init+0x48>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6493      	str	r3, [r2, #72]	; 0x48
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <MX_DMA_Init+0x48>)
 80013f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 7, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2107      	movs	r1, #7
 8001402:	200e      	movs	r0, #14
 8001404:	f000 ff1e 	bl	8002244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001408:	200e      	movs	r0, #14
 800140a:	f000 ff37 	bl	800227c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 6, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2106      	movs	r1, #6
 8001412:	200f      	movs	r0, #15
 8001414:	f000 ff16 	bl	8002244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001418:	200f      	movs	r0, #15
 800141a:	f000 ff2f 	bl	800227c <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	4b33      	ldr	r3, [pc, #204]	; (8001510 <MX_GPIO_Init+0xe4>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	4a32      	ldr	r2, [pc, #200]	; (8001510 <MX_GPIO_Init+0xe4>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <MX_GPIO_Init+0xe4>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <MX_GPIO_Init+0xe4>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a2c      	ldr	r2, [pc, #176]	; (8001510 <MX_GPIO_Init+0xe4>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_GPIO_Init+0xe4>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	4b27      	ldr	r3, [pc, #156]	; (8001510 <MX_GPIO_Init+0xe4>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	4a26      	ldr	r2, [pc, #152]	; (8001510 <MX_GPIO_Init+0xe4>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <MX_GPIO_Init+0xe4>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Pump_Relay_GPIO_Port, Pump_Relay_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2102      	movs	r1, #2
 800148e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001492:	f001 fb07 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|LD3_Pin|Tank_LED_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	2129      	movs	r1, #41	; 0x29
 800149a:	481e      	ldr	r0, [pc, #120]	; (8001514 <MX_GPIO_Init+0xe8>)
 800149c:	f001 fb02 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Pump_Relay_Pin */
  GPIO_InitStruct.Pin = Pump_Relay_Pin;
 80014a0:	2302      	movs	r3, #2
 80014a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Pump_Relay_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	4619      	mov	r1, r3
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ba:	f001 f971 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin LD3_Pin Tank_LED_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|LD3_Pin|Tank_LED_Pin;
 80014be:	2329      	movs	r3, #41	; 0x29
 80014c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	4619      	mov	r1, r3
 80014d4:	480f      	ldr	r0, [pc, #60]	; (8001514 <MX_GPIO_Init+0xe8>)
 80014d6:	f001 f963 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Float_Switch_Pin */
  GPIO_InitStruct.Pin = Float_Switch_Pin;
 80014da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <MX_GPIO_Init+0xec>)
 80014e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Float_Switch_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	4619      	mov	r1, r3
 80014ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f2:	f001 f955 	bl	80027a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2105      	movs	r1, #5
 80014fa:	2028      	movs	r0, #40	; 0x28
 80014fc:	f000 fea2 	bl	8002244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001500:	2028      	movs	r0, #40	; 0x28
 8001502:	f000 febb 	bl	800227c <HAL_NVIC_EnableIRQ>

}
 8001506:	bf00      	nop
 8001508:	3720      	adds	r7, #32
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000
 8001514:	48000400 	.word	0x48000400
 8001518:	10110000 	.word	0x10110000

0800151c <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	/* write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 1);
 8001524:	1d39      	adds	r1, r7, #4
 8001526:	2301      	movs	r3, #1
 8001528:	2201      	movs	r2, #1
 800152a:	4804      	ldr	r0, [pc, #16]	; (800153c <__io_putchar+0x20>)
 800152c:	f004 fbc2 	bl	8005cb4 <HAL_UART_Transmit>
	return ch;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20002838 	.word	0x20002838

08001540 <HAL_UART_RxCpltCallback>:

/* Pi UART Callback */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a05      	ldr	r2, [pc, #20]	; (8001564 <HAL_UART_RxCpltCallback+0x24>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d104      	bne.n	800155c <HAL_UART_RxCpltCallback+0x1c>
		osSemaphoreRelease(UARTSemaphoreHandle);
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_UART_RxCpltCallback+0x28>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f005 fe8a 	bl	8007270 <osSemaphoreRelease>
	}
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40013800 	.word	0x40013800
 8001568:	20002710 	.word	0x20002710

0800156c <HAL_GPIO_EXTI_Callback>:

/* Float Switch Callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Float_Switch_Pin) {
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800157c:	d110      	bne.n	80015a0 <HAL_GPIO_EXTI_Callback+0x34>
		osDelay(100);			// Manual switch debounce wait time (fix this!)
 800157e:	2064      	movs	r0, #100	; 0x64
 8001580:	f005 fd80 	bl	8007084 <osDelay>
		if (HAL_GPIO_ReadPin(Float_Switch_GPIO_Port, Float_Switch_Pin) == GPIO_PIN_SET) {
 8001584:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158c:	f001 fa72 	bl	8002a74 <HAL_GPIO_ReadPin>
 8001590:	4603      	mov	r3, r0
 8001592:	2b01      	cmp	r3, #1
 8001594:	d104      	bne.n	80015a0 <HAL_GPIO_EXTI_Callback+0x34>
			osSemaphoreRelease(overflowSemaphoreHandle);
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f005 fe68 	bl	8007270 <osSemaphoreRelease>
		}
	}
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200028bc 	.word	0x200028bc

080015ac <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <HAL_I2C_MasterRxCpltCallback+0x24>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d104      	bne.n	80015c8 <HAL_I2C_MasterRxCpltCallback+0x1c>
		osSemaphoreRelease(I2CSemaphoreHandle);
 80015be:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_I2C_MasterRxCpltCallback+0x28>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f005 fe54 	bl	8007270 <osSemaphoreRelease>
	}
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40005400 	.word	0x40005400
 80015d4:	2000270c 	.word	0x2000270c

080015d8 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d102      	bne.n	80015ee <HAL_I2C_ErrorCallback+0x16>
		printf("I2C AF err\r\n");
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <HAL_I2C_ErrorCallback+0x20>)
 80015ea:	f009 fc33 	bl	800ae54 <puts>
	}
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	0800e590 	.word	0x0800e590

080015fc <turnOnWaterPump>:


void turnOnWaterPump() {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Pump_Relay_GPIO_Port, Pump_Relay_Pin, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2102      	movs	r1, #2
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f001 fa4c 	bl	8002aa4 <HAL_GPIO_WritePin>
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}

08001610 <turnOffWaterPump>:
void turnOffWaterPump() {
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Pump_Relay_GPIO_Port, Pump_Relay_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	2102      	movs	r1, #2
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f001 fa42 	bl	8002aa4 <HAL_GPIO_WritePin>
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <turnOnTankLights>:
void turnOnTankLights() {
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Tank_LED_GPIO_Port, Tank_LED_Pin, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	2120      	movs	r1, #32
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <turnOnTankLights+0x14>)
 800162e:	f001 fa39 	bl	8002aa4 <HAL_GPIO_WritePin>
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	48000400 	.word	0x48000400

0800163c <turnOffTankLights>:
void turnOffTankLights() {
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Tank_LED_GPIO_Port, Tank_LED_Pin, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	2120      	movs	r1, #32
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <turnOffTankLights+0x14>)
 8001646:	f001 fa2d 	bl	8002aa4 <HAL_GPIO_WritePin>
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	48000400 	.word	0x48000400

08001654 <turnOnBuzzer>:
void turnOnBuzzer() {
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001658:	2201      	movs	r2, #1
 800165a:	2101      	movs	r1, #1
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <turnOnBuzzer+0x14>)
 800165e:	f001 fa21 	bl	8002aa4 <HAL_GPIO_WritePin>
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	48000400 	.word	0x48000400

0800166c <turnOffBuzzer>:
void turnOffBuzzer() {
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	2101      	movs	r1, #1
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <turnOffBuzzer+0x14>)
 8001676:	f001 fa15 	bl	8002aa4 <HAL_GPIO_WritePin>
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	48000400 	.word	0x48000400

08001684 <driveActuator>:


uint32_t driveActuator(Actuator actuator, uint32_t driveVal) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
	printf("id:  %d\n\r", (int)actuator);
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	4619      	mov	r1, r3
 8001694:	481f      	ldr	r0, [pc, #124]	; (8001714 <driveActuator+0x90>)
 8001696:	f009 fb57 	bl	800ad48 <iprintf>
	printf("val: %d\n\r", (int)driveVal);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	481e      	ldr	r0, [pc, #120]	; (8001718 <driveActuator+0x94>)
 80016a0:	f009 fb52 	bl	800ad48 <iprintf>
	uint32_t retVal;

	switch(actuator) {
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2bff      	cmp	r3, #255	; 0xff
 80016a8:	d020      	beq.n	80016ec <driveActuator+0x68>
 80016aa:	2bff      	cmp	r3, #255	; 0xff
 80016ac:	dc24      	bgt.n	80016f8 <driveActuator+0x74>
 80016ae:	2bfe      	cmp	r3, #254	; 0xfe
 80016b0:	d01f      	beq.n	80016f2 <driveActuator+0x6e>
 80016b2:	2bfe      	cmp	r3, #254	; 0xfe
 80016b4:	dc20      	bgt.n	80016f8 <driveActuator+0x74>
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d002      	beq.n	80016c0 <driveActuator+0x3c>
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d00b      	beq.n	80016d6 <driveActuator+0x52>
 80016be:	e01b      	b.n	80016f8 <driveActuator+0x74>

	case TankLights:			// actuator: sys1.tank1_lights
		(driveVal > 0) ? turnOnTankLights() : turnOffTankLights();
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <driveActuator+0x48>
 80016c6:	f7ff ffad 	bl	8001624 <turnOnTankLights>
 80016ca:	e001      	b.n	80016d0 <driveActuator+0x4c>
 80016cc:	f7ff ffb6 	bl	800163c <turnOffTankLights>
		retVal = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
		break;
 80016d4:	e014      	b.n	8001700 <driveActuator+0x7c>

	case GrowBedWaterPump:		// actuator: sys1.growbed1_waterpump
		(driveVal > 0) ? turnOnWaterPump() : turnOffWaterPump();
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <driveActuator+0x5e>
 80016dc:	f7ff ff8e 	bl	80015fc <turnOnWaterPump>
 80016e0:	e001      	b.n	80016e6 <driveActuator+0x62>
 80016e2:	f7ff ff95 	bl	8001610 <turnOffWaterPump>
		retVal = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
		break;
 80016ea:	e009      	b.n	8001700 <driveActuator+0x7c>

	case Ret0:		// test case: return 0
		retVal = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
		break;
 80016f0:	e006      	b.n	8001700 <driveActuator+0x7c>

	case Ret1:		// test case: return 1
		retVal = 1;
 80016f2:	2301      	movs	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
		break;
 80016f6:	e003      	b.n	8001700 <driveActuator+0x7c>

	default:
		retVal = 0xFFFFFFFF;
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
 80016fc:	60fb      	str	r3, [r7, #12]
		break;
 80016fe:	bf00      	nop
	}
	printf("ret: %d\n\r", (int)retVal);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <driveActuator+0x98>)
 8001706:	f009 fb1f 	bl	800ad48 <iprintf>
	return retVal;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	0800e59c 	.word	0x0800e59c
 8001718:	0800e5a8 	.word	0x0800e5a8
 800171c:	0800e5b4 	.word	0x0800e5b4

08001720 <getReading>:

/* Return a sensor reading from a provided sensor ID */
float getReading(Sensor sensor) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
	printf("id:  %d\n\r", (int) sensor);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4619      	mov	r1, r3
 800172e:	4824      	ldr	r0, [pc, #144]	; (80017c0 <getReading+0xa0>)
 8001730:	f009 fb0a 	bl	800ad48 <iprintf>
	float retVal;

	switch(sensor) {
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <getReading+0x20>
 800173a:	2bff      	cmp	r3, #255	; 0xff
 800173c:	d028      	beq.n	8001790 <getReading+0x70>
 800173e:	e02a      	b.n	8001796 <getReading+0x76>

	case TankTemp:;
		// request reading from EZO RTD sensor over I2C
		HAL_I2C_Master_Transmit_IT(&hi2c1, RTD_I2C_ADDR_DEFAULT<<1, (uint8_t*)RTD_I2C_Cmd_Read, sizeof(RTD_I2C_Cmd_Read));
 8001740:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <getReading+0xa4>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2304      	movs	r3, #4
 8001746:	21cc      	movs	r1, #204	; 0xcc
 8001748:	481f      	ldr	r0, [pc, #124]	; (80017c8 <getReading+0xa8>)
 800174a:	f001 fa6b 	bl	8002c24 <HAL_I2C_Master_Transmit_IT>
		// delay for EZO RTD processing
		osDelay(RTD_I2C_LONG_DELAY_MS);
 800174e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001752:	f005 fc97 	bl	8007084 <osDelay>
		// start I2C Rx interrupt
		HAL_I2C_Master_Receive_IT(&hi2c1, RTD_I2C_ADDR_DEFAULT<<1, &RTD_I2C_resBuf[0], RTD_I2C_BUFFER_MAX_SZ);
 8001756:	2328      	movs	r3, #40	; 0x28
 8001758:	4a1c      	ldr	r2, [pc, #112]	; (80017cc <getReading+0xac>)
 800175a:	21cc      	movs	r1, #204	; 0xcc
 800175c:	481a      	ldr	r0, [pc, #104]	; (80017c8 <getReading+0xa8>)
 800175e:	f001 fad1 	bl	8002d04 <HAL_I2C_Master_Receive_IT>
		// semaphore released when response is received; should be instantaneous due to proc delay
		osSemaphoreAcquire(I2CSemaphoreHandle, 10);
 8001762:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <getReading+0xb0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	210a      	movs	r1, #10
 8001768:	4618      	mov	r0, r3
 800176a:	f005 fd2f 	bl	80071cc <osSemaphoreAcquire>
		// get temp reading as float
		retVal = (float)getRTDReading(RTD_I2C_resBuf);
 800176e:	4817      	ldr	r0, [pc, #92]	; (80017cc <getReading+0xac>)
 8001770:	f7ff fc3c 	bl	8000fec <getRTDReading>
 8001774:	ec53 2b10 	vmov	r2, r3, d0
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff fa34 	bl	8000be8 <__aeabi_d2f>
 8001780:	4603      	mov	r3, r0
 8001782:	60fb      	str	r3, [r7, #12]
		// reset I2C buffer
		memset(&RTD_I2C_resBuf[0], '\0', RTD_I2C_BUFFER_MAX_SZ);
 8001784:	2228      	movs	r2, #40	; 0x28
 8001786:	2100      	movs	r1, #0
 8001788:	4810      	ldr	r0, [pc, #64]	; (80017cc <getReading+0xac>)
 800178a:	f008 fe6b 	bl	800a464 <memset>
		break;
 800178e:	e006      	b.n	800179e <getReading+0x7e>

	case RetPi:	// test case: return pi (3.14)
		retVal = 3.14;
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <getReading+0xb4>)
 8001792:	60fb      	str	r3, [r7, #12]
		break;
 8001794:	e003      	b.n	800179e <getReading+0x7e>

	default:
		retVal = 0xFFFFFFFF;
 8001796:	f04f 439f 	mov.w	r3, #1333788672	; 0x4f800000
 800179a:	60fb      	str	r3, [r7, #12]
		break;
 800179c:	bf00      	nop
	}
	printf("ret: %f\n\r", retVal);
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f7fe fed2 	bl	8000548 <__aeabi_f2d>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	480b      	ldr	r0, [pc, #44]	; (80017d8 <getReading+0xb8>)
 80017aa:	f009 facd 	bl	800ad48 <iprintf>
	return retVal;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	ee07 3a90 	vmov	s15, r3
}
 80017b4:	eeb0 0a67 	vmov.f32	s0, s15
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	0800e59c 	.word	0x0800e59c
 80017c4:	20000000 	.word	0x20000000
 80017c8:	200026c0 	.word	0x200026c0
 80017cc:	20000204 	.word	0x20000204
 80017d0:	2000270c 	.word	0x2000270c
 80017d4:	4048f5c3 	.word	0x4048f5c3
 80017d8:	0800e5c0 	.word	0x0800e5c0

080017dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	//printf("%d", uxTaskGetStackHighWaterMark( NULL ));
  /* Infinite loop */
	for(;;)
	{
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
		osDelay(1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f005 fc4d 	bl	8007084 <osDelay>
 80017ea:	e7fb      	b.n	80017e4 <StartDefaultTask+0x8>

080017ec <StartReceiveUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveUART */
void StartReceiveUART(void *argument)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveUART */
  /* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(UARTSemaphoreHandle, osWaitForever);	// wait for UART frame
 80017f4:	4b35      	ldr	r3, [pc, #212]	; (80018cc <StartReceiveUART+0xe0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f04f 31ff 	mov.w	r1, #4294967295
 80017fc:	4618      	mov	r0, r3
 80017fe:	f005 fce5 	bl	80071cc <osSemaphoreAcquire>

		uint8_t retBuffer[PI_UART_BUFFER_SZ] = {
 8001802:	f107 0318 	add.w	r3, r7, #24
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	809a      	strh	r2, [r3, #4]
				piUartBuffer[CMD_IDX],			// copy command byte
 800180c:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <StartReceiveUART+0xe4>)
 800180e:	781b      	ldrb	r3, [r3, #0]
		uint8_t retBuffer[PI_UART_BUFFER_SZ] = {
 8001810:	763b      	strb	r3, [r7, #24]
				piUartBuffer[ITEM_IDX]			// copy sensor/actuator id byte
 8001812:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <StartReceiveUART+0xe4>)
 8001814:	785b      	ldrb	r3, [r3, #1]
		uint8_t retBuffer[PI_UART_BUFFER_SZ] = {
 8001816:	767b      	strb	r3, [r7, #25]
		};

		piCmd = piUartBuffer[CMD_IDX];
 8001818:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <StartReceiveUART+0xe4>)
 800181a:	781a      	ldrb	r2, [r3, #0]
 800181c:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <StartReceiveUART+0xe8>)
 800181e:	701a      	strb	r2, [r3, #0]
		switch(piCmd) {
 8001820:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <StartReceiveUART+0xe8>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2bf0      	cmp	r3, #240	; 0xf0
 8001826:	d006      	beq.n	8001836 <StartReceiveUART+0x4a>
 8001828:	2bf0      	cmp	r3, #240	; 0xf0
 800182a:	dc31      	bgt.n	8001890 <StartReceiveUART+0xa4>
 800182c:	2b0f      	cmp	r3, #15
 800182e:	d00b      	beq.n	8001848 <StartReceiveUART+0x5c>
 8001830:	2b88      	cmp	r3, #136	; 0x88
 8001832:	d01d      	beq.n	8001870 <StartReceiveUART+0x84>
 8001834:	e02c      	b.n	8001890 <StartReceiveUART+0xa4>

		case Echo :
			printf("ECHO\n\r");
 8001836:	4828      	ldr	r0, [pc, #160]	; (80018d8 <StartReceiveUART+0xec>)
 8001838:	f009 fa86 	bl	800ad48 <iprintf>
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <StartReceiveUART+0xe4>)
 800183e:	f8d3 3002 	ldr.w	r3, [r3, #2]
			// copy input val to output
			memcpy(&retBuffer[PAYLOAD_START_IDX], &piUartBuffer[PAYLOAD_START_IDX], sizeof(uint32_t));
 8001842:	f8c7 301a 	str.w	r3, [r7, #26]
			break;
 8001846:	e02a      	b.n	800189e <StartReceiveUART+0xb2>

		case Drive :
			printf("DRIVE\n\r");
 8001848:	4824      	ldr	r0, [pc, #144]	; (80018dc <StartReceiveUART+0xf0>)
 800184a:	f009 fa7d 	bl	800ad48 <iprintf>
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <StartReceiveUART+0xe4>)
 8001850:	f8d3 3002 	ldr.w	r3, [r3, #2]
			// get drive val
			uint32_t driveVal;
			memcpy(&driveVal, &piUartBuffer[PAYLOAD_START_IDX], sizeof(uint32_t));	// note: relies on little-endian repr.
 8001854:	617b      	str	r3, [r7, #20]
			// drive actuator w/ drive val, get return val
			uint32_t retVal = driveActuator(piUartBuffer[ITEM_IDX], driveVal);
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <StartReceiveUART+0xe4>)
 8001858:	785b      	ldrb	r3, [r3, #1]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff10 	bl	8001684 <driveActuator>
 8001864:	4603      	mov	r3, r0
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
			// assign actuator return val to output buffer
			memcpy(&retBuffer[PAYLOAD_START_IDX], &retVal, sizeof(uint32_t));
 800186a:	f8c7 301a 	str.w	r3, [r7, #26]
			break;
 800186e:	e016      	b.n	800189e <StartReceiveUART+0xb2>

		case Read :
			printf("READ\n\r");
 8001870:	481b      	ldr	r0, [pc, #108]	; (80018e0 <StartReceiveUART+0xf4>)
 8001872:	f009 fa69 	bl	800ad48 <iprintf>
			// get reading as return val
			float reading = getReading(piUartBuffer[ITEM_IDX]);
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <StartReceiveUART+0xe4>)
 8001878:	785b      	ldrb	r3, [r3, #1]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff50 	bl	8001720 <getReading>
 8001880:	eef0 7a40 	vmov.f32	s15, s0
 8001884:	edc7 7a03 	vstr	s15, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
			// assign sensor reading to output buffer
			memcpy(&retBuffer[PAYLOAD_START_IDX], &reading, sizeof(float));			// relies on little-endian repr.
 800188a:	f8c7 301a 	str.w	r3, [r7, #26]
			break;
 800188e:	e006      	b.n	800189e <StartReceiveUART+0xb2>

		default:
			printf("UNKNOWN CMD: %d\n\r", piCmd);
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <StartReceiveUART+0xe8>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	4813      	ldr	r0, [pc, #76]	; (80018e4 <StartReceiveUART+0xf8>)
 8001898:	f009 fa56 	bl	800ad48 <iprintf>
			break;
 800189c:	bf00      	nop
		}
		// transmit response frame to pi
		if (HAL_UART_Transmit_DMA(&huart1, &retBuffer[0], PI_UART_BUFFER_SZ) != HAL_OK) {
 800189e:	f107 0318 	add.w	r3, r7, #24
 80018a2:	2206      	movs	r2, #6
 80018a4:	4619      	mov	r1, r3
 80018a6:	4810      	ldr	r0, [pc, #64]	; (80018e8 <StartReceiveUART+0xfc>)
 80018a8:	f004 fa98 	bl	8005ddc <HAL_UART_Transmit_DMA>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <StartReceiveUART+0xca>
			Error_Handler();
 80018b2:	f000 f84d 	bl	8001950 <Error_Handler>
		}
		// UART ready again
		if (HAL_UART_Receive_DMA(&huart1, &piUartBuffer[0], PI_UART_BUFFER_SZ) != HAL_OK) {
 80018b6:	2206      	movs	r2, #6
 80018b8:	4905      	ldr	r1, [pc, #20]	; (80018d0 <StartReceiveUART+0xe4>)
 80018ba:	480b      	ldr	r0, [pc, #44]	; (80018e8 <StartReceiveUART+0xfc>)
 80018bc:	f004 fb0c 	bl	8005ed8 <HAL_UART_Receive_DMA>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d096      	beq.n	80017f4 <StartReceiveUART+0x8>
			Error_Handler();
 80018c6:	f000 f843 	bl	8001950 <Error_Handler>
	{
 80018ca:	e793      	b.n	80017f4 <StartReceiveUART+0x8>
 80018cc:	20002710 	.word	0x20002710
 80018d0:	200027a4 	.word	0x200027a4
 80018d4:	20002834 	.word	0x20002834
 80018d8:	0800e5cc 	.word	0x0800e5cc
 80018dc:	0800e5d4 	.word	0x0800e5d4
 80018e0:	0800e5dc 	.word	0x0800e5dc
 80018e4:	0800e5e4 	.word	0x0800e5e4
 80018e8:	200027ac 	.word	0x200027ac

080018ec <StartDetectOverflow>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDetectOverflow */
void StartDetectOverflow(void *argument)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDetectOverflow */
  /* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(overflowSemaphoreHandle, osWaitForever);	// wait for emergency detect trigger
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <StartDetectOverflow+0x38>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f04f 31ff 	mov.w	r1, #4294967295
 80018fc:	4618      	mov	r0, r3
 80018fe:	f005 fc65 	bl	80071cc <osSemaphoreAcquire>

		// Float switch triggered (grow bed overflow)
		turnOffWaterPump();
 8001902:	f7ff fe85 	bl	8001610 <turnOffWaterPump>
		// infinite loop: sound buzzer. Stop by resetting MCU
		while (1) {
			printf("OVERFLOW\n\r");
 8001906:	4808      	ldr	r0, [pc, #32]	; (8001928 <StartDetectOverflow+0x3c>)
 8001908:	f009 fa1e 	bl	800ad48 <iprintf>
			turnOnBuzzer();
 800190c:	f7ff fea2 	bl	8001654 <turnOnBuzzer>
			osDelay(BUZZER_ON_MS);		// depends on 1000 Hz RTOS tick rate
 8001910:	20fa      	movs	r0, #250	; 0xfa
 8001912:	f005 fbb7 	bl	8007084 <osDelay>
			turnOffBuzzer();
 8001916:	f7ff fea9 	bl	800166c <turnOffBuzzer>
			osDelay(BUZZER_DELAY_MS);
 800191a:	f241 3088 	movw	r0, #5000	; 0x1388
 800191e:	f005 fbb1 	bl	8007084 <osDelay>
			printf("OVERFLOW\n\r");
 8001922:	e7f0      	b.n	8001906 <StartDetectOverflow+0x1a>
 8001924:	200028bc 	.word	0x200028bc
 8001928:	0800e5f8 	.word	0x0800e5f8

0800192c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800193e:	f000 fb85 	bl	800204c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40001000 	.word	0x40001000

08001950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001956:	b672      	cpsid	i
}
 8001958:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("Error\n\r");
 800195a:	4810      	ldr	r0, [pc, #64]	; (800199c <Error_Handler+0x4c>)
 800195c:	f009 f9f4 	bl	800ad48 <iprintf>

  while (1)
  {

	  for (int i=0; i<3; i++) {
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	e012      	b.n	800198c <Error_Handler+0x3c>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001966:	2201      	movs	r2, #1
 8001968:	2108      	movs	r1, #8
 800196a:	480d      	ldr	r0, [pc, #52]	; (80019a0 <Error_Handler+0x50>)
 800196c:	f001 f89a 	bl	8002aa4 <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 8001970:	20fa      	movs	r0, #250	; 0xfa
 8001972:	f000 fb8b 	bl	800208c <HAL_Delay>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	2108      	movs	r1, #8
 800197a:	4809      	ldr	r0, [pc, #36]	; (80019a0 <Error_Handler+0x50>)
 800197c:	f001 f892 	bl	8002aa4 <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 8001980:	20fa      	movs	r0, #250	; 0xfa
 8001982:	f000 fb83 	bl	800208c <HAL_Delay>
	  for (int i=0; i<3; i++) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3301      	adds	r3, #1
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b02      	cmp	r3, #2
 8001990:	dde9      	ble.n	8001966 <Error_Handler+0x16>
	  }
	  HAL_Delay(2000);
 8001992:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001996:	f000 fb79 	bl	800208c <HAL_Delay>
	  for (int i=0; i<3; i++) {
 800199a:	e7e1      	b.n	8001960 <Error_Handler+0x10>
 800199c:	0800e604 	.word	0x0800e604
 80019a0:	48000400 	.word	0x48000400

080019a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_MspInit+0x4c>)
 80019ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_MspInit+0x4c>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6613      	str	r3, [r2, #96]	; 0x60
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_MspInit+0x4c>)
 80019b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_MspInit+0x4c>)
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <HAL_MspInit+0x4c>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6593      	str	r3, [r2, #88]	; 0x58
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_MspInit+0x4c>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	210f      	movs	r1, #15
 80019de:	f06f 0001 	mvn.w	r0, #1
 80019e2:	f000 fc2f 	bl	8002244 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1f      	ldr	r2, [pc, #124]	; (8001a90 <HAL_I2C_MspInit+0x9c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d137      	bne.n	8001a86 <HAL_I2C_MspInit+0x92>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <HAL_I2C_MspInit+0xa0>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <HAL_I2C_MspInit+0xa0>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <HAL_I2C_MspInit+0xa0>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a2e:	23c0      	movs	r3, #192	; 0xc0
 8001a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a32:	2312      	movs	r3, #18
 8001a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	4619      	mov	r1, r3
 8001a48:	4813      	ldr	r0, [pc, #76]	; (8001a98 <HAL_I2C_MspInit+0xa4>)
 8001a4a:	f000 fea9 	bl	80027a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_I2C_MspInit+0xa0>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <HAL_I2C_MspInit+0xa0>)
 8001a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a58:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_I2C_MspInit+0xa0>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 8, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2108      	movs	r1, #8
 8001a6a:	201f      	movs	r0, #31
 8001a6c:	f000 fbea 	bl	8002244 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a70:	201f      	movs	r0, #31
 8001a72:	f000 fc03 	bl	800227c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2105      	movs	r1, #5
 8001a7a:	2020      	movs	r0, #32
 8001a7c:	f000 fbe2 	bl	8002244 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a80:	2020      	movs	r0, #32
 8001a82:	f000 fbfb 	bl	800227c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40005400 	.word	0x40005400
 8001a94:	40021000 	.word	0x40021000
 8001a98:	48000400 	.word	0x48000400

08001a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a66      	ldr	r2, [pc, #408]	; (8001c54 <HAL_UART_MspInit+0x1b8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	f040 8085 	bne.w	8001bca <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ac0:	4b65      	ldr	r3, [pc, #404]	; (8001c58 <HAL_UART_MspInit+0x1bc>)
 8001ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac4:	4a64      	ldr	r2, [pc, #400]	; (8001c58 <HAL_UART_MspInit+0x1bc>)
 8001ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aca:	6613      	str	r3, [r2, #96]	; 0x60
 8001acc:	4b62      	ldr	r3, [pc, #392]	; (8001c58 <HAL_UART_MspInit+0x1bc>)
 8001ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	4b5f      	ldr	r3, [pc, #380]	; (8001c58 <HAL_UART_MspInit+0x1bc>)
 8001ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001adc:	4a5e      	ldr	r2, [pc, #376]	; (8001c58 <HAL_UART_MspInit+0x1bc>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae4:	4b5c      	ldr	r3, [pc, #368]	; (8001c58 <HAL_UART_MspInit+0x1bc>)
 8001ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001af0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b02:	2307      	movs	r3, #7
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b10:	f000 fe46 	bl	80027a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001b14:	4b51      	ldr	r3, [pc, #324]	; (8001c5c <HAL_UART_MspInit+0x1c0>)
 8001b16:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <HAL_UART_MspInit+0x1c4>)
 8001b18:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001b1a:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_UART_MspInit+0x1c0>)
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b20:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <HAL_UART_MspInit+0x1c0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b26:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <HAL_UART_MspInit+0x1c0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	; (8001c5c <HAL_UART_MspInit+0x1c0>)
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b32:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <HAL_UART_MspInit+0x1c0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b38:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <HAL_UART_MspInit+0x1c0>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_UART_MspInit+0x1c0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b44:	4b45      	ldr	r3, [pc, #276]	; (8001c5c <HAL_UART_MspInit+0x1c0>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b4a:	4844      	ldr	r0, [pc, #272]	; (8001c5c <HAL_UART_MspInit+0x1c0>)
 8001b4c:	f000 fba4 	bl	8002298 <HAL_DMA_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8001b56:	f7ff fefb 	bl	8001950 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a3f      	ldr	r2, [pc, #252]	; (8001c5c <HAL_UART_MspInit+0x1c0>)
 8001b5e:	671a      	str	r2, [r3, #112]	; 0x70
 8001b60:	4a3e      	ldr	r2, [pc, #248]	; (8001c5c <HAL_UART_MspInit+0x1c0>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001b66:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <HAL_UART_MspInit+0x1c8>)
 8001b68:	4a3f      	ldr	r2, [pc, #252]	; (8001c68 <HAL_UART_MspInit+0x1cc>)
 8001b6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001b6c:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <HAL_UART_MspInit+0x1c8>)
 8001b6e:	2202      	movs	r2, #2
 8001b70:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b72:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <HAL_UART_MspInit+0x1c8>)
 8001b74:	2210      	movs	r2, #16
 8001b76:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b78:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <HAL_UART_MspInit+0x1c8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b7e:	4b39      	ldr	r3, [pc, #228]	; (8001c64 <HAL_UART_MspInit+0x1c8>)
 8001b80:	2280      	movs	r2, #128	; 0x80
 8001b82:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b84:	4b37      	ldr	r3, [pc, #220]	; (8001c64 <HAL_UART_MspInit+0x1c8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b8a:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <HAL_UART_MspInit+0x1c8>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b90:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <HAL_UART_MspInit+0x1c8>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b96:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <HAL_UART_MspInit+0x1c8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b9c:	4831      	ldr	r0, [pc, #196]	; (8001c64 <HAL_UART_MspInit+0x1c8>)
 8001b9e:	f000 fb7b 	bl	8002298 <HAL_DMA_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8001ba8:	f7ff fed2 	bl	8001950 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a2d      	ldr	r2, [pc, #180]	; (8001c64 <HAL_UART_MspInit+0x1c8>)
 8001bb0:	66da      	str	r2, [r3, #108]	; 0x6c
 8001bb2:	4a2c      	ldr	r2, [pc, #176]	; (8001c64 <HAL_UART_MspInit+0x1c8>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2106      	movs	r1, #6
 8001bbc:	2025      	movs	r0, #37	; 0x25
 8001bbe:	f000 fb41 	bl	8002244 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bc2:	2025      	movs	r0, #37	; 0x25
 8001bc4:	f000 fb5a 	bl	800227c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bc8:	e03f      	b.n	8001c4a <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART2)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a27      	ldr	r2, [pc, #156]	; (8001c6c <HAL_UART_MspInit+0x1d0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d13a      	bne.n	8001c4a <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_UART_MspInit+0x1bc>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd8:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <HAL_UART_MspInit+0x1bc>)
 8001bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bde:	6593      	str	r3, [r2, #88]	; 0x58
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_UART_MspInit+0x1bc>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_UART_MspInit+0x1bc>)
 8001bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf0:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_UART_MspInit+0x1bc>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_UART_MspInit+0x1bc>)
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001c04:	2304      	movs	r3, #4
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c14:	2307      	movs	r3, #7
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c22:	f000 fdbd 	bl	80027a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c46:	f000 fdab 	bl	80027a0 <HAL_GPIO_Init>
}
 8001c4a:	bf00      	nop
 8001c4c:	3730      	adds	r7, #48	; 0x30
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40013800 	.word	0x40013800
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	2000275c 	.word	0x2000275c
 8001c60:	40020058 	.word	0x40020058
 8001c64:	20002714 	.word	0x20002714
 8001c68:	40020044 	.word	0x40020044
 8001c6c:	40004400 	.word	0x40004400

08001c70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	; 0x30
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	2036      	movs	r0, #54	; 0x36
 8001c86:	f000 fadd 	bl	8002244 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c8a:	2036      	movs	r0, #54	; 0x36
 8001c8c:	f000 faf6 	bl	800227c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c90:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <HAL_InitTick+0x9c>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <HAL_InitTick+0x9c>)
 8001c96:	f043 0310 	orr.w	r3, r3, #16
 8001c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_InitTick+0x9c>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ca8:	f107 0210 	add.w	r2, r7, #16
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f003 f9a8 	bl	8005008 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cb8:	f003 f97a 	bl	8004fb0 <HAL_RCC_GetPCLK1Freq>
 8001cbc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc0:	4a13      	ldr	r2, [pc, #76]	; (8001d10 <HAL_InitTick+0xa0>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	0c9b      	lsrs	r3, r3, #18
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <HAL_InitTick+0xa4>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <HAL_InitTick+0xa8>)
 8001cd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_InitTick+0xa4>)
 8001cd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cd8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001cda:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <HAL_InitTick+0xa4>)
 8001cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cde:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_InitTick+0xa4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_InitTick+0xa4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001cec:	4809      	ldr	r0, [pc, #36]	; (8001d14 <HAL_InitTick+0xa4>)
 8001cee:	f003 fd13 	bl	8005718 <HAL_TIM_Base_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d104      	bne.n	8001d02 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001cf8:	4806      	ldr	r0, [pc, #24]	; (8001d14 <HAL_InitTick+0xa4>)
 8001cfa:	f003 fd6f 	bl	80057dc <HAL_TIM_Base_Start_IT>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	e000      	b.n	8001d04 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3730      	adds	r7, #48	; 0x30
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	431bde83 	.word	0x431bde83
 8001d14:	200028c0 	.word	0x200028c0
 8001d18:	40001000 	.word	0x40001000

08001d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <NMI_Handler+0x4>

08001d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <HardFault_Handler+0x4>

08001d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <MemManage_Handler+0x4>

08001d2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <BusFault_Handler+0x4>

08001d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <UsageFault_Handler+0x4>

08001d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <DMA1_Channel4_IRQHandler+0x10>)
 8001d4e:	f000 fc3a 	bl	80025c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20002714 	.word	0x20002714

08001d5c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <DMA1_Channel5_IRQHandler+0x10>)
 8001d62:	f000 fc30 	bl	80025c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2000275c 	.word	0x2000275c

08001d70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <I2C1_EV_IRQHandler+0x10>)
 8001d76:	f001 f835 	bl	8002de4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200026c0 	.word	0x200026c0

08001d84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <I2C1_ER_IRQHandler+0x10>)
 8001d8a:	f001 f845 	bl	8002e18 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200026c0 	.word	0x200026c0

08001d98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <USART1_IRQHandler+0x10>)
 8001d9e:	f004 f8df 	bl	8005f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200027ac 	.word	0x200027ac

08001dac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001db0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001db4:	f000 fe8e 	bl	8002ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <TIM6_DAC_IRQHandler+0x10>)
 8001dc2:	f003 fd5f 	bl	8005884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200028c0 	.word	0x200028c0

08001dd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
	return 1;
 8001dd4:	2301      	movs	r3, #1
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_kill>:

int _kill(int pid, int sig)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dea:	f008 fb03 	bl	800a3f4 <__errno>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2216      	movs	r2, #22
 8001df2:	601a      	str	r2, [r3, #0]
	return -1;
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_exit>:

void _exit (int status)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ffe7 	bl	8001de0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e12:	e7fe      	b.n	8001e12 <_exit+0x12>

08001e14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	e00a      	b.n	8001e3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e26:	f3af 8000 	nop.w
 8001e2a:	4601      	mov	r1, r0
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	60ba      	str	r2, [r7, #8]
 8001e32:	b2ca      	uxtb	r2, r1
 8001e34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	dbf0      	blt.n	8001e26 <_read+0x12>
	}

return len;
 8001e44:	687b      	ldr	r3, [r7, #4]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	e009      	b.n	8001e74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	60ba      	str	r2, [r7, #8]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fb57 	bl	800151c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	dbf1      	blt.n	8001e60 <_write+0x12>
	}
	return len;
 8001e7c:	687b      	ldr	r3, [r7, #4]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_close>:

int _close(int file)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eae:	605a      	str	r2, [r3, #4]
	return 0;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <_isatty>:

int _isatty(int file)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
	return 0;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef8:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <_sbrk+0x5c>)
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <_sbrk+0x60>)
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <_sbrk+0x64>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <_sbrk+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <_sbrk+0x64>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d207      	bcs.n	8001f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f20:	f008 fa68 	bl	800a3f4 <__errno>
 8001f24:	4603      	mov	r3, r0
 8001f26:	220c      	movs	r2, #12
 8001f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2e:	e009      	b.n	8001f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <_sbrk+0x64>)
 8001f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20010000 	.word	0x20010000
 8001f50:	00000400 	.word	0x00000400
 8001f54:	2000022c 	.word	0x2000022c
 8001f58:	20002960 	.word	0x20002960

08001f5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f60:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <SystemInit+0x64>)
 8001f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f66:	4a16      	ldr	r2, [pc, #88]	; (8001fc0 <SystemInit+0x64>)
 8001f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <SystemInit+0x68>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <SystemInit+0x68>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <SystemInit+0x68>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <SystemInit+0x68>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <SystemInit+0x68>)
 8001f88:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f8c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <SystemInit+0x68>)
 8001f94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f98:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <SystemInit+0x68>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <SystemInit+0x68>)
 8001fa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <SystemInit+0x68>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <SystemInit+0x64>)
 8001fae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fb2:	609a      	str	r2, [r3, #8]
#endif
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002000 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fcc:	f7ff ffc6 	bl	8001f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001fd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001fd2:	e003      	b.n	8001fdc <LoopCopyDataInit>

08001fd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001fd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001fda:	3104      	adds	r1, #4

08001fdc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001fdc:	480a      	ldr	r0, [pc, #40]	; (8002008 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001fe0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001fe2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001fe4:	d3f6      	bcc.n	8001fd4 <CopyDataInit>
	ldr	r2, =_sbss
 8001fe6:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001fe8:	e002      	b.n	8001ff0 <LoopFillZerobss>

08001fea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001fea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001fec:	f842 3b04 	str.w	r3, [r2], #4

08001ff0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <LoopForever+0x16>)
	cmp	r2, r3
 8001ff2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ff4:	d3f9      	bcc.n	8001fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ff6:	f008 fa03 	bl	800a400 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ffa:	f7ff f843 	bl	8001084 <main>

08001ffe <LoopForever>:

LoopForever:
    b LoopForever
 8001ffe:	e7fe      	b.n	8001ffe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002000:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002004:	0800ebc4 	.word	0x0800ebc4
	ldr	r0, =_sdata
 8002008:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800200c:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 8002010:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 8002014:	20002960 	.word	0x20002960

08002018 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002018:	e7fe      	b.n	8002018 <ADC1_IRQHandler>

0800201a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002024:	2003      	movs	r0, #3
 8002026:	f000 f902 	bl	800222e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800202a:	2000      	movs	r0, #0
 800202c:	f7ff fe20 	bl	8001c70 <HAL_InitTick>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	71fb      	strb	r3, [r7, #7]
 800203a:	e001      	b.n	8002040 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800203c:	f7ff fcb2 	bl	80019a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002040:	79fb      	ldrb	r3, [r7, #7]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_IncTick+0x20>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_IncTick+0x24>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_IncTick+0x24>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	2000000c 	.word	0x2000000c
 8002070:	2000290c 	.word	0x2000290c

08002074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <HAL_GetTick+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	2000290c 	.word	0x2000290c

0800208c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff ffee 	bl	8002074 <HAL_GetTick>
 8002098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d005      	beq.n	80020b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_Delay+0x44>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020b2:	bf00      	nop
 80020b4:	f7ff ffde 	bl	8002074 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d8f7      	bhi.n	80020b4 <HAL_Delay+0x28>
  {
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000000c 	.word	0x2000000c

080020d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <__NVIC_GetPriorityGrouping+0x18>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 0307 	and.w	r3, r3, #7
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db0b      	blt.n	8002162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	4907      	ldr	r1, [pc, #28]	; (8002170 <__NVIC_EnableIRQ+0x38>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2001      	movs	r0, #1
 800215a:	fa00 f202 	lsl.w	r2, r0, r2
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000e100 	.word	0xe000e100

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	; (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	; (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ff4c 	bl	80020d4 <__NVIC_SetPriorityGrouping>
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002256:	f7ff ff61 	bl	800211c <__NVIC_GetPriorityGrouping>
 800225a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68b9      	ldr	r1, [r7, #8]
 8002260:	6978      	ldr	r0, [r7, #20]
 8002262:	f7ff ffb1 	bl	80021c8 <NVIC_EncodePriority>
 8002266:	4602      	mov	r2, r0
 8002268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226c:	4611      	mov	r1, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ff80 	bl	8002174 <__NVIC_SetPriority>
}
 8002274:	bf00      	nop
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff54 	bl	8002138 <__NVIC_EnableIRQ>
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e098      	b.n	80023dc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <HAL_DMA_Init+0x150>)
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d80f      	bhi.n	80022d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	4b4b      	ldr	r3, [pc, #300]	; (80023ec <HAL_DMA_Init+0x154>)
 80022be:	4413      	add	r3, r2
 80022c0:	4a4b      	ldr	r2, [pc, #300]	; (80023f0 <HAL_DMA_Init+0x158>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	009a      	lsls	r2, r3, #2
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a48      	ldr	r2, [pc, #288]	; (80023f4 <HAL_DMA_Init+0x15c>)
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40
 80022d4:	e00e      	b.n	80022f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <HAL_DMA_Init+0x160>)
 80022de:	4413      	add	r3, r2
 80022e0:	4a43      	ldr	r2, [pc, #268]	; (80023f0 <HAL_DMA_Init+0x158>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	091b      	lsrs	r3, r3, #4
 80022e8:	009a      	lsls	r2, r3, #2
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a42      	ldr	r2, [pc, #264]	; (80023fc <HAL_DMA_Init+0x164>)
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800230a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002318:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800234e:	d039      	beq.n	80023c4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	4a27      	ldr	r2, [pc, #156]	; (80023f4 <HAL_DMA_Init+0x15c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d11a      	bne.n	8002390 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800235a:	4b29      	ldr	r3, [pc, #164]	; (8002400 <HAL_DMA_Init+0x168>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f003 031c 	and.w	r3, r3, #28
 8002366:	210f      	movs	r1, #15
 8002368:	fa01 f303 	lsl.w	r3, r1, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	4924      	ldr	r1, [pc, #144]	; (8002400 <HAL_DMA_Init+0x168>)
 8002370:	4013      	ands	r3, r2
 8002372:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002374:	4b22      	ldr	r3, [pc, #136]	; (8002400 <HAL_DMA_Init+0x168>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002380:	f003 031c 	and.w	r3, r3, #28
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	491d      	ldr	r1, [pc, #116]	; (8002400 <HAL_DMA_Init+0x168>)
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
 800238e:	e019      	b.n	80023c4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002390:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <HAL_DMA_Init+0x16c>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	f003 031c 	and.w	r3, r3, #28
 800239c:	210f      	movs	r1, #15
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	4917      	ldr	r1, [pc, #92]	; (8002404 <HAL_DMA_Init+0x16c>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <HAL_DMA_Init+0x16c>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6859      	ldr	r1, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f003 031c 	and.w	r3, r3, #28
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	4911      	ldr	r1, [pc, #68]	; (8002404 <HAL_DMA_Init+0x16c>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40020407 	.word	0x40020407
 80023ec:	bffdfff8 	.word	0xbffdfff8
 80023f0:	cccccccd 	.word	0xcccccccd
 80023f4:	40020000 	.word	0x40020000
 80023f8:	bffdfbf8 	.word	0xbffdfbf8
 80023fc:	40020400 	.word	0x40020400
 8002400:	400200a8 	.word	0x400200a8
 8002404:	400204a8 	.word	0x400204a8

08002408 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_DMA_Start_IT+0x20>
 8002424:	2302      	movs	r3, #2
 8002426:	e04b      	b.n	80024c0 <HAL_DMA_Start_IT+0xb8>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b01      	cmp	r3, #1
 800243a:	d13a      	bne.n	80024b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0201 	bic.w	r2, r2, #1
 8002458:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f96d 	bl	8002740 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 020e 	orr.w	r2, r2, #14
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e00f      	b.n	80024a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0204 	bic.w	r2, r2, #4
 800248e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 020a 	orr.w	r2, r2, #10
 800249e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e005      	b.n	80024be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80024ba:	2302      	movs	r3, #2
 80024bc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80024be:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d008      	beq.n	80024f2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2204      	movs	r2, #4
 80024e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e022      	b.n	8002538 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 020e 	bic.w	r2, r2, #14
 8002500:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0201 	bic.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f003 021c 	and.w	r2, r3, #28
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f202 	lsl.w	r2, r1, r2
 8002524:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002536:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d005      	beq.n	8002568 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2204      	movs	r2, #4
 8002560:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	e029      	b.n	80025bc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 020e 	bic.w	r2, r2, #14
 8002576:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	f003 021c 	and.w	r2, r3, #28
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	2101      	movs	r1, #1
 8002596:	fa01 f202 	lsl.w	r2, r1, r2
 800259a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
    }
  }
  return status;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f003 031c 	and.w	r3, r3, #28
 80025e6:	2204      	movs	r2, #4
 80025e8:	409a      	lsls	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d026      	beq.n	8002640 <HAL_DMA_IRQHandler+0x7a>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d021      	beq.n	8002640 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	2b00      	cmp	r3, #0
 8002608:	d107      	bne.n	800261a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0204 	bic.w	r2, r2, #4
 8002618:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f003 021c 	and.w	r2, r3, #28
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	2104      	movs	r1, #4
 8002628:	fa01 f202 	lsl.w	r2, r1, r2
 800262c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	2b00      	cmp	r3, #0
 8002634:	d071      	beq.n	800271a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800263e:	e06c      	b.n	800271a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002644:	f003 031c 	and.w	r3, r3, #28
 8002648:	2202      	movs	r2, #2
 800264a:	409a      	lsls	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d02e      	beq.n	80026b2 <HAL_DMA_IRQHandler+0xec>
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d029      	beq.n	80026b2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10b      	bne.n	8002684 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 020a 	bic.w	r2, r2, #10
 800267a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	f003 021c 	and.w	r2, r3, #28
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	2102      	movs	r1, #2
 8002692:	fa01 f202 	lsl.w	r2, r1, r2
 8002696:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d038      	beq.n	800271a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026b0:	e033      	b.n	800271a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f003 031c 	and.w	r3, r3, #28
 80026ba:	2208      	movs	r2, #8
 80026bc:	409a      	lsls	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d02a      	beq.n	800271c <HAL_DMA_IRQHandler+0x156>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d025      	beq.n	800271c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 020e 	bic.w	r2, r2, #14
 80026de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f003 021c 	and.w	r2, r3, #28
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	2101      	movs	r1, #1
 80026ee:	fa01 f202 	lsl.w	r2, r1, r2
 80026f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270e:	2b00      	cmp	r3, #0
 8002710:	d004      	beq.n	800271c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800271a:	bf00      	nop
 800271c:	bf00      	nop
}
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002732:	b2db      	uxtb	r3, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	f003 021c 	and.w	r2, r3, #28
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	2101      	movs	r1, #1
 800275c:	fa01 f202 	lsl.w	r2, r1, r2
 8002760:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b10      	cmp	r3, #16
 8002770:	d108      	bne.n	8002784 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002782:	e007      	b.n	8002794 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	60da      	str	r2, [r3, #12]
}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ae:	e148      	b.n	8002a42 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	2101      	movs	r1, #1
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	4013      	ands	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 813a 	beq.w	8002a3c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d00b      	beq.n	80027e8 <HAL_GPIO_Init+0x48>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d007      	beq.n	80027e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027dc:	2b11      	cmp	r3, #17
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b12      	cmp	r3, #18
 80027e6:	d130      	bne.n	800284a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2203      	movs	r2, #3
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800281e:	2201      	movs	r2, #1
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	f003 0201 	and.w	r2, r3, #1
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	2203      	movs	r2, #3
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4013      	ands	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0xea>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b12      	cmp	r3, #18
 8002888:	d123      	bne.n	80028d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	08da      	lsrs	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3208      	adds	r2, #8
 8002892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002896:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	220f      	movs	r2, #15
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	6939      	ldr	r1, [r7, #16]
 80028ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	2203      	movs	r2, #3
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 0203 	and.w	r2, r3, #3
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8094 	beq.w	8002a3c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002914:	4b52      	ldr	r3, [pc, #328]	; (8002a60 <HAL_GPIO_Init+0x2c0>)
 8002916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002918:	4a51      	ldr	r2, [pc, #324]	; (8002a60 <HAL_GPIO_Init+0x2c0>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6613      	str	r3, [r2, #96]	; 0x60
 8002920:	4b4f      	ldr	r3, [pc, #316]	; (8002a60 <HAL_GPIO_Init+0x2c0>)
 8002922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800292c:	4a4d      	ldr	r2, [pc, #308]	; (8002a64 <HAL_GPIO_Init+0x2c4>)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	3302      	adds	r3, #2
 8002934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	220f      	movs	r2, #15
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4013      	ands	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002956:	d00d      	beq.n	8002974 <HAL_GPIO_Init+0x1d4>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a43      	ldr	r2, [pc, #268]	; (8002a68 <HAL_GPIO_Init+0x2c8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d007      	beq.n	8002970 <HAL_GPIO_Init+0x1d0>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a42      	ldr	r2, [pc, #264]	; (8002a6c <HAL_GPIO_Init+0x2cc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d101      	bne.n	800296c <HAL_GPIO_Init+0x1cc>
 8002968:	2302      	movs	r3, #2
 800296a:	e004      	b.n	8002976 <HAL_GPIO_Init+0x1d6>
 800296c:	2307      	movs	r3, #7
 800296e:	e002      	b.n	8002976 <HAL_GPIO_Init+0x1d6>
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <HAL_GPIO_Init+0x1d6>
 8002974:	2300      	movs	r3, #0
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	f002 0203 	and.w	r2, r2, #3
 800297c:	0092      	lsls	r2, r2, #2
 800297e:	4093      	lsls	r3, r2
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002986:	4937      	ldr	r1, [pc, #220]	; (8002a64 <HAL_GPIO_Init+0x2c4>)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	089b      	lsrs	r3, r3, #2
 800298c:	3302      	adds	r3, #2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002994:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	43db      	mvns	r3, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029b8:	4a2d      	ldr	r2, [pc, #180]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80029be:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	43db      	mvns	r3, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029e2:	4a23      	ldr	r2, [pc, #140]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029e8:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a0c:	4a18      	ldr	r2, [pc, #96]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a12:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a36:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <HAL_GPIO_Init+0x2d0>)
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f47f aeaf 	bne.w	80027b0 <HAL_GPIO_Init+0x10>
  }
}
 8002a52:	bf00      	nop
 8002a54:	bf00      	nop
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40010000 	.word	0x40010000
 8002a68:	48000400 	.word	0x48000400
 8002a6c:	48000800 	.word	0x48000800
 8002a70:	40010400 	.word	0x40010400

08002a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	887b      	ldrh	r3, [r7, #2]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	e001      	b.n	8002a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	807b      	strh	r3, [r7, #2]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab4:	787b      	ldrb	r3, [r7, #1]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ac0:	e002      	b.n	8002ac8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ac2:	887a      	ldrh	r2, [r7, #2]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aea:	4a05      	ldr	r2, [pc, #20]	; (8002b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe fd3a 	bl	800156c <HAL_GPIO_EXTI_Callback>
  }
}
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40010400 	.word	0x40010400

08002b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e081      	b.n	8002c1a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe ff62 	bl	80019f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2224      	movs	r2, #36	; 0x24
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d107      	bne.n	8002b7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	e006      	b.n	8002b8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d104      	bne.n	8002b9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691a      	ldr	r2, [r3, #16]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	ea42 0103 	orr.w	r1, r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	021a      	lsls	r2, r3, #8
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69d9      	ldr	r1, [r3, #28]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1a      	ldr	r2, [r3, #32]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	460b      	mov	r3, r1
 8002c32:	817b      	strh	r3, [r7, #10]
 8002c34:	4613      	mov	r3, r2
 8002c36:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d153      	bne.n	8002cec <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c52:	d101      	bne.n	8002c58 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
 8002c56:	e04a      	b.n	8002cee <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_I2C_Master_Transmit_IT+0x42>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e043      	b.n	8002cee <HAL_I2C_Master_Transmit_IT+0xca>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2221      	movs	r2, #33	; 0x21
 8002c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2210      	movs	r2, #16
 8002c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	893a      	ldrh	r2, [r7, #8]
 8002c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8002c94:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <HAL_I2C_Master_Transmit_IT+0xd8>)
 8002c9a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2bff      	cmp	r3, #255	; 0xff
 8002ca4:	d906      	bls.n	8002cb4 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	22ff      	movs	r2, #255	; 0xff
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	e007      	b.n	8002cc4 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	8979      	ldrh	r1, [r7, #10]
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f001 f9d6 	bl	8004084 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f001 f9fc 	bl	80040e0 <I2C_Enable_IRQ>

    return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e000      	b.n	8002cee <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	ffff0000 	.word	0xffff0000
 8002cfc:	08002f83 	.word	0x08002f83
 8002d00:	80002000 	.word	0x80002000

08002d04 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	460b      	mov	r3, r1
 8002d12:	817b      	strh	r3, [r7, #10]
 8002d14:	4613      	mov	r3, r2
 8002d16:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d153      	bne.n	8002dcc <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d32:	d101      	bne.n	8002d38 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8002d34:	2302      	movs	r3, #2
 8002d36:	e04a      	b.n	8002dce <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_I2C_Master_Receive_IT+0x42>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e043      	b.n	8002dce <HAL_I2C_Master_Receive_IT+0xca>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2222      	movs	r2, #34	; 0x22
 8002d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2210      	movs	r2, #16
 8002d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	893a      	ldrh	r2, [r7, #8]
 8002d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4a19      	ldr	r2, [pc, #100]	; (8002dd8 <HAL_I2C_Master_Receive_IT+0xd4>)
 8002d74:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <HAL_I2C_Master_Receive_IT+0xd8>)
 8002d7a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2bff      	cmp	r3, #255	; 0xff
 8002d84:	d906      	bls.n	8002d94 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	22ff      	movs	r2, #255	; 0xff
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002d8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e007      	b.n	8002da4 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002da2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	8979      	ldrh	r1, [r7, #10]
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <HAL_I2C_Master_Receive_IT+0xdc>)
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f001 f966 	bl	8004084 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f001 f98c 	bl	80040e0 <I2C_Enable_IRQ>

    return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e000      	b.n	8002dce <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
  }
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	ffff0000 	.word	0xffff0000
 8002ddc:	08002f83 	.word	0x08002f83
 8002de0:	80002400 	.word	0x80002400

08002de4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	68f9      	ldr	r1, [r7, #12]
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	4798      	blx	r3
  }
}
 8002e10:	bf00      	nop
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d010      	beq.n	8002e5e <HAL_I2C_ER_IRQHandler+0x46>
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	09db      	lsrs	r3, r3, #7
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4c:	f043 0201 	orr.w	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e5c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	0a9b      	lsrs	r3, r3, #10
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d010      	beq.n	8002e8c <HAL_I2C_ER_IRQHandler+0x74>
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	09db      	lsrs	r3, r3, #7
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	f043 0208 	orr.w	r2, r3, #8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e8a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	0a5b      	lsrs	r3, r3, #9
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d010      	beq.n	8002eba <HAL_I2C_ER_IRQHandler+0xa2>
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	09db      	lsrs	r3, r3, #7
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea8:	f043 0202 	orr.w	r2, r3, #2
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 030b 	and.w	r3, r3, #11
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002eca:	68f9      	ldr	r1, [r7, #12]
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 ff9f 	bl	8003e10 <I2C_ITError>
  }
}
 8002ed2:	bf00      	nop
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	70fb      	strb	r3, [r7, #3]
 8002f22:	4613      	mov	r3, r2
 8002f24:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b088      	sub	sp, #32
 8002f86:	af02      	add	r7, sp, #8
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <I2C_Master_ISR_IT+0x1e>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e114      	b.n	80031ca <I2C_Master_ISR_IT+0x248>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	091b      	lsrs	r3, r3, #4
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d013      	beq.n	8002fdc <I2C_Master_ISR_IT+0x5a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	091b      	lsrs	r3, r3, #4
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2210      	movs	r2, #16
 8002fc6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fcc:	f043 0204 	orr.w	r2, r3, #4
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f001 f812 	bl	8003ffe <I2C_Flush_TXDR>
 8002fda:	e0e1      	b.n	80031a0 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d023      	beq.n	8003030 <I2C_Master_ISR_IT+0xae>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	089b      	lsrs	r3, r3, #2
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01d      	beq.n	8003030 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f023 0304 	bic.w	r3, r3, #4
 8002ffa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800302e:	e0b7      	b.n	80031a0 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01e      	beq.n	800307a <I2C_Master_ISR_IT+0xf8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d018      	beq.n	800307a <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	781a      	ldrb	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003078:	e092      	b.n	80031a0 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	09db      	lsrs	r3, r3, #7
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d05d      	beq.n	8003142 <I2C_Master_ISR_IT+0x1c0>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	099b      	lsrs	r3, r3, #6
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d057      	beq.n	8003142 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d040      	beq.n	800311e <I2C_Master_ISR_IT+0x19c>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d13c      	bne.n	800311e <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030b0:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2bff      	cmp	r3, #255	; 0xff
 80030ba:	d90e      	bls.n	80030da <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	22ff      	movs	r2, #255	; 0xff
 80030c0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	8a79      	ldrh	r1, [r7, #18]
 80030ca:	2300      	movs	r3, #0
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 ffd6 	bl	8004084 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030d8:	e032      	b.n	8003140 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030ec:	d00b      	beq.n	8003106 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	8a79      	ldrh	r1, [r7, #18]
 80030fa:	2000      	movs	r0, #0
 80030fc:	9000      	str	r0, [sp, #0]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 ffc0 	bl	8004084 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003104:	e01c      	b.n	8003140 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	b2da      	uxtb	r2, r3
 800310c:	8a79      	ldrh	r1, [r7, #18]
 800310e:	2300      	movs	r3, #0
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 ffb4 	bl	8004084 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800311c:	e010      	b.n	8003140 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003128:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800312c:	d003      	beq.n	8003136 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fba9 	bl	8003886 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003134:	e034      	b.n	80031a0 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003136:	2140      	movs	r1, #64	; 0x40
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fe69 	bl	8003e10 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800313e:	e02f      	b.n	80031a0 <I2C_Master_ISR_IT+0x21e>
 8003140:	e02e      	b.n	80031a0 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d028      	beq.n	80031a0 <I2C_Master_ISR_IT+0x21e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	099b      	lsrs	r3, r3, #6
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d022      	beq.n	80031a0 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d119      	bne.n	8003198 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003172:	d015      	beq.n	80031a0 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800317c:	d108      	bne.n	8003190 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	e007      	b.n	80031a0 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fb78 	bl	8003886 <I2C_ITMasterSeqCplt>
 8003196:	e003      	b.n	80031a0 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003198:	2140      	movs	r1, #64	; 0x40
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fe38 	bl	8003e10 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d009      	beq.n	80031c0 <I2C_Master_ISR_IT+0x23e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80031b8:	6979      	ldr	r1, [r7, #20]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fbfe 	bl	80039bc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <I2C_Slave_ISR_IT+0x24>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e0ec      	b.n	80033d0 <I2C_Slave_ISR_IT+0x1fe>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <I2C_Slave_ISR_IT+0x4c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003216:	6939      	ldr	r1, [r7, #16]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fc99 	bl	8003b50 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d04d      	beq.n	80032c6 <I2C_Slave_ISR_IT+0xf4>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d047      	beq.n	80032c6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d128      	bne.n	8003292 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b28      	cmp	r3, #40	; 0x28
 800324a:	d108      	bne.n	800325e <I2C_Slave_ISR_IT+0x8c>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003252:	d104      	bne.n	800325e <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003254:	6939      	ldr	r1, [r7, #16]
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fd84 	bl	8003d64 <I2C_ITListenCplt>
 800325c:	e032      	b.n	80032c4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b29      	cmp	r3, #41	; 0x29
 8003268:	d10e      	bne.n	8003288 <I2C_Slave_ISR_IT+0xb6>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003270:	d00a      	beq.n	8003288 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2210      	movs	r2, #16
 8003278:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 febf 	bl	8003ffe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fb3d 	bl	8003900 <I2C_ITSlaveSeqCplt>
 8003286:	e01d      	b.n	80032c4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2210      	movs	r2, #16
 800328e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003290:	e096      	b.n	80033c0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2210      	movs	r2, #16
 8003298:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	f043 0204 	orr.w	r2, r3, #4
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d004      	beq.n	80032b6 <I2C_Slave_ISR_IT+0xe4>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b2:	f040 8085 	bne.w	80033c0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	4619      	mov	r1, r3
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fda7 	bl	8003e10 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80032c2:	e07d      	b.n	80033c0 <I2C_Slave_ISR_IT+0x1ee>
 80032c4:	e07c      	b.n	80033c0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d030      	beq.n	8003334 <I2C_Slave_ISR_IT+0x162>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d02a      	beq.n	8003334 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d018      	beq.n	800331a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d14f      	bne.n	80033c4 <I2C_Slave_ISR_IT+0x1f2>
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800332a:	d04b      	beq.n	80033c4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 fae7 	bl	8003900 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003332:	e047      	b.n	80033c4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	08db      	lsrs	r3, r3, #3
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	08db      	lsrs	r3, r3, #3
 8003344:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003348:	2b00      	cmp	r3, #0
 800334a:	d004      	beq.n	8003356 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800334c:	6939      	ldr	r1, [r7, #16]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fa15 	bl	800377e <I2C_ITAddrCplt>
 8003354:	e037      	b.n	80033c6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d031      	beq.n	80033c6 <I2C_Slave_ISR_IT+0x1f4>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d02b      	beq.n	80033c6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d018      	beq.n	80033aa <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	851a      	strh	r2, [r3, #40]	; 0x28
 80033a8:	e00d      	b.n	80033c6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b0:	d002      	beq.n	80033b8 <I2C_Slave_ISR_IT+0x1e6>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d106      	bne.n	80033c6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 faa1 	bl	8003900 <I2C_ITSlaveSeqCplt>
 80033be:	e002      	b.n	80033c6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80033c0:	bf00      	nop
 80033c2:	e000      	b.n	80033c6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80033c4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af02      	add	r7, sp, #8
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <I2C_Master_ISR_DMA+0x1a>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e0e1      	b.n	80035b6 <I2C_Master_ISR_DMA+0x1de>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d017      	beq.n	8003436 <I2C_Master_ISR_DMA+0x5e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d011      	beq.n	8003436 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2210      	movs	r2, #16
 8003418:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f043 0204 	orr.w	r2, r3, #4
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003426:	2120      	movs	r1, #32
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fe59 	bl	80040e0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fde5 	bl	8003ffe <I2C_Flush_TXDR>
 8003434:	e0ba      	b.n	80035ac <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	09db      	lsrs	r3, r3, #7
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d072      	beq.n	8003528 <I2C_Master_ISR_DMA+0x150>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	099b      	lsrs	r3, r3, #6
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d06c      	beq.n	8003528 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800345c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d04e      	beq.n	8003506 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	b29b      	uxth	r3, r3
 8003470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003474:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	2bff      	cmp	r3, #255	; 0xff
 800347e:	d906      	bls.n	800348e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	22ff      	movs	r2, #255	; 0xff
 8003484:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003486:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	e010      	b.n	80034b0 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034a0:	d003      	beq.n	80034aa <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	e002      	b.n	80034b0 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80034aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ae:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	8a79      	ldrh	r1, [r7, #18]
 80034b8:	2300      	movs	r3, #0
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fde0 	bl	8004084 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b22      	cmp	r3, #34	; 0x22
 80034e0:	d108      	bne.n	80034f4 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034f0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80034f2:	e05b      	b.n	80035ac <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003502:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003504:	e052      	b.n	80035ac <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003510:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003514:	d003      	beq.n	800351e <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f9b5 	bl	8003886 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800351c:	e046      	b.n	80035ac <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800351e:	2140      	movs	r1, #64	; 0x40
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 fc75 	bl	8003e10 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003526:	e041      	b.n	80035ac <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	099b      	lsrs	r3, r3, #6
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d029      	beq.n	8003588 <I2C_Master_ISR_DMA+0x1b0>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d023      	beq.n	8003588 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d119      	bne.n	800357e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003554:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003558:	d027      	beq.n	80035aa <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003562:	d108      	bne.n	8003576 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003572:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003574:	e019      	b.n	80035aa <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f985 	bl	8003886 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800357c:	e015      	b.n	80035aa <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800357e:	2140      	movs	r1, #64	; 0x40
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 fc45 	bl	8003e10 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003586:	e010      	b.n	80035aa <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00b      	beq.n	80035ac <I2C_Master_ISR_DMA+0x1d4>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fa0a 	bl	80039bc <I2C_ITMasterCplt>
 80035a8:	e000      	b.n	80035ac <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80035aa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3718      	adds	r7, #24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b088      	sub	sp, #32
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <I2C_Slave_ISR_DMA+0x24>
 80035de:	2302      	movs	r3, #2
 80035e0:	e0c9      	b.n	8003776 <I2C_Slave_ISR_DMA+0x1b8>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <I2C_Slave_ISR_DMA+0x4c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 faa3 	bl	8003b50 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 809a 	beq.w	800374c <I2C_Slave_ISR_DMA+0x18e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 8093 	beq.w	800374c <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	0b9b      	lsrs	r3, r3, #14
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	0bdb      	lsrs	r3, r3, #15
 8003636:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800363a:	2b00      	cmp	r3, #0
 800363c:	d07f      	beq.n	800373e <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00d      	beq.n	8003662 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	0bdb      	lsrs	r3, r3, #15
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800365e:	2301      	movs	r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00d      	beq.n	8003686 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	0b9b      	lsrs	r3, r3, #14
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003682:	2301      	movs	r3, #1
 8003684:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d128      	bne.n	80036de <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b28      	cmp	r3, #40	; 0x28
 8003696:	d108      	bne.n	80036aa <I2C_Slave_ISR_DMA+0xec>
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800369e:	d104      	bne.n	80036aa <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80036a0:	68b9      	ldr	r1, [r7, #8]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fb5e 	bl	8003d64 <I2C_ITListenCplt>
 80036a8:	e048      	b.n	800373c <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b29      	cmp	r3, #41	; 0x29
 80036b4:	d10e      	bne.n	80036d4 <I2C_Slave_ISR_DMA+0x116>
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036bc:	d00a      	beq.n	80036d4 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2210      	movs	r2, #16
 80036c4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fc99 	bl	8003ffe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f917 	bl	8003900 <I2C_ITSlaveSeqCplt>
 80036d2:	e033      	b.n	800373c <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2210      	movs	r2, #16
 80036da:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80036dc:	e034      	b.n	8003748 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2210      	movs	r2, #16
 80036e4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	f043 0204 	orr.w	r2, r3, #4
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <I2C_Slave_ISR_DMA+0x14a>
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003706:	d11f      	bne.n	8003748 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	2b21      	cmp	r3, #33	; 0x21
 800370c:	d002      	beq.n	8003714 <I2C_Slave_ISR_DMA+0x156>
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	2b29      	cmp	r3, #41	; 0x29
 8003712:	d103      	bne.n	800371c <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2221      	movs	r2, #33	; 0x21
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
 800371a:	e008      	b.n	800372e <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	2b22      	cmp	r3, #34	; 0x22
 8003720:	d002      	beq.n	8003728 <I2C_Slave_ISR_DMA+0x16a>
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	2b2a      	cmp	r3, #42	; 0x2a
 8003726:	d102      	bne.n	800372e <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2222      	movs	r2, #34	; 0x22
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	4619      	mov	r1, r3
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fb6b 	bl	8003e10 <I2C_ITError>
      if (treatdmanack == 1U)
 800373a:	e005      	b.n	8003748 <I2C_Slave_ISR_DMA+0x18a>
 800373c:	e004      	b.n	8003748 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2210      	movs	r2, #16
 8003744:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003746:	e011      	b.n	800376c <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003748:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800374a:	e00f      	b.n	800376c <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	08db      	lsrs	r3, r3, #3
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d009      	beq.n	800376c <I2C_Slave_ISR_DMA+0x1ae>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	08db      	lsrs	r3, r3, #3
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f809 	bl	800377e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3720      	adds	r7, #32
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800378e:	b2db      	uxtb	r3, r3
 8003790:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003794:	2b28      	cmp	r3, #40	; 0x28
 8003796:	d16a      	bne.n	800386e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	0c1b      	lsrs	r3, r3, #16
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	0c1b      	lsrs	r3, r3, #16
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80037b6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037c4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80037d2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d138      	bne.n	800384e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80037dc:	897b      	ldrh	r3, [r7, #10]
 80037de:	09db      	lsrs	r3, r3, #7
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	89bb      	ldrh	r3, [r7, #12]
 80037e4:	4053      	eors	r3, r2
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	f003 0306 	and.w	r3, r3, #6
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d11c      	bne.n	800382a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80037f0:	897b      	ldrh	r3, [r7, #10]
 80037f2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003802:	2b02      	cmp	r3, #2
 8003804:	d13b      	bne.n	800387e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2208      	movs	r2, #8
 8003812:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800381c:	89ba      	ldrh	r2, [r7, #12]
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	4619      	mov	r1, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff fb77 	bl	8002f16 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003828:	e029      	b.n	800387e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800382a:	893b      	ldrh	r3, [r7, #8]
 800382c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800382e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fcb8 	bl	80041a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003840:	89ba      	ldrh	r2, [r7, #12]
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff fb65 	bl	8002f16 <HAL_I2C_AddrCallback>
}
 800384c:	e017      	b.n	800387e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800384e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fca8 	bl	80041a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003860:	89ba      	ldrh	r2, [r7, #12]
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	4619      	mov	r1, r3
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff fb55 	bl	8002f16 <HAL_I2C_AddrCallback>
}
 800386c:	e007      	b.n	800387e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2208      	movs	r2, #8
 8003874:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800387e:	bf00      	nop
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b21      	cmp	r3, #33	; 0x21
 80038a0:	d115      	bne.n	80038ce <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2211      	movs	r2, #17
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80038b6:	2101      	movs	r1, #1
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fc75 	bl	80041a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff fb07 	bl	8002eda <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038cc:	e014      	b.n	80038f8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2212      	movs	r2, #18
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80038e2:	2102      	movs	r1, #2
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fc5f 	bl	80041a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7fd fe5a 	bl	80015ac <HAL_I2C_MasterRxCpltCallback>
}
 80038f8:	bf00      	nop
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	0b9b      	lsrs	r3, r3, #14
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e00d      	b.n	8003952 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	0bdb      	lsrs	r3, r3, #15
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003950:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b29      	cmp	r3, #41	; 0x29
 800395c:	d112      	bne.n	8003984 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2228      	movs	r2, #40	; 0x28
 8003962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2221      	movs	r2, #33	; 0x21
 800396a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800396c:	2101      	movs	r1, #1
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fc1a 	bl	80041a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff fab6 	bl	8002eee <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003982:	e017      	b.n	80039b4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b2a      	cmp	r3, #42	; 0x2a
 800398e:	d111      	bne.n	80039b4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2228      	movs	r2, #40	; 0x28
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2222      	movs	r2, #34	; 0x22
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800399e:	2102      	movs	r1, #2
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 fc01 	bl	80041a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff faa7 	bl	8002f02 <HAL_I2C_SlaveRxCpltCallback>
}
 80039b4:	bf00      	nop
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2220      	movs	r2, #32
 80039d0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b21      	cmp	r3, #33	; 0x21
 80039dc:	d107      	bne.n	80039ee <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80039de:	2101      	movs	r1, #1
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fbe1 	bl	80041a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2211      	movs	r2, #17
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
 80039ec:	e00c      	b.n	8003a08 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b22      	cmp	r3, #34	; 0x22
 80039f8:	d106      	bne.n	8003a08 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80039fa:	2102      	movs	r1, #2
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fbd3 	bl	80041a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2212      	movs	r2, #18
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6859      	ldr	r1, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	4b4d      	ldr	r3, [pc, #308]	; (8003b48 <I2C_ITMasterCplt+0x18c>)
 8003a14:	400b      	ands	r3, r1
 8003a16:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4a      	ldr	r2, [pc, #296]	; (8003b4c <I2C_ITMasterCplt+0x190>)
 8003a22:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	091b      	lsrs	r3, r3, #4
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d009      	beq.n	8003a44 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2210      	movs	r2, #16
 8003a36:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	f043 0204 	orr.w	r2, r3, #4
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b60      	cmp	r3, #96	; 0x60
 8003a4e:	d10b      	bne.n	8003a68 <I2C_ITMasterCplt+0xac>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	089b      	lsrs	r3, r3, #2
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003a66:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fac8 	bl	8003ffe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b60      	cmp	r3, #96	; 0x60
 8003a7e:	d002      	beq.n	8003a86 <I2C_ITMasterCplt+0xca>
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d006      	beq.n	8003a94 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f9bf 	bl	8003e10 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a92:	e054      	b.n	8003b3e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b21      	cmp	r3, #33	; 0x21
 8003a9e:	d124      	bne.n	8003aea <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b40      	cmp	r3, #64	; 0x40
 8003ab8:	d10b      	bne.n	8003ad2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff fa3b 	bl	8002f46 <HAL_I2C_MemTxCpltCallback>
}
 8003ad0:	e035      	b.n	8003b3e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff f9f9 	bl	8002eda <HAL_I2C_MasterTxCpltCallback>
}
 8003ae8:	e029      	b.n	8003b3e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b22      	cmp	r3, #34	; 0x22
 8003af4:	d123      	bne.n	8003b3e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b40      	cmp	r3, #64	; 0x40
 8003b0e:	d10b      	bne.n	8003b28 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff fa1a 	bl	8002f5a <HAL_I2C_MemRxCpltCallback>
}
 8003b26:	e00a      	b.n	8003b3e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7fd fd37 	bl	80015ac <HAL_I2C_MasterRxCpltCallback>
}
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	fe00e800 	.word	0xfe00e800
 8003b4c:	ffff0000 	.word	0xffff0000

08003b50 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2220      	movs	r2, #32
 8003b74:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	2b21      	cmp	r3, #33	; 0x21
 8003b7a:	d002      	beq.n	8003b82 <I2C_ITSlaveCplt+0x32>
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	2b29      	cmp	r3, #41	; 0x29
 8003b80:	d108      	bne.n	8003b94 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003b82:	f248 0101 	movw	r1, #32769	; 0x8001
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fb0e 	bl	80041a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2221      	movs	r2, #33	; 0x21
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
 8003b92:	e00d      	b.n	8003bb0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	2b22      	cmp	r3, #34	; 0x22
 8003b98:	d002      	beq.n	8003ba0 <I2C_ITSlaveCplt+0x50>
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b9e:	d107      	bne.n	8003bb0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003ba0:	f248 0102 	movw	r1, #32770	; 0x8002
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 faff 	bl	80041a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2222      	movs	r2, #34	; 0x22
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6859      	ldr	r1, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	4b64      	ldr	r3, [pc, #400]	; (8003d5c <I2C_ITSlaveCplt+0x20c>)
 8003bcc:	400b      	ands	r3, r1
 8003bce:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fa14 	bl	8003ffe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	0b9b      	lsrs	r3, r3, #14
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d013      	beq.n	8003c0a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bf0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d020      	beq.n	8003c3c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c08:	e018      	b.n	8003c3c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	0bdb      	lsrs	r3, r3, #15
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d012      	beq.n	8003c3c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c24:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d006      	beq.n	8003c3c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d020      	beq.n	8003c8a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f023 0304 	bic.w	r3, r3, #4
 8003c4e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00c      	beq.n	8003c8a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c98:	f043 0204 	orr.w	r2, r3, #4
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d010      	beq.n	8003cd8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	4619      	mov	r1, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f8a7 	bl	8003e10 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b28      	cmp	r3, #40	; 0x28
 8003ccc:	d141      	bne.n	8003d52 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003cce:	6979      	ldr	r1, [r7, #20]
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f847 	bl	8003d64 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cd6:	e03c      	b.n	8003d52 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ce0:	d014      	beq.n	8003d0c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff fe0c 	bl	8003900 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <I2C_ITSlaveCplt+0x210>)
 8003cec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff f914 	bl	8002f32 <HAL_I2C_ListenCpltCallback>
}
 8003d0a:	e022      	b.n	8003d52 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b22      	cmp	r3, #34	; 0x22
 8003d16:	d10e      	bne.n	8003d36 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff f8e7 	bl	8002f02 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d34:	e00d      	b.n	8003d52 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff f8ce 	bl	8002eee <HAL_I2C_SlaveTxCpltCallback>
}
 8003d52:	bf00      	nop
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	fe00e800 	.word	0xfe00e800
 8003d60:	ffff0000 	.word	0xffff0000

08003d64 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a26      	ldr	r2, [pc, #152]	; (8003e0c <I2C_ITListenCplt+0xa8>)
 8003d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	089b      	lsrs	r3, r3, #2
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d022      	beq.n	8003de2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d012      	beq.n	8003de2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f043 0204 	orr.w	r2, r3, #4
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003de2:	f248 0103 	movw	r1, #32771	; 0x8003
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f9de 	bl	80041a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2210      	movs	r2, #16
 8003df2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff f898 	bl	8002f32 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	ffff0000 	.word	0xffff0000

08003e10 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a5d      	ldr	r2, [pc, #372]	; (8003fa4 <I2C_ITError+0x194>)
 8003e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
 8003e44:	2b28      	cmp	r3, #40	; 0x28
 8003e46:	d005      	beq.n	8003e54 <I2C_ITError+0x44>
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b29      	cmp	r3, #41	; 0x29
 8003e4c:	d002      	beq.n	8003e54 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	2b2a      	cmp	r3, #42	; 0x2a
 8003e52:	d10b      	bne.n	8003e6c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e54:	2103      	movs	r1, #3
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f9a6 	bl	80041a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2228      	movs	r2, #40	; 0x28
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a50      	ldr	r2, [pc, #320]	; (8003fa8 <I2C_ITError+0x198>)
 8003e68:	635a      	str	r2, [r3, #52]	; 0x34
 8003e6a:	e011      	b.n	8003e90 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e6c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f999 	bl	80041a8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b60      	cmp	r3, #96	; 0x60
 8003e80:	d003      	beq.n	8003e8a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d039      	beq.n	8003f12 <I2C_ITError+0x102>
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b11      	cmp	r3, #17
 8003ea2:	d002      	beq.n	8003eaa <I2C_ITError+0x9a>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b21      	cmp	r3, #33	; 0x21
 8003ea8:	d133      	bne.n	8003f12 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eb8:	d107      	bne.n	8003eca <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ec8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fc28 	bl	8002724 <HAL_DMA_GetState>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d017      	beq.n	8003f0a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	4a33      	ldr	r2, [pc, #204]	; (8003fac <I2C_ITError+0x19c>)
 8003ee0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fb28 	bl	8002544 <HAL_DMA_Abort_IT>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d04d      	beq.n	8003f96 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f04:	4610      	mov	r0, r2
 8003f06:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f08:	e045      	b.n	8003f96 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f850 	bl	8003fb0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f10:	e041      	b.n	8003f96 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d039      	beq.n	8003f8e <I2C_ITError+0x17e>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b12      	cmp	r3, #18
 8003f1e:	d002      	beq.n	8003f26 <I2C_ITError+0x116>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b22      	cmp	r3, #34	; 0x22
 8003f24:	d133      	bne.n	8003f8e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f34:	d107      	bne.n	8003f46 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f44:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fe fbea 	bl	8002724 <HAL_DMA_GetState>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d017      	beq.n	8003f86 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	4a14      	ldr	r2, [pc, #80]	; (8003fac <I2C_ITError+0x19c>)
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe faea 	bl	8002544 <HAL_DMA_Abort_IT>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d011      	beq.n	8003f9a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f80:	4610      	mov	r0, r2
 8003f82:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f84:	e009      	b.n	8003f9a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f812 	bl	8003fb0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f8c:	e005      	b.n	8003f9a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f80e 	bl	8003fb0 <I2C_TreatErrorCallback>
  }
}
 8003f94:	e002      	b.n	8003f9c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f96:	bf00      	nop
 8003f98:	e000      	b.n	8003f9c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f9a:	bf00      	nop
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	ffff0000 	.word	0xffff0000
 8003fa8:	080031d3 	.word	0x080031d3
 8003fac:	08004047 	.word	0x08004047

08003fb0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b60      	cmp	r3, #96	; 0x60
 8003fc2:	d10e      	bne.n	8003fe2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fe ffc7 	bl	8002f6e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fe0:	e009      	b.n	8003ff6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7fd faf1 	bl	80015d8 <HAL_I2C_ErrorCallback>
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b02      	cmp	r3, #2
 8004012:	d103      	bne.n	800401c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2200      	movs	r2, #0
 800401a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b01      	cmp	r3, #1
 8004028:	d007      	beq.n	800403a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699a      	ldr	r2, [r3, #24]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0201 	orr.w	r2, r2, #1
 8004038:	619a      	str	r2, [r3, #24]
  }
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	2200      	movs	r2, #0
 8004062:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	2200      	movs	r2, #0
 8004072:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f7ff ff9b 	bl	8003fb0 <I2C_TreatErrorCallback>
}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	607b      	str	r3, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	817b      	strh	r3, [r7, #10]
 8004092:	4613      	mov	r3, r2
 8004094:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	0d5b      	lsrs	r3, r3, #21
 80040a0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040a4:	4b0d      	ldr	r3, [pc, #52]	; (80040dc <I2C_TransferConfig+0x58>)
 80040a6:	430b      	orrs	r3, r1
 80040a8:	43db      	mvns	r3, r3
 80040aa:	ea02 0103 	and.w	r1, r2, r3
 80040ae:	897b      	ldrh	r3, [r7, #10]
 80040b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040b4:	7a7b      	ldrb	r3, [r7, #9]
 80040b6:	041b      	lsls	r3, r3, #16
 80040b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	03ff63ff 	.word	0x03ff63ff

080040e0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	4a2a      	ldr	r2, [pc, #168]	; (80041a0 <I2C_Enable_IRQ+0xc0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d004      	beq.n	8004104 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80040fe:	4a29      	ldr	r2, [pc, #164]	; (80041a4 <I2C_Enable_IRQ+0xc4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d11d      	bne.n	8004140 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004104:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004108:	2b00      	cmp	r3, #0
 800410a:	da03      	bge.n	8004114 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004112:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004114:	887b      	ldrh	r3, [r7, #2]
 8004116:	2b10      	cmp	r3, #16
 8004118:	d103      	bne.n	8004122 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004120:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004122:	887b      	ldrh	r3, [r7, #2]
 8004124:	2b20      	cmp	r3, #32
 8004126:	d103      	bne.n	8004130 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800412e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004130:	887b      	ldrh	r3, [r7, #2]
 8004132:	2b40      	cmp	r3, #64	; 0x40
 8004134:	d125      	bne.n	8004182 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800413c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800413e:	e020      	b.n	8004182 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004140:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004144:	2b00      	cmp	r3, #0
 8004146:	da03      	bge.n	8004150 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800414e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004150:	887b      	ldrh	r3, [r7, #2]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004160:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004162:	887b      	ldrh	r3, [r7, #2]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004172:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004174:	887b      	ldrh	r3, [r7, #2]
 8004176:	2b20      	cmp	r3, #32
 8004178:	d103      	bne.n	8004182 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f043 0320 	orr.w	r3, r3, #32
 8004180:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6819      	ldr	r1, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	430a      	orrs	r2, r1
 8004190:	601a      	str	r2, [r3, #0]
}
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	080033d9 	.word	0x080033d9
 80041a4:	080035bf 	.word	0x080035bf

080041a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80041b8:	887b      	ldrh	r3, [r7, #2]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00f      	beq.n	80041e2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80041c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041d6:	2b28      	cmp	r3, #40	; 0x28
 80041d8:	d003      	beq.n	80041e2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80041e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80041e2:	887b      	ldrh	r3, [r7, #2]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00f      	beq.n	800420c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80041f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004200:	2b28      	cmp	r3, #40	; 0x28
 8004202:	d003      	beq.n	800420c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800420a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800420c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004210:	2b00      	cmp	r3, #0
 8004212:	da03      	bge.n	800421c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800421a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800421c:	887b      	ldrh	r3, [r7, #2]
 800421e:	2b10      	cmp	r3, #16
 8004220:	d103      	bne.n	800422a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004228:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800422a:	887b      	ldrh	r3, [r7, #2]
 800422c:	2b20      	cmp	r3, #32
 800422e:	d103      	bne.n	8004238 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f043 0320 	orr.w	r3, r3, #32
 8004236:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004238:	887b      	ldrh	r3, [r7, #2]
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d103      	bne.n	8004246 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004244:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6819      	ldr	r1, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	43da      	mvns	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	400a      	ands	r2, r1
 8004256:	601a      	str	r2, [r3, #0]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b20      	cmp	r3, #32
 8004278:	d138      	bne.n	80042ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004284:	2302      	movs	r3, #2
 8004286:	e032      	b.n	80042ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2224      	movs	r2, #36	; 0x24
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0201 	bic.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6819      	ldr	r1, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0201 	orr.w	r2, r2, #1
 80042d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	e000      	b.n	80042ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042ec:	2302      	movs	r3, #2
  }
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b20      	cmp	r3, #32
 800430e:	d139      	bne.n	8004384 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800431a:	2302      	movs	r3, #2
 800431c:	e033      	b.n	8004386 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2224      	movs	r2, #36	; 0x24
 800432a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800434c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	021b      	lsls	r3, r3, #8
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	e000      	b.n	8004386 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004384:	2302      	movs	r3, #2
  }
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800439e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a2:	6013      	str	r3, [r2, #0]
}
 80043a4:	bf00      	nop
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40007000 	.word	0x40007000

080043b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <HAL_PWREx_GetVoltageRange+0x18>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40007000 	.word	0x40007000

080043d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043de:	d130      	bne.n	8004442 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043e0:	4b23      	ldr	r3, [pc, #140]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ec:	d038      	beq.n	8004460 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043ee:	4b20      	ldr	r3, [pc, #128]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043f6:	4a1e      	ldr	r2, [pc, #120]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043fe:	4b1d      	ldr	r3, [pc, #116]	; (8004474 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2232      	movs	r2, #50	; 0x32
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	4a1b      	ldr	r2, [pc, #108]	; (8004478 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	0c9b      	lsrs	r3, r3, #18
 8004410:	3301      	adds	r3, #1
 8004412:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004414:	e002      	b.n	800441c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3b01      	subs	r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800441c:	4b14      	ldr	r3, [pc, #80]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004428:	d102      	bne.n	8004430 <HAL_PWREx_ControlVoltageScaling+0x60>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f2      	bne.n	8004416 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004430:	4b0f      	ldr	r3, [pc, #60]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443c:	d110      	bne.n	8004460 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e00f      	b.n	8004462 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004442:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800444a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444e:	d007      	beq.n	8004460 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004458:	4a05      	ldr	r2, [pc, #20]	; (8004470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800445a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800445e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40007000 	.word	0x40007000
 8004474:	20000004 	.word	0x20000004
 8004478:	431bde83 	.word	0x431bde83

0800447c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d102      	bne.n	8004490 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	f000 bc11 	b.w	8004cb2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004490:	4ba0      	ldr	r3, [pc, #640]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 030c 	and.w	r3, r3, #12
 8004498:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800449a:	4b9e      	ldr	r3, [pc, #632]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80e4 	beq.w	800467a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d007      	beq.n	80044c8 <HAL_RCC_OscConfig+0x4c>
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b0c      	cmp	r3, #12
 80044bc:	f040 808b 	bne.w	80045d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	f040 8087 	bne.w	80045d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044c8:	4b92      	ldr	r3, [pc, #584]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_OscConfig+0x64>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e3e8      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1a      	ldr	r2, [r3, #32]
 80044e4:	4b8b      	ldr	r3, [pc, #556]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d004      	beq.n	80044fa <HAL_RCC_OscConfig+0x7e>
 80044f0:	4b88      	ldr	r3, [pc, #544]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f8:	e005      	b.n	8004506 <HAL_RCC_OscConfig+0x8a>
 80044fa:	4b86      	ldr	r3, [pc, #536]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80044fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004506:	4293      	cmp	r3, r2
 8004508:	d223      	bcs.n	8004552 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fdac 	bl	800506c <RCC_SetFlashLatencyFromMSIRange>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e3c9      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800451e:	4b7d      	ldr	r3, [pc, #500]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a7c      	ldr	r2, [pc, #496]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004524:	f043 0308 	orr.w	r3, r3, #8
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4b7a      	ldr	r3, [pc, #488]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	4977      	ldr	r1, [pc, #476]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004538:	4313      	orrs	r3, r2
 800453a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800453c:	4b75      	ldr	r3, [pc, #468]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	4972      	ldr	r1, [pc, #456]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800454c:	4313      	orrs	r3, r2
 800454e:	604b      	str	r3, [r1, #4]
 8004550:	e025      	b.n	800459e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004552:	4b70      	ldr	r3, [pc, #448]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a6f      	ldr	r2, [pc, #444]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004558:	f043 0308 	orr.w	r3, r3, #8
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b6d      	ldr	r3, [pc, #436]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	496a      	ldr	r1, [pc, #424]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800456c:	4313      	orrs	r3, r2
 800456e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004570:	4b68      	ldr	r3, [pc, #416]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	021b      	lsls	r3, r3, #8
 800457e:	4965      	ldr	r1, [pc, #404]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004580:	4313      	orrs	r3, r2
 8004582:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fd6c 	bl	800506c <RCC_SetFlashLatencyFromMSIRange>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e389      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800459e:	f000 fc6f 	bl	8004e80 <HAL_RCC_GetSysClockFreq>
 80045a2:	4602      	mov	r2, r0
 80045a4:	4b5b      	ldr	r3, [pc, #364]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	495a      	ldr	r1, [pc, #360]	; (8004718 <HAL_RCC_OscConfig+0x29c>)
 80045b0:	5ccb      	ldrb	r3, [r1, r3]
 80045b2:	f003 031f 	and.w	r3, r3, #31
 80045b6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ba:	4a58      	ldr	r2, [pc, #352]	; (800471c <HAL_RCC_OscConfig+0x2a0>)
 80045bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045be:	4b58      	ldr	r3, [pc, #352]	; (8004720 <HAL_RCC_OscConfig+0x2a4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fd fb54 	bl	8001c70 <HAL_InitTick>
 80045c8:	4603      	mov	r3, r0
 80045ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d052      	beq.n	8004678 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	e36d      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d032      	beq.n	8004644 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045de:	4b4d      	ldr	r3, [pc, #308]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a4c      	ldr	r2, [pc, #304]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045ea:	f7fd fd43 	bl	8002074 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045f2:	f7fd fd3f 	bl	8002074 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e356      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004604:	4b43      	ldr	r3, [pc, #268]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004610:	4b40      	ldr	r3, [pc, #256]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a3f      	ldr	r2, [pc, #252]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004616:	f043 0308 	orr.w	r3, r3, #8
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	4b3d      	ldr	r3, [pc, #244]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	493a      	ldr	r1, [pc, #232]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800462a:	4313      	orrs	r3, r2
 800462c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800462e:	4b39      	ldr	r3, [pc, #228]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	4935      	ldr	r1, [pc, #212]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]
 8004642:	e01a      	b.n	800467a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004644:	4b33      	ldr	r3, [pc, #204]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a32      	ldr	r2, [pc, #200]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800464a:	f023 0301 	bic.w	r3, r3, #1
 800464e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004650:	f7fd fd10 	bl	8002074 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004658:	f7fd fd0c 	bl	8002074 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e323      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800466a:	4b2a      	ldr	r3, [pc, #168]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x1dc>
 8004676:	e000      	b.n	800467a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004678:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d073      	beq.n	800476e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d005      	beq.n	8004698 <HAL_RCC_OscConfig+0x21c>
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b0c      	cmp	r3, #12
 8004690:	d10e      	bne.n	80046b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b03      	cmp	r3, #3
 8004696:	d10b      	bne.n	80046b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004698:	4b1e      	ldr	r3, [pc, #120]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d063      	beq.n	800476c <HAL_RCC_OscConfig+0x2f0>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d15f      	bne.n	800476c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e300      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b8:	d106      	bne.n	80046c8 <HAL_RCC_OscConfig+0x24c>
 80046ba:	4b16      	ldr	r3, [pc, #88]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a15      	ldr	r2, [pc, #84]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	e01d      	b.n	8004704 <HAL_RCC_OscConfig+0x288>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046d0:	d10c      	bne.n	80046ec <HAL_RCC_OscConfig+0x270>
 80046d2:	4b10      	ldr	r3, [pc, #64]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a0f      	ldr	r2, [pc, #60]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	4b0d      	ldr	r3, [pc, #52]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a0c      	ldr	r2, [pc, #48]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	e00b      	b.n	8004704 <HAL_RCC_OscConfig+0x288>
 80046ec:	4b09      	ldr	r3, [pc, #36]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a08      	ldr	r2, [pc, #32]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a05      	ldr	r2, [pc, #20]	; (8004714 <HAL_RCC_OscConfig+0x298>)
 80046fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01b      	beq.n	8004744 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fd fcb2 	bl	8002074 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004712:	e010      	b.n	8004736 <HAL_RCC_OscConfig+0x2ba>
 8004714:	40021000 	.word	0x40021000
 8004718:	0800e6c0 	.word	0x0800e6c0
 800471c:	20000004 	.word	0x20000004
 8004720:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004724:	f7fd fca6 	bl	8002074 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b64      	cmp	r3, #100	; 0x64
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e2bd      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004736:	4baf      	ldr	r3, [pc, #700]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0x2a8>
 8004742:	e014      	b.n	800476e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004744:	f7fd fc96 	bl	8002074 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800474c:	f7fd fc92 	bl	8002074 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	; 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e2a9      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800475e:	4ba5      	ldr	r3, [pc, #660]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x2d0>
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d060      	beq.n	800483c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b04      	cmp	r3, #4
 800477e:	d005      	beq.n	800478c <HAL_RCC_OscConfig+0x310>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b0c      	cmp	r3, #12
 8004784:	d119      	bne.n	80047ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d116      	bne.n	80047ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800478c:	4b99      	ldr	r3, [pc, #612]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_RCC_OscConfig+0x328>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e286      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a4:	4b93      	ldr	r3, [pc, #588]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	061b      	lsls	r3, r3, #24
 80047b2:	4990      	ldr	r1, [pc, #576]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047b8:	e040      	b.n	800483c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d023      	beq.n	800480a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c2:	4b8c      	ldr	r3, [pc, #560]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a8b      	ldr	r2, [pc, #556]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80047c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fd fc51 	bl	8002074 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047d4:	e008      	b.n	80047e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047d6:	f7fd fc4d 	bl	8002074 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e264      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047e8:	4b82      	ldr	r3, [pc, #520]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0f0      	beq.n	80047d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f4:	4b7f      	ldr	r3, [pc, #508]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	061b      	lsls	r3, r3, #24
 8004802:	497c      	ldr	r1, [pc, #496]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]
 8004808:	e018      	b.n	800483c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800480a:	4b7a      	ldr	r3, [pc, #488]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a79      	ldr	r2, [pc, #484]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004816:	f7fd fc2d 	bl	8002074 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800481e:	f7fd fc29 	bl	8002074 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e240      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004830:	4b70      	ldr	r3, [pc, #448]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f0      	bne.n	800481e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b00      	cmp	r3, #0
 8004846:	d03c      	beq.n	80048c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01c      	beq.n	800488a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004850:	4b68      	ldr	r3, [pc, #416]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004856:	4a67      	ldr	r2, [pc, #412]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004860:	f7fd fc08 	bl	8002074 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004868:	f7fd fc04 	bl	8002074 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e21b      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800487a:	4b5e      	ldr	r3, [pc, #376]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 800487c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0ef      	beq.n	8004868 <HAL_RCC_OscConfig+0x3ec>
 8004888:	e01b      	b.n	80048c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800488a:	4b5a      	ldr	r3, [pc, #360]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 800488c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004890:	4a58      	ldr	r2, [pc, #352]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489a:	f7fd fbeb 	bl	8002074 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a2:	f7fd fbe7 	bl	8002074 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e1fe      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048b4:	4b4f      	ldr	r3, [pc, #316]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80048b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1ef      	bne.n	80048a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80a6 	beq.w	8004a1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d0:	2300      	movs	r3, #0
 80048d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048d4:	4b47      	ldr	r3, [pc, #284]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10d      	bne.n	80048fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e0:	4b44      	ldr	r3, [pc, #272]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	4a43      	ldr	r2, [pc, #268]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80048e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ea:	6593      	str	r3, [r2, #88]	; 0x58
 80048ec:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80048ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f4:	60bb      	str	r3, [r7, #8]
 80048f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048f8:	2301      	movs	r3, #1
 80048fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048fc:	4b3e      	ldr	r3, [pc, #248]	; (80049f8 <HAL_RCC_OscConfig+0x57c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d118      	bne.n	800493a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004908:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <HAL_RCC_OscConfig+0x57c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a3a      	ldr	r2, [pc, #232]	; (80049f8 <HAL_RCC_OscConfig+0x57c>)
 800490e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004912:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004914:	f7fd fbae 	bl	8002074 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491c:	f7fd fbaa 	bl	8002074 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e1c1      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800492e:	4b32      	ldr	r3, [pc, #200]	; (80049f8 <HAL_RCC_OscConfig+0x57c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d108      	bne.n	8004954 <HAL_RCC_OscConfig+0x4d8>
 8004942:	4b2c      	ldr	r3, [pc, #176]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004948:	4a2a      	ldr	r2, [pc, #168]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 800494a:	f043 0301 	orr.w	r3, r3, #1
 800494e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004952:	e024      	b.n	800499e <HAL_RCC_OscConfig+0x522>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2b05      	cmp	r3, #5
 800495a:	d110      	bne.n	800497e <HAL_RCC_OscConfig+0x502>
 800495c:	4b25      	ldr	r3, [pc, #148]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004962:	4a24      	ldr	r2, [pc, #144]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004964:	f043 0304 	orr.w	r3, r3, #4
 8004968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800496c:	4b21      	ldr	r3, [pc, #132]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004972:	4a20      	ldr	r2, [pc, #128]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800497c:	e00f      	b.n	800499e <HAL_RCC_OscConfig+0x522>
 800497e:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004984:	4a1b      	ldr	r2, [pc, #108]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800498e:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004994:	4a17      	ldr	r2, [pc, #92]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 8004996:	f023 0304 	bic.w	r3, r3, #4
 800499a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d016      	beq.n	80049d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a6:	f7fd fb65 	bl	8002074 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ac:	e00a      	b.n	80049c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ae:	f7fd fb61 	bl	8002074 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049bc:	4293      	cmp	r3, r2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e176      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <HAL_RCC_OscConfig+0x578>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0ed      	beq.n	80049ae <HAL_RCC_OscConfig+0x532>
 80049d2:	e01a      	b.n	8004a0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d4:	f7fd fb4e 	bl	8002074 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049da:	e00f      	b.n	80049fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049dc:	f7fd fb4a 	bl	8002074 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d906      	bls.n	80049fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e15f      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
 80049f2:	bf00      	nop
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049fc:	4baa      	ldr	r3, [pc, #680]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e8      	bne.n	80049dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a0a:	7ffb      	ldrb	r3, [r7, #31]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d105      	bne.n	8004a1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a10:	4ba5      	ldr	r3, [pc, #660]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a14:	4aa4      	ldr	r2, [pc, #656]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d03c      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01c      	beq.n	8004a6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a30:	4b9d      	ldr	r3, [pc, #628]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a36:	4a9c      	ldr	r2, [pc, #624]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004a38:	f043 0301 	orr.w	r3, r3, #1
 8004a3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a40:	f7fd fb18 	bl	8002074 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a48:	f7fd fb14 	bl	8002074 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e12b      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a5a:	4b93      	ldr	r3, [pc, #588]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004a5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0ef      	beq.n	8004a48 <HAL_RCC_OscConfig+0x5cc>
 8004a68:	e01b      	b.n	8004aa2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a6a:	4b8f      	ldr	r3, [pc, #572]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a70:	4a8d      	ldr	r2, [pc, #564]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7a:	f7fd fafb 	bl	8002074 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a82:	f7fd faf7 	bl	8002074 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e10e      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004a94:	4b84      	ldr	r3, [pc, #528]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1ef      	bne.n	8004a82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8102 	beq.w	8004cb0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	f040 80c5 	bne.w	8004c40 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ab6:	4b7c      	ldr	r3, [pc, #496]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f003 0203 	and.w	r2, r3, #3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d12c      	bne.n	8004b24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d123      	bne.n	8004b24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d11b      	bne.n	8004b24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d113      	bne.n	8004b24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b06:	085b      	lsrs	r3, r3, #1
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d109      	bne.n	8004b24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	085b      	lsrs	r3, r3, #1
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d067      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	2b0c      	cmp	r3, #12
 8004b28:	d062      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b2a:	4b5f      	ldr	r3, [pc, #380]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e0bb      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b3a:	4b5b      	ldr	r3, [pc, #364]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a5a      	ldr	r2, [pc, #360]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004b40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b46:	f7fd fa95 	bl	8002074 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b4e:	f7fd fa91 	bl	8002074 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e0a8      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b60:	4b51      	ldr	r3, [pc, #324]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f0      	bne.n	8004b4e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b6c:	4b4e      	ldr	r3, [pc, #312]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	4b4e      	ldr	r3, [pc, #312]	; (8004cac <HAL_RCC_OscConfig+0x830>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b7c:	3a01      	subs	r2, #1
 8004b7e:	0112      	lsls	r2, r2, #4
 8004b80:	4311      	orrs	r1, r2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b86:	0212      	lsls	r2, r2, #8
 8004b88:	4311      	orrs	r1, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b8e:	0852      	lsrs	r2, r2, #1
 8004b90:	3a01      	subs	r2, #1
 8004b92:	0552      	lsls	r2, r2, #21
 8004b94:	4311      	orrs	r1, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b9a:	0852      	lsrs	r2, r2, #1
 8004b9c:	3a01      	subs	r2, #1
 8004b9e:	0652      	lsls	r2, r2, #25
 8004ba0:	4311      	orrs	r1, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ba6:	06d2      	lsls	r2, r2, #27
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	493f      	ldr	r1, [pc, #252]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bb0:	4b3d      	ldr	r3, [pc, #244]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a3c      	ldr	r2, [pc, #240]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bbc:	4b3a      	ldr	r3, [pc, #232]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4a39      	ldr	r2, [pc, #228]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bc8:	f7fd fa54 	bl	8002074 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fd fa50 	bl	8002074 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e067      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be2:	4b31      	ldr	r3, [pc, #196]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f0      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bee:	e05f      	b.n	8004cb0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e05e      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf4:	4b2c      	ldr	r3, [pc, #176]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d157      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c00:	4b29      	ldr	r3, [pc, #164]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a28      	ldr	r2, [pc, #160]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c0c:	4b26      	ldr	r3, [pc, #152]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4a25      	ldr	r2, [pc, #148]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c18:	f7fd fa2c 	bl	8002074 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c20:	f7fd fa28 	bl	8002074 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e03f      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c32:	4b1d      	ldr	r3, [pc, #116]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x7a4>
 8004c3e:	e037      	b.n	8004cb0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b0c      	cmp	r3, #12
 8004c44:	d02d      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c46:	4b18      	ldr	r3, [pc, #96]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004c4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c50:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c52:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d105      	bne.n	8004c6a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c5e:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	4a11      	ldr	r2, [pc, #68]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004c64:	f023 0303 	bic.w	r3, r3, #3
 8004c68:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004c6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004c70:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c78:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7a:	f7fd f9fb 	bl	8002074 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c82:	f7fd f9f7 	bl	8002074 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e00e      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c94:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <HAL_RCC_OscConfig+0x82c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f0      	bne.n	8004c82 <HAL_RCC_OscConfig+0x806>
 8004ca0:	e006      	b.n	8004cb0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e005      	b.n	8004cb2 <HAL_RCC_OscConfig+0x836>
 8004ca6:	bf00      	nop
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop

08004cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0c8      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cd0:	4b66      	ldr	r3, [pc, #408]	; (8004e6c <HAL_RCC_ClockConfig+0x1b0>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d910      	bls.n	8004d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cde:	4b63      	ldr	r3, [pc, #396]	; (8004e6c <HAL_RCC_ClockConfig+0x1b0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f023 0207 	bic.w	r2, r3, #7
 8004ce6:	4961      	ldr	r1, [pc, #388]	; (8004e6c <HAL_RCC_ClockConfig+0x1b0>)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cee:	4b5f      	ldr	r3, [pc, #380]	; (8004e6c <HAL_RCC_ClockConfig+0x1b0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0b0      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d04c      	beq.n	8004da6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d107      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d14:	4b56      	ldr	r3, [pc, #344]	; (8004e70 <HAL_RCC_ClockConfig+0x1b4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d121      	bne.n	8004d64 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e09e      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d107      	bne.n	8004d3c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d2c:	4b50      	ldr	r3, [pc, #320]	; (8004e70 <HAL_RCC_ClockConfig+0x1b4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d115      	bne.n	8004d64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e092      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d107      	bne.n	8004d54 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d44:	4b4a      	ldr	r3, [pc, #296]	; (8004e70 <HAL_RCC_ClockConfig+0x1b4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d109      	bne.n	8004d64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e086      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d54:	4b46      	ldr	r3, [pc, #280]	; (8004e70 <HAL_RCC_ClockConfig+0x1b4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e07e      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d64:	4b42      	ldr	r3, [pc, #264]	; (8004e70 <HAL_RCC_ClockConfig+0x1b4>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f023 0203 	bic.w	r2, r3, #3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	493f      	ldr	r1, [pc, #252]	; (8004e70 <HAL_RCC_ClockConfig+0x1b4>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d76:	f7fd f97d 	bl	8002074 <HAL_GetTick>
 8004d7a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7c:	e00a      	b.n	8004d94 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7e:	f7fd f979 	bl	8002074 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e066      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d94:	4b36      	ldr	r3, [pc, #216]	; (8004e70 <HAL_RCC_ClockConfig+0x1b4>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 020c 	and.w	r2, r3, #12
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d1eb      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d008      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db2:	4b2f      	ldr	r3, [pc, #188]	; (8004e70 <HAL_RCC_ClockConfig+0x1b4>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	492c      	ldr	r1, [pc, #176]	; (8004e70 <HAL_RCC_ClockConfig+0x1b4>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc4:	4b29      	ldr	r3, [pc, #164]	; (8004e6c <HAL_RCC_ClockConfig+0x1b0>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d210      	bcs.n	8004df4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd2:	4b26      	ldr	r3, [pc, #152]	; (8004e6c <HAL_RCC_ClockConfig+0x1b0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f023 0207 	bic.w	r2, r3, #7
 8004dda:	4924      	ldr	r1, [pc, #144]	; (8004e6c <HAL_RCC_ClockConfig+0x1b0>)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de2:	4b22      	ldr	r3, [pc, #136]	; (8004e6c <HAL_RCC_ClockConfig+0x1b0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e036      	b.n	8004e62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e00:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <HAL_RCC_ClockConfig+0x1b4>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	4918      	ldr	r1, [pc, #96]	; (8004e70 <HAL_RCC_ClockConfig+0x1b4>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e1e:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <HAL_RCC_ClockConfig+0x1b4>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4910      	ldr	r1, [pc, #64]	; (8004e70 <HAL_RCC_ClockConfig+0x1b4>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e32:	f000 f825 	bl	8004e80 <HAL_RCC_GetSysClockFreq>
 8004e36:	4602      	mov	r2, r0
 8004e38:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <HAL_RCC_ClockConfig+0x1b4>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	091b      	lsrs	r3, r3, #4
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	490c      	ldr	r1, [pc, #48]	; (8004e74 <HAL_RCC_ClockConfig+0x1b8>)
 8004e44:	5ccb      	ldrb	r3, [r1, r3]
 8004e46:	f003 031f 	and.w	r3, r3, #31
 8004e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <HAL_RCC_ClockConfig+0x1bc>)
 8004e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <HAL_RCC_ClockConfig+0x1c0>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fc ff0a 	bl	8001c70 <HAL_InitTick>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e60:	7afb      	ldrb	r3, [r7, #11]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40022000 	.word	0x40022000
 8004e70:	40021000 	.word	0x40021000
 8004e74:	0800e6c0 	.word	0x0800e6c0
 8004e78:	20000004 	.word	0x20000004
 8004e7c:	20000008 	.word	0x20000008

08004e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b089      	sub	sp, #36	; 0x24
 8004e84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e8e:	4b3e      	ldr	r3, [pc, #248]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 030c 	and.w	r3, r3, #12
 8004e96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e98:	4b3b      	ldr	r3, [pc, #236]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0303 	and.w	r3, r3, #3
 8004ea0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d005      	beq.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b0c      	cmp	r3, #12
 8004eac:	d121      	bne.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d11e      	bne.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004eb4:	4b34      	ldr	r3, [pc, #208]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0308 	and.w	r3, r3, #8
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d107      	bne.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ec0:	4b31      	ldr	r3, [pc, #196]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec6:	0a1b      	lsrs	r3, r3, #8
 8004ec8:	f003 030f 	and.w	r3, r3, #15
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	e005      	b.n	8004edc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ed0:	4b2d      	ldr	r3, [pc, #180]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004edc:	4a2b      	ldr	r2, [pc, #172]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10d      	bne.n	8004f08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ef0:	e00a      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d102      	bne.n	8004efe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ef8:	4b25      	ldr	r3, [pc, #148]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8004efa:	61bb      	str	r3, [r7, #24]
 8004efc:	e004      	b.n	8004f08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d101      	bne.n	8004f08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f04:	4b23      	ldr	r3, [pc, #140]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	2b0c      	cmp	r3, #12
 8004f0c:	d134      	bne.n	8004f78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f0e:	4b1e      	ldr	r3, [pc, #120]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d003      	beq.n	8004f26 <HAL_RCC_GetSysClockFreq+0xa6>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d003      	beq.n	8004f2c <HAL_RCC_GetSysClockFreq+0xac>
 8004f24:	e005      	b.n	8004f32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f26:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f28:	617b      	str	r3, [r7, #20]
      break;
 8004f2a:	e005      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f2c:	4b19      	ldr	r3, [pc, #100]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f2e:	617b      	str	r3, [r7, #20]
      break;
 8004f30:	e002      	b.n	8004f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	617b      	str	r3, [r7, #20]
      break;
 8004f36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	091b      	lsrs	r3, r3, #4
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	3301      	adds	r3, #1
 8004f44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	0a1b      	lsrs	r3, r3, #8
 8004f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	fb02 f203 	mul.w	r2, r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f5e:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	0e5b      	lsrs	r3, r3, #25
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	3301      	adds	r3, #1
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f78:	69bb      	ldr	r3, [r7, #24]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3724      	adds	r7, #36	; 0x24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	0800e6d8 	.word	0x0800e6d8
 8004f90:	00f42400 	.word	0x00f42400
 8004f94:	007a1200 	.word	0x007a1200

08004f98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f9c:	4b03      	ldr	r3, [pc, #12]	; (8004fac <HAL_RCC_GetHCLKFreq+0x14>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	20000004 	.word	0x20000004

08004fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fb4:	f7ff fff0 	bl	8004f98 <HAL_RCC_GetHCLKFreq>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	0a1b      	lsrs	r3, r3, #8
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	4904      	ldr	r1, [pc, #16]	; (8004fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fc6:	5ccb      	ldrb	r3, [r1, r3]
 8004fc8:	f003 031f 	and.w	r3, r3, #31
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	0800e6d0 	.word	0x0800e6d0

08004fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fe0:	f7ff ffda 	bl	8004f98 <HAL_RCC_GetHCLKFreq>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	0adb      	lsrs	r3, r3, #11
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	4904      	ldr	r1, [pc, #16]	; (8005004 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ff2:	5ccb      	ldrb	r3, [r1, r3]
 8004ff4:	f003 031f 	and.w	r3, r3, #31
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40021000 	.word	0x40021000
 8005004:	0800e6d0 	.word	0x0800e6d0

08005008 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	220f      	movs	r2, #15
 8005016:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005018:	4b12      	ldr	r3, [pc, #72]	; (8005064 <HAL_RCC_GetClockConfig+0x5c>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0203 	and.w	r2, r3, #3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005024:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <HAL_RCC_GetClockConfig+0x5c>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005030:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <HAL_RCC_GetClockConfig+0x5c>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800503c:	4b09      	ldr	r3, [pc, #36]	; (8005064 <HAL_RCC_GetClockConfig+0x5c>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	08db      	lsrs	r3, r3, #3
 8005042:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800504a:	4b07      	ldr	r3, [pc, #28]	; (8005068 <HAL_RCC_GetClockConfig+0x60>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0207 	and.w	r2, r3, #7
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	601a      	str	r2, [r3, #0]
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40021000 	.word	0x40021000
 8005068:	40022000 	.word	0x40022000

0800506c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005074:	2300      	movs	r3, #0
 8005076:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005078:	4b2a      	ldr	r3, [pc, #168]	; (8005124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005084:	f7ff f996 	bl	80043b4 <HAL_PWREx_GetVoltageRange>
 8005088:	6178      	str	r0, [r7, #20]
 800508a:	e014      	b.n	80050b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800508c:	4b25      	ldr	r3, [pc, #148]	; (8005124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800508e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005090:	4a24      	ldr	r2, [pc, #144]	; (8005124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005096:	6593      	str	r3, [r2, #88]	; 0x58
 8005098:	4b22      	ldr	r3, [pc, #136]	; (8005124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800509a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800509c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050a4:	f7ff f986 	bl	80043b4 <HAL_PWREx_GetVoltageRange>
 80050a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050aa:	4b1e      	ldr	r3, [pc, #120]	; (8005124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ae:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050bc:	d10b      	bne.n	80050d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b80      	cmp	r3, #128	; 0x80
 80050c2:	d919      	bls.n	80050f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2ba0      	cmp	r3, #160	; 0xa0
 80050c8:	d902      	bls.n	80050d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050ca:	2302      	movs	r3, #2
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	e013      	b.n	80050f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050d0:	2301      	movs	r3, #1
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	e010      	b.n	80050f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b80      	cmp	r3, #128	; 0x80
 80050da:	d902      	bls.n	80050e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050dc:	2303      	movs	r3, #3
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	e00a      	b.n	80050f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b80      	cmp	r3, #128	; 0x80
 80050e6:	d102      	bne.n	80050ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050e8:	2302      	movs	r3, #2
 80050ea:	613b      	str	r3, [r7, #16]
 80050ec:	e004      	b.n	80050f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b70      	cmp	r3, #112	; 0x70
 80050f2:	d101      	bne.n	80050f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050f4:	2301      	movs	r3, #1
 80050f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050f8:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f023 0207 	bic.w	r2, r3, #7
 8005100:	4909      	ldr	r1, [pc, #36]	; (8005128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005108:	4b07      	ldr	r3, [pc, #28]	; (8005128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	429a      	cmp	r2, r3
 8005114:	d001      	beq.n	800511a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40021000 	.word	0x40021000
 8005128:	40022000 	.word	0x40022000

0800512c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005134:	2300      	movs	r3, #0
 8005136:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005138:	2300      	movs	r3, #0
 800513a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005144:	2b00      	cmp	r3, #0
 8005146:	d031      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005150:	d01a      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005152:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005156:	d814      	bhi.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d009      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800515c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005160:	d10f      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005162:	4bac      	ldr	r3, [pc, #688]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	4aab      	ldr	r2, [pc, #684]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800516e:	e00c      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3304      	adds	r3, #4
 8005174:	2100      	movs	r1, #0
 8005176:	4618      	mov	r0, r3
 8005178:	f000 f9dc 	bl	8005534 <RCCEx_PLLSAI1_Config>
 800517c:	4603      	mov	r3, r0
 800517e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005180:	e003      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	74fb      	strb	r3, [r7, #19]
      break;
 8005186:	e000      	b.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800518a:	7cfb      	ldrb	r3, [r7, #19]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005190:	4ba0      	ldr	r3, [pc, #640]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005196:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519e:	499d      	ldr	r1, [pc, #628]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051a6:	e001      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a8:	7cfb      	ldrb	r3, [r7, #19]
 80051aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8099 	beq.w	80052ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ba:	2300      	movs	r3, #0
 80051bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051be:	4b95      	ldr	r3, [pc, #596]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80051ce:	2300      	movs	r3, #0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00d      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d4:	4b8f      	ldr	r3, [pc, #572]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d8:	4a8e      	ldr	r2, [pc, #568]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051de:	6593      	str	r3, [r2, #88]	; 0x58
 80051e0:	4b8c      	ldr	r3, [pc, #560]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ec:	2301      	movs	r3, #1
 80051ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051f0:	4b89      	ldr	r3, [pc, #548]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a88      	ldr	r2, [pc, #544]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80051f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051fc:	f7fc ff3a 	bl	8002074 <HAL_GetTick>
 8005200:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005202:	e009      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005204:	f7fc ff36 	bl	8002074 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d902      	bls.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	74fb      	strb	r3, [r7, #19]
        break;
 8005216:	e005      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005218:	4b7f      	ldr	r3, [pc, #508]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0ef      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005224:	7cfb      	ldrb	r3, [r7, #19]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d155      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800522a:	4b7a      	ldr	r3, [pc, #488]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800522c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005234:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01e      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	429a      	cmp	r2, r3
 8005244:	d019      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005246:	4b73      	ldr	r3, [pc, #460]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005250:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005252:	4b70      	ldr	r3, [pc, #448]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005258:	4a6e      	ldr	r2, [pc, #440]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800525a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800525e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005262:	4b6c      	ldr	r3, [pc, #432]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005268:	4a6a      	ldr	r2, [pc, #424]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800526a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800526e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005272:	4a68      	ldr	r2, [pc, #416]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	d016      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fc fef6 	bl	8002074 <HAL_GetTick>
 8005288:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800528a:	e00b      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800528c:	f7fc fef2 	bl	8002074 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	f241 3288 	movw	r2, #5000	; 0x1388
 800529a:	4293      	cmp	r3, r2
 800529c:	d902      	bls.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	74fb      	strb	r3, [r7, #19]
            break;
 80052a2:	e006      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a4:	4b5b      	ldr	r3, [pc, #364]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0ec      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80052b2:	7cfb      	ldrb	r3, [r7, #19]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10b      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052b8:	4b56      	ldr	r3, [pc, #344]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c6:	4953      	ldr	r1, [pc, #332]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052ce:	e004      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052d0:	7cfb      	ldrb	r3, [r7, #19]
 80052d2:	74bb      	strb	r3, [r7, #18]
 80052d4:	e001      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d6:	7cfb      	ldrb	r3, [r7, #19]
 80052d8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052da:	7c7b      	ldrb	r3, [r7, #17]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d105      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052e0:	4b4c      	ldr	r3, [pc, #304]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e4:	4a4b      	ldr	r2, [pc, #300]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052f8:	4b46      	ldr	r3, [pc, #280]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fe:	f023 0203 	bic.w	r2, r3, #3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	4943      	ldr	r1, [pc, #268]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800531a:	4b3e      	ldr	r3, [pc, #248]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	f023 020c 	bic.w	r2, r3, #12
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	493a      	ldr	r1, [pc, #232]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800533c:	4b35      	ldr	r3, [pc, #212]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005342:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	4932      	ldr	r1, [pc, #200]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800535e:	4b2d      	ldr	r3, [pc, #180]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536c:	4929      	ldr	r1, [pc, #164]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005380:	4b24      	ldr	r3, [pc, #144]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005386:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	4921      	ldr	r1, [pc, #132]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053a2:	4b1c      	ldr	r3, [pc, #112]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	4918      	ldr	r1, [pc, #96]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053c4:	4b13      	ldr	r3, [pc, #76]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	4910      	ldr	r1, [pc, #64]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d02c      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053e6:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	4907      	ldr	r1, [pc, #28]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005404:	d10a      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005406:	4b03      	ldr	r3, [pc, #12]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	4a02      	ldr	r2, [pc, #8]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800540c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005410:	60d3      	str	r3, [r2, #12]
 8005412:	e015      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005414:	40021000 	.word	0x40021000
 8005418:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005424:	d10c      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3304      	adds	r3, #4
 800542a:	2101      	movs	r1, #1
 800542c:	4618      	mov	r0, r3
 800542e:	f000 f881 	bl	8005534 <RCCEx_PLLSAI1_Config>
 8005432:	4603      	mov	r3, r0
 8005434:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005436:	7cfb      	ldrb	r3, [r7, #19]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800543c:	7cfb      	ldrb	r3, [r7, #19]
 800543e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d028      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800544c:	4b30      	ldr	r3, [pc, #192]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005452:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	492d      	ldr	r1, [pc, #180]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005466:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800546a:	d106      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800546c:	4b28      	ldr	r3, [pc, #160]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	4a27      	ldr	r2, [pc, #156]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005476:	60d3      	str	r3, [r2, #12]
 8005478:	e011      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005482:	d10c      	bne.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3304      	adds	r3, #4
 8005488:	2101      	movs	r1, #1
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f852 	bl	8005534 <RCCEx_PLLSAI1_Config>
 8005490:	4603      	mov	r3, r0
 8005492:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005494:	7cfb      	ldrb	r3, [r7, #19]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800549a:	7cfb      	ldrb	r3, [r7, #19]
 800549c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d01c      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054aa:	4b19      	ldr	r3, [pc, #100]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b8:	4915      	ldr	r1, [pc, #84]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054c8:	d10c      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3304      	adds	r3, #4
 80054ce:	2102      	movs	r1, #2
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 f82f 	bl	8005534 <RCCEx_PLLSAI1_Config>
 80054d6:	4603      	mov	r3, r0
 80054d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054da:	7cfb      	ldrb	r3, [r7, #19]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80054e0:	7cfb      	ldrb	r3, [r7, #19]
 80054e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054f0:	4b07      	ldr	r3, [pc, #28]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fe:	4904      	ldr	r1, [pc, #16]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005506:	7cbb      	ldrb	r3, [r7, #18]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	40021000 	.word	0x40021000

08005514 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005518:	4b05      	ldr	r3, [pc, #20]	; (8005530 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a04      	ldr	r2, [pc, #16]	; (8005530 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800551e:	f043 0304 	orr.w	r3, r3, #4
 8005522:	6013      	str	r3, [r2, #0]
}
 8005524:	bf00      	nop
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40021000 	.word	0x40021000

08005534 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005542:	4b74      	ldr	r3, [pc, #464]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d018      	beq.n	8005580 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800554e:	4b71      	ldr	r3, [pc, #452]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0203 	and.w	r2, r3, #3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d10d      	bne.n	800557a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
       ||
 8005562:	2b00      	cmp	r3, #0
 8005564:	d009      	beq.n	800557a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005566:	4b6b      	ldr	r3, [pc, #428]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	091b      	lsrs	r3, r3, #4
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
       ||
 8005576:	429a      	cmp	r2, r3
 8005578:	d047      	beq.n	800560a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	73fb      	strb	r3, [r7, #15]
 800557e:	e044      	b.n	800560a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b03      	cmp	r3, #3
 8005586:	d018      	beq.n	80055ba <RCCEx_PLLSAI1_Config+0x86>
 8005588:	2b03      	cmp	r3, #3
 800558a:	d825      	bhi.n	80055d8 <RCCEx_PLLSAI1_Config+0xa4>
 800558c:	2b01      	cmp	r3, #1
 800558e:	d002      	beq.n	8005596 <RCCEx_PLLSAI1_Config+0x62>
 8005590:	2b02      	cmp	r3, #2
 8005592:	d009      	beq.n	80055a8 <RCCEx_PLLSAI1_Config+0x74>
 8005594:	e020      	b.n	80055d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005596:	4b5f      	ldr	r3, [pc, #380]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d11d      	bne.n	80055de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055a6:	e01a      	b.n	80055de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055a8:	4b5a      	ldr	r3, [pc, #360]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d116      	bne.n	80055e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055b8:	e013      	b.n	80055e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055ba:	4b56      	ldr	r3, [pc, #344]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10f      	bne.n	80055e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055c6:	4b53      	ldr	r3, [pc, #332]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055d6:	e006      	b.n	80055e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	73fb      	strb	r3, [r7, #15]
      break;
 80055dc:	e004      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055de:	bf00      	nop
 80055e0:	e002      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055e2:	bf00      	nop
 80055e4:	e000      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10d      	bne.n	800560a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055ee:	4b49      	ldr	r3, [pc, #292]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6819      	ldr	r1, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	3b01      	subs	r3, #1
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	430b      	orrs	r3, r1
 8005604:	4943      	ldr	r1, [pc, #268]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005606:	4313      	orrs	r3, r2
 8005608:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d17c      	bne.n	800570a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005610:	4b40      	ldr	r3, [pc, #256]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a3f      	ldr	r2, [pc, #252]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005616:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800561a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561c:	f7fc fd2a 	bl	8002074 <HAL_GetTick>
 8005620:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005622:	e009      	b.n	8005638 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005624:	f7fc fd26 	bl	8002074 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d902      	bls.n	8005638 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	73fb      	strb	r3, [r7, #15]
        break;
 8005636:	e005      	b.n	8005644 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005638:	4b36      	ldr	r3, [pc, #216]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1ef      	bne.n	8005624 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d15f      	bne.n	800570a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d110      	bne.n	8005672 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005650:	4b30      	ldr	r3, [pc, #192]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005658:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6892      	ldr	r2, [r2, #8]
 8005660:	0211      	lsls	r1, r2, #8
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	68d2      	ldr	r2, [r2, #12]
 8005666:	06d2      	lsls	r2, r2, #27
 8005668:	430a      	orrs	r2, r1
 800566a:	492a      	ldr	r1, [pc, #168]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 800566c:	4313      	orrs	r3, r2
 800566e:	610b      	str	r3, [r1, #16]
 8005670:	e027      	b.n	80056c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d112      	bne.n	800569e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005678:	4b26      	ldr	r3, [pc, #152]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005680:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6892      	ldr	r2, [r2, #8]
 8005688:	0211      	lsls	r1, r2, #8
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6912      	ldr	r2, [r2, #16]
 800568e:	0852      	lsrs	r2, r2, #1
 8005690:	3a01      	subs	r2, #1
 8005692:	0552      	lsls	r2, r2, #21
 8005694:	430a      	orrs	r2, r1
 8005696:	491f      	ldr	r1, [pc, #124]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005698:	4313      	orrs	r3, r2
 800569a:	610b      	str	r3, [r1, #16]
 800569c:	e011      	b.n	80056c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800569e:	4b1d      	ldr	r3, [pc, #116]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6892      	ldr	r2, [r2, #8]
 80056ae:	0211      	lsls	r1, r2, #8
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6952      	ldr	r2, [r2, #20]
 80056b4:	0852      	lsrs	r2, r2, #1
 80056b6:	3a01      	subs	r2, #1
 80056b8:	0652      	lsls	r2, r2, #25
 80056ba:	430a      	orrs	r2, r1
 80056bc:	4915      	ldr	r1, [pc, #84]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056c2:	4b14      	ldr	r3, [pc, #80]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a13      	ldr	r2, [pc, #76]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ce:	f7fc fcd1 	bl	8002074 <HAL_GetTick>
 80056d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056d4:	e009      	b.n	80056ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056d6:	f7fc fccd 	bl	8002074 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d902      	bls.n	80056ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	73fb      	strb	r3, [r7, #15]
          break;
 80056e8:	e005      	b.n	80056f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056ea:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0ef      	beq.n	80056d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d106      	bne.n	800570a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056fc:	4b05      	ldr	r3, [pc, #20]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	4903      	ldr	r1, [pc, #12]	; (8005714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005706:	4313      	orrs	r3, r2
 8005708:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800570a:	7bfb      	ldrb	r3, [r7, #15]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40021000 	.word	0x40021000

08005718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e049      	b.n	80057be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f841 	bl	80057c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3304      	adds	r3, #4
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f000 f9dc 	bl	8005b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d001      	beq.n	80057f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e03b      	b.n	800586c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a19      	ldr	r2, [pc, #100]	; (8005878 <HAL_TIM_Base_Start_IT+0x9c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_TIM_Base_Start_IT+0x4e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581e:	d004      	beq.n	800582a <HAL_TIM_Base_Start_IT+0x4e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a15      	ldr	r2, [pc, #84]	; (800587c <HAL_TIM_Base_Start_IT+0xa0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d115      	bne.n	8005856 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	4b13      	ldr	r3, [pc, #76]	; (8005880 <HAL_TIM_Base_Start_IT+0xa4>)
 8005832:	4013      	ands	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b06      	cmp	r3, #6
 800583a:	d015      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x8c>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005842:	d011      	beq.n	8005868 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005854:	e008      	b.n	8005868 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0201 	orr.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	e000      	b.n	800586a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005868:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	40012c00 	.word	0x40012c00
 800587c:	40014000 	.word	0x40014000
 8005880:	00010007 	.word	0x00010007

08005884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b02      	cmp	r3, #2
 8005898:	d122      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d11b      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0202 	mvn.w	r2, #2
 80058b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f905 	bl	8005ad6 <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f8f7 	bl	8005ac2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f908 	bl	8005aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d122      	bne.n	8005934 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d11b      	bne.n	8005934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0204 	mvn.w	r2, #4
 8005904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2202      	movs	r2, #2
 800590a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f8db 	bl	8005ad6 <HAL_TIM_IC_CaptureCallback>
 8005920:	e005      	b.n	800592e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f8cd 	bl	8005ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f8de 	bl	8005aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b08      	cmp	r3, #8
 8005940:	d122      	bne.n	8005988 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	2b08      	cmp	r3, #8
 800594e:	d11b      	bne.n	8005988 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0208 	mvn.w	r2, #8
 8005958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2204      	movs	r2, #4
 800595e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f8b1 	bl	8005ad6 <HAL_TIM_IC_CaptureCallback>
 8005974:	e005      	b.n	8005982 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f8a3 	bl	8005ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f8b4 	bl	8005aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0310 	and.w	r3, r3, #16
 8005992:	2b10      	cmp	r3, #16
 8005994:	d122      	bne.n	80059dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0310 	and.w	r3, r3, #16
 80059a0:	2b10      	cmp	r3, #16
 80059a2:	d11b      	bne.n	80059dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0210 	mvn.w	r2, #16
 80059ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2208      	movs	r2, #8
 80059b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f887 	bl	8005ad6 <HAL_TIM_IC_CaptureCallback>
 80059c8:	e005      	b.n	80059d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f879 	bl	8005ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f88a 	bl	8005aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d10e      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d107      	bne.n	8005a08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0201 	mvn.w	r2, #1
 8005a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fb ff92 	bl	800192c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a12:	2b80      	cmp	r3, #128	; 0x80
 8005a14:	d10e      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a20:	2b80      	cmp	r3, #128	; 0x80
 8005a22:	d107      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f8de 	bl	8005bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a42:	d10e      	bne.n	8005a62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4e:	2b80      	cmp	r3, #128	; 0x80
 8005a50:	d107      	bne.n	8005a62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f8d1 	bl	8005c04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6c:	2b40      	cmp	r3, #64	; 0x40
 8005a6e:	d10e      	bne.n	8005a8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a7a:	2b40      	cmp	r3, #64	; 0x40
 8005a7c:	d107      	bne.n	8005a8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f838 	bl	8005afe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	d10e      	bne.n	8005aba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f003 0320 	and.w	r3, r3, #32
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d107      	bne.n	8005aba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f06f 0220 	mvn.w	r2, #32
 8005ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f891 	bl	8005bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005aba:	bf00      	nop
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a2a      	ldr	r2, [pc, #168]	; (8005bd0 <TIM_Base_SetConfig+0xbc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_Base_SetConfig+0x20>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b32:	d108      	bne.n	8005b46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a21      	ldr	r2, [pc, #132]	; (8005bd0 <TIM_Base_SetConfig+0xbc>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00b      	beq.n	8005b66 <TIM_Base_SetConfig+0x52>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b54:	d007      	beq.n	8005b66 <TIM_Base_SetConfig+0x52>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a1e      	ldr	r2, [pc, #120]	; (8005bd4 <TIM_Base_SetConfig+0xc0>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d003      	beq.n	8005b66 <TIM_Base_SetConfig+0x52>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a1d      	ldr	r2, [pc, #116]	; (8005bd8 <TIM_Base_SetConfig+0xc4>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d108      	bne.n	8005b78 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a0c      	ldr	r2, [pc, #48]	; (8005bd0 <TIM_Base_SetConfig+0xbc>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d007      	beq.n	8005bb4 <TIM_Base_SetConfig+0xa0>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a0b      	ldr	r2, [pc, #44]	; (8005bd4 <TIM_Base_SetConfig+0xc0>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_Base_SetConfig+0xa0>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a0a      	ldr	r2, [pc, #40]	; (8005bd8 <TIM_Base_SetConfig+0xc4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d103      	bne.n	8005bbc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	615a      	str	r2, [r3, #20]
}
 8005bc2:	bf00      	nop
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40012c00 	.word	0x40012c00
 8005bd4:	40014000 	.word	0x40014000
 8005bd8:	40014400 	.word	0x40014400

08005bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e040      	b.n	8005cac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fb ff2e 	bl	8001a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2224      	movs	r2, #36	; 0x24
 8005c44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0201 	bic.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fbb8 	bl	80063cc <UART_SetConfig>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e022      	b.n	8005cac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fdb8 	bl	80067e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0201 	orr.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fe3f 	bl	8006928 <UART_CheckIdleState>
 8005caa:	4603      	mov	r3, r0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b08a      	sub	sp, #40	; 0x28
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	603b      	str	r3, [r7, #0]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	f040 8082 	bne.w	8005dd2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <HAL_UART_Transmit+0x26>
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e07a      	b.n	8005dd4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_UART_Transmit+0x38>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e073      	b.n	8005dd4 <HAL_UART_Transmit+0x120>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2221      	movs	r2, #33	; 0x21
 8005d00:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d02:	f7fc f9b7 	bl	8002074 <HAL_GetTick>
 8005d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	88fa      	ldrh	r2, [r7, #6]
 8005d0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	88fa      	ldrh	r2, [r7, #6]
 8005d14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d20:	d108      	bne.n	8005d34 <HAL_UART_Transmit+0x80>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d104      	bne.n	8005d34 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	e003      	b.n	8005d3c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005d44:	e02d      	b.n	8005da2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2180      	movs	r1, #128	; 0x80
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fe32 	bl	80069ba <UART_WaitOnFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e039      	b.n	8005dd4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10b      	bne.n	8005d7e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	881a      	ldrh	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d72:	b292      	uxth	r2, r2
 8005d74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	3302      	adds	r3, #2
 8005d7a:	61bb      	str	r3, [r7, #24]
 8005d7c:	e008      	b.n	8005d90 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	781a      	ldrb	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	b292      	uxth	r2, r2
 8005d88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1cb      	bne.n	8005d46 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2200      	movs	r2, #0
 8005db6:	2140      	movs	r1, #64	; 0x40
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 fdfe 	bl	80069ba <UART_WaitOnFlagUntilTimeout>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e005      	b.n	8005dd4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	e000      	b.n	8005dd4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005dd2:	2302      	movs	r3, #2
  }
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3720      	adds	r7, #32
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	4613      	mov	r3, r2
 8005de8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dee:	2b20      	cmp	r3, #32
 8005df0:	d166      	bne.n	8005ec0 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <HAL_UART_Transmit_DMA+0x22>
 8005df8:	88fb      	ldrh	r3, [r7, #6]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e05f      	b.n	8005ec2 <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_UART_Transmit_DMA+0x34>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e058      	b.n	8005ec2 <HAL_UART_Transmit_DMA+0xe6>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	88fa      	ldrh	r2, [r7, #6]
 8005e22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	88fa      	ldrh	r2, [r7, #6]
 8005e2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2221      	movs	r2, #33	; 0x21
 8005e3a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d02b      	beq.n	8005e9c <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e48:	4a20      	ldr	r2, [pc, #128]	; (8005ecc <HAL_UART_Transmit_DMA+0xf0>)
 8005e4a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e50:	4a1f      	ldr	r2, [pc, #124]	; (8005ed0 <HAL_UART_Transmit_DMA+0xf4>)
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e58:	4a1e      	ldr	r2, [pc, #120]	; (8005ed4 <HAL_UART_Transmit_DMA+0xf8>)
 8005e5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e60:	2200      	movs	r2, #0
 8005e62:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3328      	adds	r3, #40	; 0x28
 8005e74:	461a      	mov	r2, r3
 8005e76:	88fb      	ldrh	r3, [r7, #6]
 8005e78:	f7fc fac6 	bl	8002408 <HAL_DMA_Start_IT>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00c      	beq.n	8005e9c <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2210      	movs	r2, #16
 8005e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2220      	movs	r2, #32
 8005e96:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e012      	b.n	8005ec2 <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2240      	movs	r2, #64	; 0x40
 8005ea2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005eba:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e000      	b.n	8005ec2 <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8005ec0:	2302      	movs	r3, #2
  }
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	08006c15 	.word	0x08006c15
 8005ed0:	08006c69 	.word	0x08006c69
 8005ed4:	08006d55 	.word	0x08006d55

08005ed8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	d131      	bne.n	8005f52 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <HAL_UART_Receive_DMA+0x22>
 8005ef4:	88fb      	ldrh	r3, [r7, #6]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e02a      	b.n	8005f54 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_UART_Receive_DMA+0x34>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e023      	b.n	8005f54 <HAL_UART_Receive_DMA+0x7c>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a0f      	ldr	r2, [pc, #60]	; (8005f5c <HAL_UART_Receive_DMA+0x84>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00e      	beq.n	8005f42 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d007      	beq.n	8005f42 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005f40:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005f42:	88fb      	ldrh	r3, [r7, #6]
 8005f44:	461a      	mov	r2, r3
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 fdb3 	bl	8006ab4 <UART_Start_Receive_DMA>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	e000      	b.n	8005f54 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8005f52:	2302      	movs	r3, #2
  }
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	40008000 	.word	0x40008000

08005f60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005f80:	69fa      	ldr	r2, [r7, #28]
 8005f82:	f640 030f 	movw	r3, #2063	; 0x80f
 8005f86:	4013      	ands	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d113      	bne.n	8005fb8 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00e      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d009      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 81ce 	beq.w	800634a <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	4798      	blx	r3
      }
      return;
 8005fb6:	e1c8      	b.n	800634a <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 80e3 	beq.w	8006186 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d105      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	4ba6      	ldr	r3, [pc, #664]	; (8006268 <HAL_UART_IRQHandler+0x308>)
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 80d8 	beq.w	8006186 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d010      	beq.n	8006002 <HAL_UART_IRQHandler+0xa2>
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00b      	beq.n	8006002 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ff8:	f043 0201 	orr.w	r2, r3, #1
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d010      	beq.n	800602e <HAL_UART_IRQHandler+0xce>
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00b      	beq.n	800602e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2202      	movs	r2, #2
 800601c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006024:	f043 0204 	orr.w	r2, r3, #4
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	2b00      	cmp	r3, #0
 8006036:	d010      	beq.n	800605a <HAL_UART_IRQHandler+0xfa>
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00b      	beq.n	800605a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2204      	movs	r2, #4
 8006048:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006050:	f043 0202 	orr.w	r2, r3, #2
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b00      	cmp	r3, #0
 8006062:	d015      	beq.n	8006090 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b00      	cmp	r3, #0
 800606c:	d104      	bne.n	8006078 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2208      	movs	r2, #8
 800607e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006086:	f043 0208 	orr.w	r2, r3, #8
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006096:	2b00      	cmp	r3, #0
 8006098:	d011      	beq.n	80060be <HAL_UART_IRQHandler+0x15e>
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00c      	beq.n	80060be <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060b4:	f043 0220 	orr.w	r2, r3, #32
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8142 	beq.w	800634e <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00c      	beq.n	80060ee <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060f4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d004      	beq.n	800610e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800610a:	2b00      	cmp	r3, #0
 800610c:	d031      	beq.n	8006172 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fd51 	bl	8006bb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611e:	2b40      	cmp	r3, #64	; 0x40
 8006120:	d123      	bne.n	800616a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006130:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006136:	2b00      	cmp	r3, #0
 8006138:	d013      	beq.n	8006162 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613e:	4a4b      	ldr	r2, [pc, #300]	; (800626c <HAL_UART_IRQHandler+0x30c>)
 8006140:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	4618      	mov	r0, r3
 8006148:	f7fc f9fc 	bl	8002544 <HAL_DMA_Abort_IT>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d017      	beq.n	8006182 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800615c:	4610      	mov	r0, r2
 800615e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006160:	e00f      	b.n	8006182 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f91c 	bl	80063a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006168:	e00b      	b.n	8006182 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f918 	bl	80063a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006170:	e007      	b.n	8006182 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f914 	bl	80063a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006180:	e0e5      	b.n	800634e <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006182:	bf00      	nop
    return;
 8006184:	e0e3      	b.n	800634e <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800618a:	2b01      	cmp	r3, #1
 800618c:	f040 80a9 	bne.w	80062e2 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	f003 0310 	and.w	r3, r3, #16
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 80a3 	beq.w	80062e2 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	f003 0310 	and.w	r3, r3, #16
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 809d 	beq.w	80062e2 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2210      	movs	r2, #16
 80061ae:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ba:	2b40      	cmp	r3, #64	; 0x40
 80061bc:	d158      	bne.n	8006270 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80061c8:	893b      	ldrh	r3, [r7, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 80c1 	beq.w	8006352 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061d6:	893a      	ldrh	r2, [r7, #8]
 80061d8:	429a      	cmp	r2, r3
 80061da:	f080 80ba 	bcs.w	8006352 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	893a      	ldrh	r2, [r7, #8]
 80061e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d12a      	bne.n	800624c <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006204:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0201 	bic.w	r2, r2, #1
 8006214:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006224:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0210 	bic.w	r2, r2, #16
 8006240:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	4618      	mov	r0, r3
 8006248:	f7fc f93e 	bl	80024c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006258:	b29b      	uxth	r3, r3
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	b29b      	uxth	r3, r3
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f8a7 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006266:	e074      	b.n	8006352 <HAL_UART_IRQHandler+0x3f2>
 8006268:	04000120 	.word	0x04000120
 800626c:	08006dd1 	.word	0x08006dd1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800627c:	b29b      	uxth	r3, r3
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d063      	beq.n	8006356 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 800628e:	897b      	ldrh	r3, [r7, #10]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d060      	beq.n	8006356 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062a2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0201 	bic.w	r2, r2, #1
 80062b2:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0210 	bic.w	r2, r2, #16
 80062d4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062d6:	897b      	ldrh	r3, [r7, #10]
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f86a 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80062e0:	e039      	b.n	8006356 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00d      	beq.n	8006308 <HAL_UART_IRQHandler+0x3a8>
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d008      	beq.n	8006308 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80062fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fd94 	bl	8006e2e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006306:	e029      	b.n	800635c <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00d      	beq.n	800632e <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01a      	beq.n	800635a <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	4798      	blx	r3
    }
    return;
 800632c:	e015      	b.n	800635a <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	d011      	beq.n	800635c <HAL_UART_IRQHandler+0x3fc>
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00c      	beq.n	800635c <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fd5a 	bl	8006dfc <UART_EndTransmit_IT>
    return;
 8006348:	e008      	b.n	800635c <HAL_UART_IRQHandler+0x3fc>
      return;
 800634a:	bf00      	nop
 800634c:	e006      	b.n	800635c <HAL_UART_IRQHandler+0x3fc>
    return;
 800634e:	bf00      	nop
 8006350:	e004      	b.n	800635c <HAL_UART_IRQHandler+0x3fc>
      return;
 8006352:	bf00      	nop
 8006354:	e002      	b.n	800635c <HAL_UART_IRQHandler+0x3fc>
      return;
 8006356:	bf00      	nop
 8006358:	e000      	b.n	800635c <HAL_UART_IRQHandler+0x3fc>
    return;
 800635a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop

08006364 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063cc:	b5b0      	push	{r4, r5, r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	4baf      	ldr	r3, [pc, #700]	; (80066b4 <UART_SetConfig+0x2e8>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6812      	ldr	r2, [r2, #0]
 80063fe:	69f9      	ldr	r1, [r7, #28]
 8006400:	430b      	orrs	r3, r1
 8006402:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4aa4      	ldr	r2, [pc, #656]	; (80066b8 <UART_SetConfig+0x2ec>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d004      	beq.n	8006434 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	4313      	orrs	r3, r2
 8006432:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69fa      	ldr	r2, [r7, #28]
 8006444:	430a      	orrs	r2, r1
 8006446:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a9b      	ldr	r2, [pc, #620]	; (80066bc <UART_SetConfig+0x2f0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d121      	bne.n	8006496 <UART_SetConfig+0xca>
 8006452:	4b9b      	ldr	r3, [pc, #620]	; (80066c0 <UART_SetConfig+0x2f4>)
 8006454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	2b03      	cmp	r3, #3
 800645e:	d817      	bhi.n	8006490 <UART_SetConfig+0xc4>
 8006460:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <UART_SetConfig+0x9c>)
 8006462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006466:	bf00      	nop
 8006468:	08006479 	.word	0x08006479
 800646c:	08006485 	.word	0x08006485
 8006470:	0800647f 	.word	0x0800647f
 8006474:	0800648b 	.word	0x0800648b
 8006478:	2301      	movs	r3, #1
 800647a:	76fb      	strb	r3, [r7, #27]
 800647c:	e070      	b.n	8006560 <UART_SetConfig+0x194>
 800647e:	2302      	movs	r3, #2
 8006480:	76fb      	strb	r3, [r7, #27]
 8006482:	e06d      	b.n	8006560 <UART_SetConfig+0x194>
 8006484:	2304      	movs	r3, #4
 8006486:	76fb      	strb	r3, [r7, #27]
 8006488:	e06a      	b.n	8006560 <UART_SetConfig+0x194>
 800648a:	2308      	movs	r3, #8
 800648c:	76fb      	strb	r3, [r7, #27]
 800648e:	e067      	b.n	8006560 <UART_SetConfig+0x194>
 8006490:	2310      	movs	r3, #16
 8006492:	76fb      	strb	r3, [r7, #27]
 8006494:	e064      	b.n	8006560 <UART_SetConfig+0x194>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a8a      	ldr	r2, [pc, #552]	; (80066c4 <UART_SetConfig+0x2f8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d132      	bne.n	8006506 <UART_SetConfig+0x13a>
 80064a0:	4b87      	ldr	r3, [pc, #540]	; (80066c0 <UART_SetConfig+0x2f4>)
 80064a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a6:	f003 030c 	and.w	r3, r3, #12
 80064aa:	2b0c      	cmp	r3, #12
 80064ac:	d828      	bhi.n	8006500 <UART_SetConfig+0x134>
 80064ae:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <UART_SetConfig+0xe8>)
 80064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b4:	080064e9 	.word	0x080064e9
 80064b8:	08006501 	.word	0x08006501
 80064bc:	08006501 	.word	0x08006501
 80064c0:	08006501 	.word	0x08006501
 80064c4:	080064f5 	.word	0x080064f5
 80064c8:	08006501 	.word	0x08006501
 80064cc:	08006501 	.word	0x08006501
 80064d0:	08006501 	.word	0x08006501
 80064d4:	080064ef 	.word	0x080064ef
 80064d8:	08006501 	.word	0x08006501
 80064dc:	08006501 	.word	0x08006501
 80064e0:	08006501 	.word	0x08006501
 80064e4:	080064fb 	.word	0x080064fb
 80064e8:	2300      	movs	r3, #0
 80064ea:	76fb      	strb	r3, [r7, #27]
 80064ec:	e038      	b.n	8006560 <UART_SetConfig+0x194>
 80064ee:	2302      	movs	r3, #2
 80064f0:	76fb      	strb	r3, [r7, #27]
 80064f2:	e035      	b.n	8006560 <UART_SetConfig+0x194>
 80064f4:	2304      	movs	r3, #4
 80064f6:	76fb      	strb	r3, [r7, #27]
 80064f8:	e032      	b.n	8006560 <UART_SetConfig+0x194>
 80064fa:	2308      	movs	r3, #8
 80064fc:	76fb      	strb	r3, [r7, #27]
 80064fe:	e02f      	b.n	8006560 <UART_SetConfig+0x194>
 8006500:	2310      	movs	r3, #16
 8006502:	76fb      	strb	r3, [r7, #27]
 8006504:	e02c      	b.n	8006560 <UART_SetConfig+0x194>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a6b      	ldr	r2, [pc, #428]	; (80066b8 <UART_SetConfig+0x2ec>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d125      	bne.n	800655c <UART_SetConfig+0x190>
 8006510:	4b6b      	ldr	r3, [pc, #428]	; (80066c0 <UART_SetConfig+0x2f4>)
 8006512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006516:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800651a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800651e:	d017      	beq.n	8006550 <UART_SetConfig+0x184>
 8006520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006524:	d817      	bhi.n	8006556 <UART_SetConfig+0x18a>
 8006526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800652a:	d00b      	beq.n	8006544 <UART_SetConfig+0x178>
 800652c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006530:	d811      	bhi.n	8006556 <UART_SetConfig+0x18a>
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <UART_SetConfig+0x172>
 8006536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653a:	d006      	beq.n	800654a <UART_SetConfig+0x17e>
 800653c:	e00b      	b.n	8006556 <UART_SetConfig+0x18a>
 800653e:	2300      	movs	r3, #0
 8006540:	76fb      	strb	r3, [r7, #27]
 8006542:	e00d      	b.n	8006560 <UART_SetConfig+0x194>
 8006544:	2302      	movs	r3, #2
 8006546:	76fb      	strb	r3, [r7, #27]
 8006548:	e00a      	b.n	8006560 <UART_SetConfig+0x194>
 800654a:	2304      	movs	r3, #4
 800654c:	76fb      	strb	r3, [r7, #27]
 800654e:	e007      	b.n	8006560 <UART_SetConfig+0x194>
 8006550:	2308      	movs	r3, #8
 8006552:	76fb      	strb	r3, [r7, #27]
 8006554:	e004      	b.n	8006560 <UART_SetConfig+0x194>
 8006556:	2310      	movs	r3, #16
 8006558:	76fb      	strb	r3, [r7, #27]
 800655a:	e001      	b.n	8006560 <UART_SetConfig+0x194>
 800655c:	2310      	movs	r3, #16
 800655e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a54      	ldr	r2, [pc, #336]	; (80066b8 <UART_SetConfig+0x2ec>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d173      	bne.n	8006652 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800656a:	7efb      	ldrb	r3, [r7, #27]
 800656c:	2b08      	cmp	r3, #8
 800656e:	d824      	bhi.n	80065ba <UART_SetConfig+0x1ee>
 8006570:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <UART_SetConfig+0x1ac>)
 8006572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006576:	bf00      	nop
 8006578:	0800659d 	.word	0x0800659d
 800657c:	080065bb 	.word	0x080065bb
 8006580:	080065a5 	.word	0x080065a5
 8006584:	080065bb 	.word	0x080065bb
 8006588:	080065ab 	.word	0x080065ab
 800658c:	080065bb 	.word	0x080065bb
 8006590:	080065bb 	.word	0x080065bb
 8006594:	080065bb 	.word	0x080065bb
 8006598:	080065b3 	.word	0x080065b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800659c:	f7fe fd08 	bl	8004fb0 <HAL_RCC_GetPCLK1Freq>
 80065a0:	6178      	str	r0, [r7, #20]
        break;
 80065a2:	e00f      	b.n	80065c4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a4:	4b48      	ldr	r3, [pc, #288]	; (80066c8 <UART_SetConfig+0x2fc>)
 80065a6:	617b      	str	r3, [r7, #20]
        break;
 80065a8:	e00c      	b.n	80065c4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065aa:	f7fe fc69 	bl	8004e80 <HAL_RCC_GetSysClockFreq>
 80065ae:	6178      	str	r0, [r7, #20]
        break;
 80065b0:	e008      	b.n	80065c4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065b6:	617b      	str	r3, [r7, #20]
        break;
 80065b8:	e004      	b.n	80065c4 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	76bb      	strb	r3, [r7, #26]
        break;
 80065c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 80fe 	beq.w	80067c8 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	4613      	mov	r3, r2
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	4413      	add	r3, r2
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d305      	bcc.n	80065e8 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d902      	bls.n	80065ee <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	76bb      	strb	r3, [r7, #26]
 80065ec:	e0ec      	b.n	80067c8 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f04f 0100 	mov.w	r1, #0
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	f04f 0300 	mov.w	r3, #0
 80065fe:	020b      	lsls	r3, r1, #8
 8006600:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006604:	0202      	lsls	r2, r0, #8
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	6849      	ldr	r1, [r1, #4]
 800660a:	0849      	lsrs	r1, r1, #1
 800660c:	4608      	mov	r0, r1
 800660e:	f04f 0100 	mov.w	r1, #0
 8006612:	1814      	adds	r4, r2, r0
 8006614:	eb43 0501 	adc.w	r5, r3, r1
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	461a      	mov	r2, r3
 800661e:	f04f 0300 	mov.w	r3, #0
 8006622:	4620      	mov	r0, r4
 8006624:	4629      	mov	r1, r5
 8006626:	f7fa fb2f 	bl	8000c88 <__aeabi_uldivmod>
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	4613      	mov	r3, r2
 8006630:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006638:	d308      	bcc.n	800664c <UART_SetConfig+0x280>
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006640:	d204      	bcs.n	800664c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	60da      	str	r2, [r3, #12]
 800664a:	e0bd      	b.n	80067c8 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	76bb      	strb	r3, [r7, #26]
 8006650:	e0ba      	b.n	80067c8 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800665a:	d168      	bne.n	800672e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 800665c:	7efb      	ldrb	r3, [r7, #27]
 800665e:	2b08      	cmp	r3, #8
 8006660:	d834      	bhi.n	80066cc <UART_SetConfig+0x300>
 8006662:	a201      	add	r2, pc, #4	; (adr r2, 8006668 <UART_SetConfig+0x29c>)
 8006664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006668:	0800668d 	.word	0x0800668d
 800666c:	08006695 	.word	0x08006695
 8006670:	0800669d 	.word	0x0800669d
 8006674:	080066cd 	.word	0x080066cd
 8006678:	080066a3 	.word	0x080066a3
 800667c:	080066cd 	.word	0x080066cd
 8006680:	080066cd 	.word	0x080066cd
 8006684:	080066cd 	.word	0x080066cd
 8006688:	080066ab 	.word	0x080066ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800668c:	f7fe fc90 	bl	8004fb0 <HAL_RCC_GetPCLK1Freq>
 8006690:	6178      	str	r0, [r7, #20]
        break;
 8006692:	e020      	b.n	80066d6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006694:	f7fe fca2 	bl	8004fdc <HAL_RCC_GetPCLK2Freq>
 8006698:	6178      	str	r0, [r7, #20]
        break;
 800669a:	e01c      	b.n	80066d6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800669c:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <UART_SetConfig+0x2fc>)
 800669e:	617b      	str	r3, [r7, #20]
        break;
 80066a0:	e019      	b.n	80066d6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a2:	f7fe fbed 	bl	8004e80 <HAL_RCC_GetSysClockFreq>
 80066a6:	6178      	str	r0, [r7, #20]
        break;
 80066a8:	e015      	b.n	80066d6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ae:	617b      	str	r3, [r7, #20]
        break;
 80066b0:	e011      	b.n	80066d6 <UART_SetConfig+0x30a>
 80066b2:	bf00      	nop
 80066b4:	efff69f3 	.word	0xefff69f3
 80066b8:	40008000 	.word	0x40008000
 80066bc:	40013800 	.word	0x40013800
 80066c0:	40021000 	.word	0x40021000
 80066c4:	40004400 	.word	0x40004400
 80066c8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	76bb      	strb	r3, [r7, #26]
        break;
 80066d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d075      	beq.n	80067c8 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	005a      	lsls	r2, r3, #1
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	085b      	lsrs	r3, r3, #1
 80066e6:	441a      	add	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	2b0f      	cmp	r3, #15
 80066f8:	d916      	bls.n	8006728 <UART_SetConfig+0x35c>
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006700:	d212      	bcs.n	8006728 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	b29b      	uxth	r3, r3
 8006706:	f023 030f 	bic.w	r3, r3, #15
 800670a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	085b      	lsrs	r3, r3, #1
 8006710:	b29b      	uxth	r3, r3
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	b29a      	uxth	r2, r3
 8006718:	89fb      	ldrh	r3, [r7, #14]
 800671a:	4313      	orrs	r3, r2
 800671c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	89fa      	ldrh	r2, [r7, #14]
 8006724:	60da      	str	r2, [r3, #12]
 8006726:	e04f      	b.n	80067c8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	76bb      	strb	r3, [r7, #26]
 800672c:	e04c      	b.n	80067c8 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800672e:	7efb      	ldrb	r3, [r7, #27]
 8006730:	2b08      	cmp	r3, #8
 8006732:	d828      	bhi.n	8006786 <UART_SetConfig+0x3ba>
 8006734:	a201      	add	r2, pc, #4	; (adr r2, 800673c <UART_SetConfig+0x370>)
 8006736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673a:	bf00      	nop
 800673c:	08006761 	.word	0x08006761
 8006740:	08006769 	.word	0x08006769
 8006744:	08006771 	.word	0x08006771
 8006748:	08006787 	.word	0x08006787
 800674c:	08006777 	.word	0x08006777
 8006750:	08006787 	.word	0x08006787
 8006754:	08006787 	.word	0x08006787
 8006758:	08006787 	.word	0x08006787
 800675c:	0800677f 	.word	0x0800677f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006760:	f7fe fc26 	bl	8004fb0 <HAL_RCC_GetPCLK1Freq>
 8006764:	6178      	str	r0, [r7, #20]
        break;
 8006766:	e013      	b.n	8006790 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006768:	f7fe fc38 	bl	8004fdc <HAL_RCC_GetPCLK2Freq>
 800676c:	6178      	str	r0, [r7, #20]
        break;
 800676e:	e00f      	b.n	8006790 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006770:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <UART_SetConfig+0x414>)
 8006772:	617b      	str	r3, [r7, #20]
        break;
 8006774:	e00c      	b.n	8006790 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006776:	f7fe fb83 	bl	8004e80 <HAL_RCC_GetSysClockFreq>
 800677a:	6178      	str	r0, [r7, #20]
        break;
 800677c:	e008      	b.n	8006790 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800677e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006782:	617b      	str	r3, [r7, #20]
        break;
 8006784:	e004      	b.n	8006790 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	76bb      	strb	r3, [r7, #26]
        break;
 800678e:	bf00      	nop
    }

    if (pclk != 0U)
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d018      	beq.n	80067c8 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	085a      	lsrs	r2, r3, #1
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	441a      	add	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	2b0f      	cmp	r3, #15
 80067b0:	d908      	bls.n	80067c4 <UART_SetConfig+0x3f8>
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067b8:	d204      	bcs.n	80067c4 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	60da      	str	r2, [r3, #12]
 80067c2:	e001      	b.n	80067c8 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80067d4:	7ebb      	ldrb	r3, [r7, #26]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3720      	adds	r7, #32
 80067da:	46bd      	mov	sp, r7
 80067dc:	bdb0      	pop	{r4, r5, r7, pc}
 80067de:	bf00      	nop
 80067e0:	00f42400 	.word	0x00f42400

080067e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00a      	beq.n	800680e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00a      	beq.n	8006852 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	f003 0310 	and.w	r3, r3, #16
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00a      	beq.n	8006896 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d01a      	beq.n	80068fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068e2:	d10a      	bne.n	80068fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	430a      	orrs	r2, r1
 80068f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00a      	beq.n	800691c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	605a      	str	r2, [r3, #4]
  }
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af02      	add	r7, sp, #8
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006938:	f7fb fb9c 	bl	8002074 <HAL_GetTick>
 800693c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b08      	cmp	r3, #8
 800694a:	d10e      	bne.n	800696a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800694c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f82d 	bl	80069ba <UART_WaitOnFlagUntilTimeout>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e023      	b.n	80069b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b04      	cmp	r3, #4
 8006976:	d10e      	bne.n	8006996 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006978:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f817 	bl	80069ba <UART_WaitOnFlagUntilTimeout>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e00d      	b.n	80069b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2220      	movs	r2, #32
 800699a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2220      	movs	r2, #32
 80069a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	60f8      	str	r0, [r7, #12]
 80069c2:	60b9      	str	r1, [r7, #8]
 80069c4:	603b      	str	r3, [r7, #0]
 80069c6:	4613      	mov	r3, r2
 80069c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ca:	e05e      	b.n	8006a8a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d2:	d05a      	beq.n	8006a8a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d4:	f7fb fb4e 	bl	8002074 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d302      	bcc.n	80069ea <UART_WaitOnFlagUntilTimeout+0x30>
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d11b      	bne.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069f8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689a      	ldr	r2, [r3, #8]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 0201 	bic.w	r2, r2, #1
 8006a08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2220      	movs	r2, #32
 8006a14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e043      	b.n	8006aaa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d02c      	beq.n	8006a8a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a3e:	d124      	bne.n	8006a8a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a48:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a58:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0201 	bic.w	r2, r2, #1
 8006a68:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2220      	movs	r2, #32
 8006a74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e00f      	b.n	8006aaa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69da      	ldr	r2, [r3, #28]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4013      	ands	r3, r2
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	bf0c      	ite	eq
 8006a9a:	2301      	moveq	r3, #1
 8006a9c:	2300      	movne	r3, #0
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d091      	beq.n	80069cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	88fa      	ldrh	r2, [r7, #6]
 8006acc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2222      	movs	r2, #34	; 0x22
 8006adc:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d02b      	beq.n	8006b3e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aea:	4a25      	ldr	r2, [pc, #148]	; (8006b80 <UART_Start_Receive_DMA+0xcc>)
 8006aec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af2:	4a24      	ldr	r2, [pc, #144]	; (8006b84 <UART_Start_Receive_DMA+0xd0>)
 8006af4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afa:	4a23      	ldr	r2, [pc, #140]	; (8006b88 <UART_Start_Receive_DMA+0xd4>)
 8006afc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	2200      	movs	r2, #0
 8006b04:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3324      	adds	r3, #36	; 0x24
 8006b10:	4619      	mov	r1, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b16:	461a      	mov	r2, r3
 8006b18:	88fb      	ldrh	r3, [r7, #6]
 8006b1a:	f7fb fc75 	bl	8002408 <HAL_DMA_Start_IT>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00c      	beq.n	8006b3e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2210      	movs	r2, #16
 8006b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2220      	movs	r2, #32
 8006b38:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e01c      	b.n	8006b78 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b54:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f042 0201 	orr.w	r2, r2, #1
 8006b64:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b74:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	08006c85 	.word	0x08006c85
 8006b84:	08006d1d 	.word	0x08006d1d
 8006b88:	08006d55 	.word	0x08006d55

08006b8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006ba2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bcc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0201 	bic.w	r2, r2, #1
 8006bdc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d107      	bne.n	8006bf6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0210 	bic.w	r2, r2, #16
 8006bf4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c20:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d114      	bne.n	8006c5a <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c46:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c56:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c58:	e002      	b.n	8006c60 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f7ff fb82 	bl	8006364 <HAL_UART_TxCpltCallback>
}
 8006c60:	bf00      	nop
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c74:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f7ff fb7e 	bl	8006378 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c7c:	bf00      	nop
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c90:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d12a      	bne.n	8006cf6 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cb6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689a      	ldr	r2, [r3, #8]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0201 	bic.w	r2, r2, #1
 8006cc6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689a      	ldr	r2, [r3, #8]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cd6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d107      	bne.n	8006cf6 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0210 	bic.w	r2, r2, #16
 8006cf4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d107      	bne.n	8006d0e <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d04:	4619      	mov	r1, r3
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f7ff fb54 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d0c:	e002      	b.n	8006d14 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f7fa fc16 	bl	8001540 <HAL_UART_RxCpltCallback>
}
 8006d14:	bf00      	nop
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d28:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d109      	bne.n	8006d46 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d38:	085b      	lsrs	r3, r3, #1
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f7ff fb38 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d44:	e002      	b.n	8006d4c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f7ff fb20 	bl	800638c <HAL_UART_RxHalfCpltCallback>
}
 8006d4c:	bf00      	nop
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d60:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d66:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d6c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d78:	2b80      	cmp	r3, #128	; 0x80
 8006d7a:	d109      	bne.n	8006d90 <UART_DMAError+0x3c>
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	2b21      	cmp	r3, #33	; 0x21
 8006d80:	d106      	bne.n	8006d90 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006d8a:	6978      	ldr	r0, [r7, #20]
 8006d8c:	f7ff fefe 	bl	8006b8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9a:	2b40      	cmp	r3, #64	; 0x40
 8006d9c:	d109      	bne.n	8006db2 <UART_DMAError+0x5e>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b22      	cmp	r3, #34	; 0x22
 8006da2:	d106      	bne.n	8006db2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006dac:	6978      	ldr	r0, [r7, #20]
 8006dae:	f7ff ff02 	bl	8006bb6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006db8:	f043 0210 	orr.w	r2, r3, #16
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dc2:	6978      	ldr	r0, [r7, #20]
 8006dc4:	f7ff faec 	bl	80063a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dc8:	bf00      	nop
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ddc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f7ff fad6 	bl	80063a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006df4:	bf00      	nop
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e12:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2220      	movs	r2, #32
 8006e18:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7ff fa9f 	bl	8006364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e26:	bf00      	nop
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
	...

08006e44 <__NVIC_SetPriority>:
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	6039      	str	r1, [r7, #0]
 8006e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	db0a      	blt.n	8006e6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	b2da      	uxtb	r2, r3
 8006e5c:	490c      	ldr	r1, [pc, #48]	; (8006e90 <__NVIC_SetPriority+0x4c>)
 8006e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e62:	0112      	lsls	r2, r2, #4
 8006e64:	b2d2      	uxtb	r2, r2
 8006e66:	440b      	add	r3, r1
 8006e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006e6c:	e00a      	b.n	8006e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	4908      	ldr	r1, [pc, #32]	; (8006e94 <__NVIC_SetPriority+0x50>)
 8006e74:	79fb      	ldrb	r3, [r7, #7]
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	3b04      	subs	r3, #4
 8006e7c:	0112      	lsls	r2, r2, #4
 8006e7e:	b2d2      	uxtb	r2, r2
 8006e80:	440b      	add	r3, r1
 8006e82:	761a      	strb	r2, [r3, #24]
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	e000e100 	.word	0xe000e100
 8006e94:	e000ed00 	.word	0xe000ed00

08006e98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006e9c:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <SysTick_Handler+0x1c>)
 8006e9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006ea0:	f002 f93e 	bl	8009120 <xTaskGetSchedulerState>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d001      	beq.n	8006eae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006eaa:	f003 f825 	bl	8009ef8 <xPortSysTickHandler>
  }
}
 8006eae:	bf00      	nop
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	e000e010 	.word	0xe000e010

08006eb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	f06f 0004 	mvn.w	r0, #4
 8006ec2:	f7ff ffbf 	bl	8006e44 <__NVIC_SetPriority>
#endif
}
 8006ec6:	bf00      	nop
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ed2:	f3ef 8305 	mrs	r3, IPSR
 8006ed6:	603b      	str	r3, [r7, #0]
  return(result);
 8006ed8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006ede:	f06f 0305 	mvn.w	r3, #5
 8006ee2:	607b      	str	r3, [r7, #4]
 8006ee4:	e00c      	b.n	8006f00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	; (8006f10 <osKernelInitialize+0x44>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d105      	bne.n	8006efa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006eee:	4b08      	ldr	r3, [pc, #32]	; (8006f10 <osKernelInitialize+0x44>)
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	607b      	str	r3, [r7, #4]
 8006ef8:	e002      	b.n	8006f00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006efa:	f04f 33ff 	mov.w	r3, #4294967295
 8006efe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f00:	687b      	ldr	r3, [r7, #4]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	20000230 	.word	0x20000230

08006f14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f1a:	f3ef 8305 	mrs	r3, IPSR
 8006f1e:	603b      	str	r3, [r7, #0]
  return(result);
 8006f20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006f26:	f06f 0305 	mvn.w	r3, #5
 8006f2a:	607b      	str	r3, [r7, #4]
 8006f2c:	e010      	b.n	8006f50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006f2e:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <osKernelStart+0x48>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d109      	bne.n	8006f4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006f36:	f7ff ffbf 	bl	8006eb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006f3a:	4b08      	ldr	r3, [pc, #32]	; (8006f5c <osKernelStart+0x48>)
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006f40:	f001 fca6 	bl	8008890 <vTaskStartScheduler>
      stat = osOK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	607b      	str	r3, [r7, #4]
 8006f48:	e002      	b.n	8006f50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f50:	687b      	ldr	r3, [r7, #4]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000230 	.word	0x20000230

08006f60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08e      	sub	sp, #56	; 0x38
 8006f64:	af04      	add	r7, sp, #16
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f70:	f3ef 8305 	mrs	r3, IPSR
 8006f74:	617b      	str	r3, [r7, #20]
  return(result);
 8006f76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d17e      	bne.n	800707a <osThreadNew+0x11a>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d07b      	beq.n	800707a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006f82:	2380      	movs	r3, #128	; 0x80
 8006f84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006f86:	2318      	movs	r3, #24
 8006f88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d045      	beq.n	8007026 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <osThreadNew+0x48>
        name = attr->name;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d008      	beq.n	8006fce <osThreadNew+0x6e>
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	2b38      	cmp	r3, #56	; 0x38
 8006fc0:	d805      	bhi.n	8006fce <osThreadNew+0x6e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <osThreadNew+0x72>
        return (NULL);
 8006fce:	2300      	movs	r3, #0
 8006fd0:	e054      	b.n	800707c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	089b      	lsrs	r3, r3, #2
 8006fe0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00e      	beq.n	8007008 <osThreadNew+0xa8>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	2b5b      	cmp	r3, #91	; 0x5b
 8006ff0:	d90a      	bls.n	8007008 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d006      	beq.n	8007008 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <osThreadNew+0xa8>
        mem = 1;
 8007002:	2301      	movs	r3, #1
 8007004:	61bb      	str	r3, [r7, #24]
 8007006:	e010      	b.n	800702a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10c      	bne.n	800702a <osThreadNew+0xca>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d108      	bne.n	800702a <osThreadNew+0xca>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d104      	bne.n	800702a <osThreadNew+0xca>
          mem = 0;
 8007020:	2300      	movs	r3, #0
 8007022:	61bb      	str	r3, [r7, #24]
 8007024:	e001      	b.n	800702a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d110      	bne.n	8007052 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007038:	9202      	str	r2, [sp, #8]
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	6a3a      	ldr	r2, [r7, #32]
 8007044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f001 fa4c 	bl	80084e4 <xTaskCreateStatic>
 800704c:	4603      	mov	r3, r0
 800704e:	613b      	str	r3, [r7, #16]
 8007050:	e013      	b.n	800707a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d110      	bne.n	800707a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	b29a      	uxth	r2, r3
 800705c:	f107 0310 	add.w	r3, r7, #16
 8007060:	9301      	str	r3, [sp, #4]
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f001 fa97 	bl	800859e <xTaskCreate>
 8007070:	4603      	mov	r3, r0
 8007072:	2b01      	cmp	r3, #1
 8007074:	d001      	beq.n	800707a <osThreadNew+0x11a>
            hTask = NULL;
 8007076:	2300      	movs	r3, #0
 8007078:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800707a:	693b      	ldr	r3, [r7, #16]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3728      	adds	r7, #40	; 0x28
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800708c:	f3ef 8305 	mrs	r3, IPSR
 8007090:	60bb      	str	r3, [r7, #8]
  return(result);
 8007092:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <osDelay+0x1c>
    stat = osErrorISR;
 8007098:	f06f 0305 	mvn.w	r3, #5
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	e007      	b.n	80070b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80070a0:	2300      	movs	r3, #0
 80070a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 fbbc 	bl	8008828 <vTaskDelay>
    }
  }

  return (stat);
 80070b0:	68fb      	ldr	r3, [r7, #12]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b08a      	sub	sp, #40	; 0x28
 80070be:	af02      	add	r7, sp, #8
 80070c0:	60f8      	str	r0, [r7, #12]
 80070c2:	60b9      	str	r1, [r7, #8]
 80070c4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070ca:	f3ef 8305 	mrs	r3, IPSR
 80070ce:	613b      	str	r3, [r7, #16]
  return(result);
 80070d0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d175      	bne.n	80071c2 <osSemaphoreNew+0x108>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d072      	beq.n	80071c2 <osSemaphoreNew+0x108>
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d86e      	bhi.n	80071c2 <osSemaphoreNew+0x108>
    mem = -1;
 80070e4:	f04f 33ff 	mov.w	r3, #4294967295
 80070e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d015      	beq.n	800711c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d006      	beq.n	8007106 <osSemaphoreNew+0x4c>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	2b4f      	cmp	r3, #79	; 0x4f
 80070fe:	d902      	bls.n	8007106 <osSemaphoreNew+0x4c>
        mem = 1;
 8007100:	2301      	movs	r3, #1
 8007102:	61bb      	str	r3, [r7, #24]
 8007104:	e00c      	b.n	8007120 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d108      	bne.n	8007120 <osSemaphoreNew+0x66>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d104      	bne.n	8007120 <osSemaphoreNew+0x66>
          mem = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	61bb      	str	r3, [r7, #24]
 800711a:	e001      	b.n	8007120 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007126:	d04c      	beq.n	80071c2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d128      	bne.n	8007180 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d10a      	bne.n	800714a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	2203      	movs	r2, #3
 800713a:	9200      	str	r2, [sp, #0]
 800713c:	2200      	movs	r2, #0
 800713e:	2100      	movs	r1, #0
 8007140:	2001      	movs	r0, #1
 8007142:	f000 fa29 	bl	8007598 <xQueueGenericCreateStatic>
 8007146:	61f8      	str	r0, [r7, #28]
 8007148:	e005      	b.n	8007156 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800714a:	2203      	movs	r2, #3
 800714c:	2100      	movs	r1, #0
 800714e:	2001      	movs	r0, #1
 8007150:	f000 fa9a 	bl	8007688 <xQueueGenericCreate>
 8007154:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d022      	beq.n	80071a2 <osSemaphoreNew+0xe8>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d01f      	beq.n	80071a2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007162:	2300      	movs	r3, #0
 8007164:	2200      	movs	r2, #0
 8007166:	2100      	movs	r1, #0
 8007168:	69f8      	ldr	r0, [r7, #28]
 800716a:	f000 fb55 	bl	8007818 <xQueueGenericSend>
 800716e:	4603      	mov	r3, r0
 8007170:	2b01      	cmp	r3, #1
 8007172:	d016      	beq.n	80071a2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007174:	69f8      	ldr	r0, [r7, #28]
 8007176:	f000 ffe1 	bl	800813c <vQueueDelete>
            hSemaphore = NULL;
 800717a:	2300      	movs	r3, #0
 800717c:	61fb      	str	r3, [r7, #28]
 800717e:	e010      	b.n	80071a2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d108      	bne.n	8007198 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	461a      	mov	r2, r3
 800718c:	68b9      	ldr	r1, [r7, #8]
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 fad7 	bl	8007742 <xQueueCreateCountingSemaphoreStatic>
 8007194:	61f8      	str	r0, [r7, #28]
 8007196:	e004      	b.n	80071a2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 fb08 	bl	80077b0 <xQueueCreateCountingSemaphore>
 80071a0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00c      	beq.n	80071c2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	e001      	b.n	80071ba <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80071ba:	6979      	ldr	r1, [r7, #20]
 80071bc:	69f8      	ldr	r0, [r7, #28]
 80071be:	f001 f909 	bl	80083d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80071c2:	69fb      	ldr	r3, [r7, #28]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3720      	adds	r7, #32
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80071da:	2300      	movs	r3, #0
 80071dc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d103      	bne.n	80071ec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80071e4:	f06f 0303 	mvn.w	r3, #3
 80071e8:	617b      	str	r3, [r7, #20]
 80071ea:	e039      	b.n	8007260 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ec:	f3ef 8305 	mrs	r3, IPSR
 80071f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80071f2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d022      	beq.n	800723e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80071fe:	f06f 0303 	mvn.w	r3, #3
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	e02c      	b.n	8007260 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007206:	2300      	movs	r3, #0
 8007208:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800720a:	f107 0308 	add.w	r3, r7, #8
 800720e:	461a      	mov	r2, r3
 8007210:	2100      	movs	r1, #0
 8007212:	6938      	ldr	r0, [r7, #16]
 8007214:	f000 ff12 	bl	800803c <xQueueReceiveFromISR>
 8007218:	4603      	mov	r3, r0
 800721a:	2b01      	cmp	r3, #1
 800721c:	d003      	beq.n	8007226 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800721e:	f06f 0302 	mvn.w	r3, #2
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	e01c      	b.n	8007260 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d019      	beq.n	8007260 <osSemaphoreAcquire+0x94>
 800722c:	4b0f      	ldr	r3, [pc, #60]	; (800726c <osSemaphoreAcquire+0xa0>)
 800722e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	e010      	b.n	8007260 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6938      	ldr	r0, [r7, #16]
 8007242:	f000 fdef 	bl	8007e24 <xQueueSemaphoreTake>
 8007246:	4603      	mov	r3, r0
 8007248:	2b01      	cmp	r3, #1
 800724a:	d009      	beq.n	8007260 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007252:	f06f 0301 	mvn.w	r3, #1
 8007256:	617b      	str	r3, [r7, #20]
 8007258:	e002      	b.n	8007260 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800725a:	f06f 0302 	mvn.w	r3, #2
 800725e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007260:	697b      	ldr	r3, [r7, #20]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	e000ed04 	.word	0xe000ed04

08007270 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d103      	bne.n	800728e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007286:	f06f 0303 	mvn.w	r3, #3
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	e02c      	b.n	80072e8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800728e:	f3ef 8305 	mrs	r3, IPSR
 8007292:	60fb      	str	r3, [r7, #12]
  return(result);
 8007294:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007296:	2b00      	cmp	r3, #0
 8007298:	d01a      	beq.n	80072d0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800729a:	2300      	movs	r3, #0
 800729c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800729e:	f107 0308 	add.w	r3, r7, #8
 80072a2:	4619      	mov	r1, r3
 80072a4:	6938      	ldr	r0, [r7, #16]
 80072a6:	f000 fc50 	bl	8007b4a <xQueueGiveFromISR>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d003      	beq.n	80072b8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80072b0:	f06f 0302 	mvn.w	r3, #2
 80072b4:	617b      	str	r3, [r7, #20]
 80072b6:	e017      	b.n	80072e8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d014      	beq.n	80072e8 <osSemaphoreRelease+0x78>
 80072be:	4b0d      	ldr	r3, [pc, #52]	; (80072f4 <osSemaphoreRelease+0x84>)
 80072c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	e00b      	b.n	80072e8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80072d0:	2300      	movs	r3, #0
 80072d2:	2200      	movs	r2, #0
 80072d4:	2100      	movs	r1, #0
 80072d6:	6938      	ldr	r0, [r7, #16]
 80072d8:	f000 fa9e 	bl	8007818 <xQueueGenericSend>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d002      	beq.n	80072e8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80072e2:	f06f 0302 	mvn.w	r3, #2
 80072e6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80072e8:	697b      	ldr	r3, [r7, #20]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	e000ed04 	.word	0xe000ed04

080072f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4a07      	ldr	r2, [pc, #28]	; (8007324 <vApplicationGetIdleTaskMemory+0x2c>)
 8007308:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	4a06      	ldr	r2, [pc, #24]	; (8007328 <vApplicationGetIdleTaskMemory+0x30>)
 800730e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2280      	movs	r2, #128	; 0x80
 8007314:	601a      	str	r2, [r3, #0]
}
 8007316:	bf00      	nop
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	20000234 	.word	0x20000234
 8007328:	20000290 	.word	0x20000290

0800732c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4a07      	ldr	r2, [pc, #28]	; (8007358 <vApplicationGetTimerTaskMemory+0x2c>)
 800733c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	4a06      	ldr	r2, [pc, #24]	; (800735c <vApplicationGetTimerTaskMemory+0x30>)
 8007342:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800734a:	601a      	str	r2, [r3, #0]
}
 800734c:	bf00      	nop
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	20000490 	.word	0x20000490
 800735c:	200004ec 	.word	0x200004ec

08007360 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f103 0208 	add.w	r2, r3, #8
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f04f 32ff 	mov.w	r2, #4294967295
 8007378:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f103 0208 	add.w	r2, r3, #8
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f103 0208 	add.w	r2, r3, #8
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073ba:	b480      	push	{r7}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	601a      	str	r2, [r3, #0]
}
 80073f6:	bf00      	nop
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007402:	b480      	push	{r7}
 8007404:	b085      	sub	sp, #20
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007418:	d103      	bne.n	8007422 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	e00c      	b.n	800743c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3308      	adds	r3, #8
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	e002      	b.n	8007430 <vListInsert+0x2e>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	429a      	cmp	r2, r3
 800743a:	d2f6      	bcs.n	800742a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]
}
 8007468:	bf00      	nop
 800746a:	3714      	adds	r7, #20
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6892      	ldr	r2, [r2, #8]
 800748a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	6852      	ldr	r2, [r2, #4]
 8007494:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	429a      	cmp	r2, r3
 800749e:	d103      	bne.n	80074a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	1e5a      	subs	r2, r3, #1
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80074ee:	bf00      	nop
 80074f0:	e7fe      	b.n	80074f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80074f2:	f002 fc6f 	bl	8009dd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fe:	68f9      	ldr	r1, [r7, #12]
 8007500:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007502:	fb01 f303 	mul.w	r3, r1, r3
 8007506:	441a      	add	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007522:	3b01      	subs	r3, #1
 8007524:	68f9      	ldr	r1, [r7, #12]
 8007526:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007528:	fb01 f303 	mul.w	r3, r1, r3
 800752c:	441a      	add	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	22ff      	movs	r2, #255	; 0xff
 8007536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	22ff      	movs	r2, #255	; 0xff
 800753e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d114      	bne.n	8007572 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01a      	beq.n	8007586 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3310      	adds	r3, #16
 8007554:	4618      	mov	r0, r3
 8007556:	f001 fc25 	bl	8008da4 <xTaskRemoveFromEventList>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d012      	beq.n	8007586 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007560:	4b0c      	ldr	r3, [pc, #48]	; (8007594 <xQueueGenericReset+0xcc>)
 8007562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	e009      	b.n	8007586 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3310      	adds	r3, #16
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff fef2 	bl	8007360 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3324      	adds	r3, #36	; 0x24
 8007580:	4618      	mov	r0, r3
 8007582:	f7ff feed 	bl	8007360 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007586:	f002 fc55 	bl	8009e34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800758a:	2301      	movs	r3, #1
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08e      	sub	sp, #56	; 0x38
 800759c:	af02      	add	r7, sp, #8
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10a      	bne.n	80075c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10a      	bne.n	80075de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <xQueueGenericCreateStatic+0x52>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <xQueueGenericCreateStatic+0x56>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e000      	b.n	80075f0 <xQueueGenericCreateStatic+0x58>
 80075ee:	2300      	movs	r3, #0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	623b      	str	r3, [r7, #32]
}
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d102      	bne.n	8007616 <xQueueGenericCreateStatic+0x7e>
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <xQueueGenericCreateStatic+0x82>
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <xQueueGenericCreateStatic+0x84>
 800761a:	2300      	movs	r3, #0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	61fb      	str	r3, [r7, #28]
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007636:	2350      	movs	r3, #80	; 0x50
 8007638:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b50      	cmp	r3, #80	; 0x50
 800763e:	d00a      	beq.n	8007656 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	61bb      	str	r3, [r7, #24]
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007656:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800765c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00d      	beq.n	800767e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800766a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800766e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	4613      	mov	r3, r2
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	68b9      	ldr	r1, [r7, #8]
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 f83f 	bl	80076fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800767e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007680:	4618      	mov	r0, r3
 8007682:	3730      	adds	r7, #48	; 0x30
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08a      	sub	sp, #40	; 0x28
 800768c:	af02      	add	r7, sp, #8
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	4613      	mov	r3, r2
 8007694:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10a      	bne.n	80076b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	613b      	str	r3, [r7, #16]
}
 80076ae:	bf00      	nop
 80076b0:	e7fe      	b.n	80076b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	fb02 f303 	mul.w	r3, r2, r3
 80076ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	3350      	adds	r3, #80	; 0x50
 80076c0:	4618      	mov	r0, r3
 80076c2:	f002 fca9 	bl	800a018 <pvPortMalloc>
 80076c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d011      	beq.n	80076f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	3350      	adds	r3, #80	; 0x50
 80076d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076e0:	79fa      	ldrb	r2, [r7, #7]
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	4613      	mov	r3, r2
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	68b9      	ldr	r1, [r7, #8]
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f805 	bl	80076fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076f2:	69bb      	ldr	r3, [r7, #24]
	}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3720      	adds	r7, #32
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d103      	bne.n	8007718 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	601a      	str	r2, [r3, #0]
 8007716:	e002      	b.n	800771e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800772a:	2101      	movs	r1, #1
 800772c:	69b8      	ldr	r0, [r7, #24]
 800772e:	f7ff fecb 	bl	80074c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	78fa      	ldrb	r2, [r7, #3]
 8007736:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800773a:	bf00      	nop
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007742:	b580      	push	{r7, lr}
 8007744:	b08a      	sub	sp, #40	; 0x28
 8007746:	af02      	add	r7, sp, #8
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10a      	bne.n	800776a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	61bb      	str	r3, [r7, #24]
}
 8007766:	bf00      	nop
 8007768:	e7fe      	b.n	8007768 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	429a      	cmp	r2, r3
 8007770:	d90a      	bls.n	8007788 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	617b      	str	r3, [r7, #20]
}
 8007784:	bf00      	nop
 8007786:	e7fe      	b.n	8007786 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007788:	2302      	movs	r3, #2
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	2100      	movs	r1, #0
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f7ff ff00 	bl	8007598 <xQueueGenericCreateStatic>
 8007798:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80077a6:	69fb      	ldr	r3, [r7, #28]
	}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3720      	adds	r7, #32
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b086      	sub	sp, #24
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10a      	bne.n	80077d6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	613b      	str	r3, [r7, #16]
}
 80077d2:	bf00      	nop
 80077d4:	e7fe      	b.n	80077d4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d90a      	bls.n	80077f4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	60fb      	str	r3, [r7, #12]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80077f4:	2202      	movs	r2, #2
 80077f6:	2100      	movs	r1, #0
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff ff45 	bl	8007688 <xQueueGenericCreate>
 80077fe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800780c:	697b      	ldr	r3, [r7, #20]
	}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08e      	sub	sp, #56	; 0x38
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007826:	2300      	movs	r3, #0
 8007828:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10a      	bne.n	800784a <xQueueGenericSend+0x32>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007846:	bf00      	nop
 8007848:	e7fe      	b.n	8007848 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d103      	bne.n	8007858 <xQueueGenericSend+0x40>
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <xQueueGenericSend+0x44>
 8007858:	2301      	movs	r3, #1
 800785a:	e000      	b.n	800785e <xQueueGenericSend+0x46>
 800785c:	2300      	movs	r3, #0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <xQueueGenericSend+0x60>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007874:	bf00      	nop
 8007876:	e7fe      	b.n	8007876 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2b02      	cmp	r3, #2
 800787c:	d103      	bne.n	8007886 <xQueueGenericSend+0x6e>
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007882:	2b01      	cmp	r3, #1
 8007884:	d101      	bne.n	800788a <xQueueGenericSend+0x72>
 8007886:	2301      	movs	r3, #1
 8007888:	e000      	b.n	800788c <xQueueGenericSend+0x74>
 800788a:	2300      	movs	r3, #0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10a      	bne.n	80078a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	623b      	str	r3, [r7, #32]
}
 80078a2:	bf00      	nop
 80078a4:	e7fe      	b.n	80078a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078a6:	f001 fc3b 	bl	8009120 <xTaskGetSchedulerState>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d102      	bne.n	80078b6 <xQueueGenericSend+0x9e>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <xQueueGenericSend+0xa2>
 80078b6:	2301      	movs	r3, #1
 80078b8:	e000      	b.n	80078bc <xQueueGenericSend+0xa4>
 80078ba:	2300      	movs	r3, #0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10a      	bne.n	80078d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	61fb      	str	r3, [r7, #28]
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078d6:	f002 fa7d 	bl	8009dd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d302      	bcc.n	80078ec <xQueueGenericSend+0xd4>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d129      	bne.n	8007940 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078f2:	f000 fc5e 	bl	80081b2 <prvCopyDataToQueue>
 80078f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d010      	beq.n	8007922 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007902:	3324      	adds	r3, #36	; 0x24
 8007904:	4618      	mov	r0, r3
 8007906:	f001 fa4d 	bl	8008da4 <xTaskRemoveFromEventList>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d013      	beq.n	8007938 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007910:	4b3f      	ldr	r3, [pc, #252]	; (8007a10 <xQueueGenericSend+0x1f8>)
 8007912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	e00a      	b.n	8007938 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007928:	4b39      	ldr	r3, [pc, #228]	; (8007a10 <xQueueGenericSend+0x1f8>)
 800792a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007938:	f002 fa7c 	bl	8009e34 <vPortExitCritical>
				return pdPASS;
 800793c:	2301      	movs	r3, #1
 800793e:	e063      	b.n	8007a08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d103      	bne.n	800794e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007946:	f002 fa75 	bl	8009e34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800794a:	2300      	movs	r3, #0
 800794c:	e05c      	b.n	8007a08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800794e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007950:	2b00      	cmp	r3, #0
 8007952:	d106      	bne.n	8007962 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007954:	f107 0314 	add.w	r3, r7, #20
 8007958:	4618      	mov	r0, r3
 800795a:	f001 fa87 	bl	8008e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800795e:	2301      	movs	r3, #1
 8007960:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007962:	f002 fa67 	bl	8009e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007966:	f000 fff9 	bl	800895c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800796a:	f002 fa33 	bl	8009dd4 <vPortEnterCritical>
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007974:	b25b      	sxtb	r3, r3
 8007976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797a:	d103      	bne.n	8007984 <xQueueGenericSend+0x16c>
 800797c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800798a:	b25b      	sxtb	r3, r3
 800798c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007990:	d103      	bne.n	800799a <xQueueGenericSend+0x182>
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800799a:	f002 fa4b 	bl	8009e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800799e:	1d3a      	adds	r2, r7, #4
 80079a0:	f107 0314 	add.w	r3, r7, #20
 80079a4:	4611      	mov	r1, r2
 80079a6:	4618      	mov	r0, r3
 80079a8:	f001 fa76 	bl	8008e98 <xTaskCheckForTimeOut>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d124      	bne.n	80079fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079b4:	f000 fcf5 	bl	80083a2 <prvIsQueueFull>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d018      	beq.n	80079f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c0:	3310      	adds	r3, #16
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	4611      	mov	r1, r2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f001 f99c 	bl	8008d04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079ce:	f000 fc80 	bl	80082d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079d2:	f000 ffd1 	bl	8008978 <xTaskResumeAll>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f47f af7c 	bne.w	80078d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80079de:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <xQueueGenericSend+0x1f8>)
 80079e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	e772      	b.n	80078d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079f2:	f000 fc6e 	bl	80082d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079f6:	f000 ffbf 	bl	8008978 <xTaskResumeAll>
 80079fa:	e76c      	b.n	80078d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079fe:	f000 fc68 	bl	80082d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a02:	f000 ffb9 	bl	8008978 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3738      	adds	r7, #56	; 0x38
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	e000ed04 	.word	0xe000ed04

08007a14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b090      	sub	sp, #64	; 0x40
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10a      	bne.n	8007a42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d103      	bne.n	8007a50 <xQueueGenericSendFromISR+0x3c>
 8007a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <xQueueGenericSendFromISR+0x40>
 8007a50:	2301      	movs	r3, #1
 8007a52:	e000      	b.n	8007a56 <xQueueGenericSendFromISR+0x42>
 8007a54:	2300      	movs	r3, #0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10a      	bne.n	8007a70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a6c:	bf00      	nop
 8007a6e:	e7fe      	b.n	8007a6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d103      	bne.n	8007a7e <xQueueGenericSendFromISR+0x6a>
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d101      	bne.n	8007a82 <xQueueGenericSendFromISR+0x6e>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e000      	b.n	8007a84 <xQueueGenericSendFromISR+0x70>
 8007a82:	2300      	movs	r3, #0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10a      	bne.n	8007a9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8c:	f383 8811 	msr	BASEPRI, r3
 8007a90:	f3bf 8f6f 	isb	sy
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	623b      	str	r3, [r7, #32]
}
 8007a9a:	bf00      	nop
 8007a9c:	e7fe      	b.n	8007a9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a9e:	f002 fa7b 	bl	8009f98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007aa2:	f3ef 8211 	mrs	r2, BASEPRI
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	61fa      	str	r2, [r7, #28]
 8007ab8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007aba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007abc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d302      	bcc.n	8007ad0 <xQueueGenericSendFromISR+0xbc>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d12f      	bne.n	8007b30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	68b9      	ldr	r1, [r7, #8]
 8007ae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ae6:	f000 fb64 	bl	80081b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007aea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d112      	bne.n	8007b1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d016      	beq.n	8007b2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afe:	3324      	adds	r3, #36	; 0x24
 8007b00:	4618      	mov	r0, r3
 8007b02:	f001 f94f 	bl	8008da4 <xTaskRemoveFromEventList>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00e      	beq.n	8007b2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00b      	beq.n	8007b2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	e007      	b.n	8007b2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b1e:	3301      	adds	r3, #1
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	b25a      	sxtb	r2, r3
 8007b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007b2e:	e001      	b.n	8007b34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3740      	adds	r7, #64	; 0x40
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b08e      	sub	sp, #56	; 0x38
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10a      	bne.n	8007b74 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	623b      	str	r3, [r7, #32]
}
 8007b70:	bf00      	nop
 8007b72:	e7fe      	b.n	8007b72 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00a      	beq.n	8007b92 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	61fb      	str	r3, [r7, #28]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d103      	bne.n	8007ba2 <xQueueGiveFromISR+0x58>
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <xQueueGiveFromISR+0x5c>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e000      	b.n	8007ba8 <xQueueGiveFromISR+0x5e>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10a      	bne.n	8007bc2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	61bb      	str	r3, [r7, #24]
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bc2:	f002 f9e9 	bl	8009f98 <vPortValidateInterruptPriority>
	__asm volatile
 8007bc6:	f3ef 8211 	mrs	r2, BASEPRI
 8007bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	617a      	str	r2, [r7, #20]
 8007bdc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007bde:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007be0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d22b      	bcs.n	8007c4a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c02:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0c:	d112      	bne.n	8007c34 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d016      	beq.n	8007c44 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	3324      	adds	r3, #36	; 0x24
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 f8c2 	bl	8008da4 <xTaskRemoveFromEventList>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00e      	beq.n	8007c44 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	e007      	b.n	8007c44 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c38:	3301      	adds	r3, #1
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	b25a      	sxtb	r2, r3
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c44:	2301      	movs	r3, #1
 8007c46:	637b      	str	r3, [r7, #52]	; 0x34
 8007c48:	e001      	b.n	8007c4e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c50:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f383 8811 	msr	BASEPRI, r3
}
 8007c58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3738      	adds	r7, #56	; 0x38
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08c      	sub	sp, #48	; 0x30
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <xQueueReceive+0x30>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	623b      	str	r3, [r7, #32]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d103      	bne.n	8007ca2 <xQueueReceive+0x3e>
 8007c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <xQueueReceive+0x42>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <xQueueReceive+0x44>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10a      	bne.n	8007cc2 <xQueueReceive+0x5e>
	__asm volatile
 8007cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb0:	f383 8811 	msr	BASEPRI, r3
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	61fb      	str	r3, [r7, #28]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cc2:	f001 fa2d 	bl	8009120 <xTaskGetSchedulerState>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d102      	bne.n	8007cd2 <xQueueReceive+0x6e>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <xQueueReceive+0x72>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <xQueueReceive+0x74>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <xQueueReceive+0x8e>
	__asm volatile
 8007cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce0:	f383 8811 	msr	BASEPRI, r3
 8007ce4:	f3bf 8f6f 	isb	sy
 8007ce8:	f3bf 8f4f 	dsb	sy
 8007cec:	61bb      	str	r3, [r7, #24]
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cf2:	f002 f86f 	bl	8009dd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d01f      	beq.n	8007d42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d02:	68b9      	ldr	r1, [r7, #8]
 8007d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d06:	f000 fabe 	bl	8008286 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	1e5a      	subs	r2, r3, #1
 8007d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00f      	beq.n	8007d3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	3310      	adds	r3, #16
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f001 f840 	bl	8008da4 <xTaskRemoveFromEventList>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d007      	beq.n	8007d3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d2a:	4b3d      	ldr	r3, [pc, #244]	; (8007e20 <xQueueReceive+0x1bc>)
 8007d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d3a:	f002 f87b 	bl	8009e34 <vPortExitCritical>
				return pdPASS;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e069      	b.n	8007e16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d103      	bne.n	8007d50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d48:	f002 f874 	bl	8009e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	e062      	b.n	8007e16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d56:	f107 0310 	add.w	r3, r7, #16
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f001 f886 	bl	8008e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d60:	2301      	movs	r3, #1
 8007d62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d64:	f002 f866 	bl	8009e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d68:	f000 fdf8 	bl	800895c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d6c:	f002 f832 	bl	8009dd4 <vPortEnterCritical>
 8007d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d76:	b25b      	sxtb	r3, r3
 8007d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7c:	d103      	bne.n	8007d86 <xQueueReceive+0x122>
 8007d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d8c:	b25b      	sxtb	r3, r3
 8007d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d92:	d103      	bne.n	8007d9c <xQueueReceive+0x138>
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d9c:	f002 f84a 	bl	8009e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007da0:	1d3a      	adds	r2, r7, #4
 8007da2:	f107 0310 	add.w	r3, r7, #16
 8007da6:	4611      	mov	r1, r2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f001 f875 	bl	8008e98 <xTaskCheckForTimeOut>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d123      	bne.n	8007dfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007db6:	f000 fade 	bl	8008376 <prvIsQueueEmpty>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d017      	beq.n	8007df0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	3324      	adds	r3, #36	; 0x24
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	4611      	mov	r1, r2
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 ff9b 	bl	8008d04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd0:	f000 fa7f 	bl	80082d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007dd4:	f000 fdd0 	bl	8008978 <xTaskResumeAll>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d189      	bne.n	8007cf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007dde:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <xQueueReceive+0x1bc>)
 8007de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	e780      	b.n	8007cf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007df2:	f000 fa6e 	bl	80082d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007df6:	f000 fdbf 	bl	8008978 <xTaskResumeAll>
 8007dfa:	e77a      	b.n	8007cf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dfe:	f000 fa68 	bl	80082d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e02:	f000 fdb9 	bl	8008978 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e08:	f000 fab5 	bl	8008376 <prvIsQueueEmpty>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f43f af6f 	beq.w	8007cf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3730      	adds	r7, #48	; 0x30
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	e000ed04 	.word	0xe000ed04

08007e24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b08e      	sub	sp, #56	; 0x38
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007e36:	2300      	movs	r3, #0
 8007e38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10a      	bne.n	8007e56 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	623b      	str	r3, [r7, #32]
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00a      	beq.n	8007e74 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	61fb      	str	r3, [r7, #28]
}
 8007e70:	bf00      	nop
 8007e72:	e7fe      	b.n	8007e72 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e74:	f001 f954 	bl	8009120 <xTaskGetSchedulerState>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d102      	bne.n	8007e84 <xQueueSemaphoreTake+0x60>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <xQueueSemaphoreTake+0x64>
 8007e84:	2301      	movs	r3, #1
 8007e86:	e000      	b.n	8007e8a <xQueueSemaphoreTake+0x66>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10a      	bne.n	8007ea4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	61bb      	str	r3, [r7, #24]
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ea4:	f001 ff96 	bl	8009dd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d024      	beq.n	8007efe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	1e5a      	subs	r2, r3, #1
 8007eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d104      	bne.n	8007ece <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007ec4:	f001 faa2 	bl	800940c <pvTaskIncrementMutexHeldCount>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00f      	beq.n	8007ef6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	3310      	adds	r3, #16
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 ff62 	bl	8008da4 <xTaskRemoveFromEventList>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d007      	beq.n	8007ef6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ee6:	4b54      	ldr	r3, [pc, #336]	; (8008038 <xQueueSemaphoreTake+0x214>)
 8007ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ef6:	f001 ff9d 	bl	8009e34 <vPortExitCritical>
				return pdPASS;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e097      	b.n	800802e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d111      	bne.n	8007f28 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	617b      	str	r3, [r7, #20]
}
 8007f1c:	bf00      	nop
 8007f1e:	e7fe      	b.n	8007f1e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007f20:	f001 ff88 	bl	8009e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f24:	2300      	movs	r3, #0
 8007f26:	e082      	b.n	800802e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d106      	bne.n	8007f3c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f2e:	f107 030c 	add.w	r3, r7, #12
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 ff9a 	bl	8008e6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f3c:	f001 ff7a 	bl	8009e34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f40:	f000 fd0c 	bl	800895c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f44:	f001 ff46 	bl	8009dd4 <vPortEnterCritical>
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f4e:	b25b      	sxtb	r3, r3
 8007f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f54:	d103      	bne.n	8007f5e <xQueueSemaphoreTake+0x13a>
 8007f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f64:	b25b      	sxtb	r3, r3
 8007f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6a:	d103      	bne.n	8007f74 <xQueueSemaphoreTake+0x150>
 8007f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f74:	f001 ff5e 	bl	8009e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f78:	463a      	mov	r2, r7
 8007f7a:	f107 030c 	add.w	r3, r7, #12
 8007f7e:	4611      	mov	r1, r2
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 ff89 	bl	8008e98 <xTaskCheckForTimeOut>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d132      	bne.n	8007ff2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f8e:	f000 f9f2 	bl	8008376 <prvIsQueueEmpty>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d026      	beq.n	8007fe6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d109      	bne.n	8007fb4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007fa0:	f001 ff18 	bl	8009dd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f001 f8d7 	bl	800915c <xTaskPriorityInherit>
 8007fae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007fb0:	f001 ff40 	bl	8009e34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb6:	3324      	adds	r3, #36	; 0x24
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	4611      	mov	r1, r2
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 fea1 	bl	8008d04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fc4:	f000 f985 	bl	80082d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fc8:	f000 fcd6 	bl	8008978 <xTaskResumeAll>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f47f af68 	bne.w	8007ea4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007fd4:	4b18      	ldr	r3, [pc, #96]	; (8008038 <xQueueSemaphoreTake+0x214>)
 8007fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	e75e      	b.n	8007ea4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007fe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fe8:	f000 f973 	bl	80082d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fec:	f000 fcc4 	bl	8008978 <xTaskResumeAll>
 8007ff0:	e758      	b.n	8007ea4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ff2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ff4:	f000 f96d 	bl	80082d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ff8:	f000 fcbe 	bl	8008978 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ffe:	f000 f9ba 	bl	8008376 <prvIsQueueEmpty>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	f43f af4d 	beq.w	8007ea4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00d      	beq.n	800802c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008010:	f001 fee0 	bl	8009dd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008016:	f000 f8b4 	bl	8008182 <prvGetDisinheritPriorityAfterTimeout>
 800801a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800801c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008022:	4618      	mov	r0, r3
 8008024:	f001 f970 	bl	8009308 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008028:	f001 ff04 	bl	8009e34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800802c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800802e:	4618      	mov	r0, r3
 8008030:	3738      	adds	r7, #56	; 0x38
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	e000ed04 	.word	0xe000ed04

0800803c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b08e      	sub	sp, #56	; 0x38
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10a      	bne.n	8008068 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	623b      	str	r3, [r7, #32]
}
 8008064:	bf00      	nop
 8008066:	e7fe      	b.n	8008066 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d103      	bne.n	8008076 <xQueueReceiveFromISR+0x3a>
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <xQueueReceiveFromISR+0x3e>
 8008076:	2301      	movs	r3, #1
 8008078:	e000      	b.n	800807c <xQueueReceiveFromISR+0x40>
 800807a:	2300      	movs	r3, #0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10a      	bne.n	8008096 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	61fb      	str	r3, [r7, #28]
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008096:	f001 ff7f 	bl	8009f98 <vPortValidateInterruptPriority>
	__asm volatile
 800809a:	f3ef 8211 	mrs	r2, BASEPRI
 800809e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	61ba      	str	r2, [r7, #24]
 80080b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80080b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d02f      	beq.n	8008122 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80080c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080cc:	68b9      	ldr	r1, [r7, #8]
 80080ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080d0:	f000 f8d9 	bl	8008286 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d6:	1e5a      	subs	r2, r3, #1
 80080d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80080dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e4:	d112      	bne.n	800810c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d016      	beq.n	800811c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	3310      	adds	r3, #16
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 fe56 	bl	8008da4 <xTaskRemoveFromEventList>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00e      	beq.n	800811c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00b      	beq.n	800811c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	601a      	str	r2, [r3, #0]
 800810a:	e007      	b.n	800811c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800810c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008110:	3301      	adds	r3, #1
 8008112:	b2db      	uxtb	r3, r3
 8008114:	b25a      	sxtb	r2, r3
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800811c:	2301      	movs	r3, #1
 800811e:	637b      	str	r3, [r7, #52]	; 0x34
 8008120:	e001      	b.n	8008126 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008122:	2300      	movs	r3, #0
 8008124:	637b      	str	r3, [r7, #52]	; 0x34
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	613b      	str	r3, [r7, #16]
	__asm volatile
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f383 8811 	msr	BASEPRI, r3
}
 8008130:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008134:	4618      	mov	r0, r3
 8008136:	3738      	adds	r7, #56	; 0x38
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10a      	bne.n	8008164 <vQueueDelete+0x28>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	60bb      	str	r3, [r7, #8]
}
 8008160:	bf00      	nop
 8008162:	e7fe      	b.n	8008162 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 f95f 	bl	8008428 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008170:	2b00      	cmp	r3, #0
 8008172:	d102      	bne.n	800817a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f002 f81b 	bl	800a1b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008182:	b480      	push	{r7}
 8008184:	b085      	sub	sp, #20
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818e:	2b00      	cmp	r3, #0
 8008190:	d006      	beq.n	80081a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	e001      	b.n	80081a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80081a0:	2300      	movs	r3, #0
 80081a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80081a4:	68fb      	ldr	r3, [r7, #12]
	}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b086      	sub	sp, #24
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081be:	2300      	movs	r3, #0
 80081c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10d      	bne.n	80081ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d14d      	bne.n	8008274 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	4618      	mov	r0, r3
 80081de:	f001 f825 	bl	800922c <xTaskPriorityDisinherit>
 80081e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	609a      	str	r2, [r3, #8]
 80081ea:	e043      	b.n	8008274 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d119      	bne.n	8008226 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6858      	ldr	r0, [r3, #4]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	461a      	mov	r2, r3
 80081fc:	68b9      	ldr	r1, [r7, #8]
 80081fe:	f002 f923 	bl	800a448 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	441a      	add	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	429a      	cmp	r2, r3
 800821a:	d32b      	bcc.n	8008274 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	605a      	str	r2, [r3, #4]
 8008224:	e026      	b.n	8008274 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	68d8      	ldr	r0, [r3, #12]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	461a      	mov	r2, r3
 8008230:	68b9      	ldr	r1, [r7, #8]
 8008232:	f002 f909 	bl	800a448 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	68da      	ldr	r2, [r3, #12]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	425b      	negs	r3, r3
 8008240:	441a      	add	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	429a      	cmp	r2, r3
 8008250:	d207      	bcs.n	8008262 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	425b      	negs	r3, r3
 800825c:	441a      	add	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b02      	cmp	r3, #2
 8008266:	d105      	bne.n	8008274 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	3b01      	subs	r3, #1
 8008272:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800827c:	697b      	ldr	r3, [r7, #20]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b082      	sub	sp, #8
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008294:	2b00      	cmp	r3, #0
 8008296:	d018      	beq.n	80082ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a0:	441a      	add	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d303      	bcc.n	80082ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68d9      	ldr	r1, [r3, #12]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c2:	461a      	mov	r2, r3
 80082c4:	6838      	ldr	r0, [r7, #0]
 80082c6:	f002 f8bf 	bl	800a448 <memcpy>
	}
}
 80082ca:	bf00      	nop
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082da:	f001 fd7b 	bl	8009dd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082e6:	e011      	b.n	800830c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d012      	beq.n	8008316 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	3324      	adds	r3, #36	; 0x24
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 fd55 	bl	8008da4 <xTaskRemoveFromEventList>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008300:	f000 fe2c 	bl	8008f5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008304:	7bfb      	ldrb	r3, [r7, #15]
 8008306:	3b01      	subs	r3, #1
 8008308:	b2db      	uxtb	r3, r3
 800830a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800830c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008310:	2b00      	cmp	r3, #0
 8008312:	dce9      	bgt.n	80082e8 <prvUnlockQueue+0x16>
 8008314:	e000      	b.n	8008318 <prvUnlockQueue+0x46>
					break;
 8008316:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	22ff      	movs	r2, #255	; 0xff
 800831c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008320:	f001 fd88 	bl	8009e34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008324:	f001 fd56 	bl	8009dd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800832e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008330:	e011      	b.n	8008356 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d012      	beq.n	8008360 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	3310      	adds	r3, #16
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fd30 	bl	8008da4 <xTaskRemoveFromEventList>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800834a:	f000 fe07 	bl	8008f5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800834e:	7bbb      	ldrb	r3, [r7, #14]
 8008350:	3b01      	subs	r3, #1
 8008352:	b2db      	uxtb	r3, r3
 8008354:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008356:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800835a:	2b00      	cmp	r3, #0
 800835c:	dce9      	bgt.n	8008332 <prvUnlockQueue+0x60>
 800835e:	e000      	b.n	8008362 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008360:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	22ff      	movs	r2, #255	; 0xff
 8008366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800836a:	f001 fd63 	bl	8009e34 <vPortExitCritical>
}
 800836e:	bf00      	nop
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800837e:	f001 fd29 	bl	8009dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008386:	2b00      	cmp	r3, #0
 8008388:	d102      	bne.n	8008390 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800838a:	2301      	movs	r3, #1
 800838c:	60fb      	str	r3, [r7, #12]
 800838e:	e001      	b.n	8008394 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008394:	f001 fd4e 	bl	8009e34 <vPortExitCritical>

	return xReturn;
 8008398:	68fb      	ldr	r3, [r7, #12]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b084      	sub	sp, #16
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083aa:	f001 fd13 	bl	8009dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d102      	bne.n	80083c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083ba:	2301      	movs	r3, #1
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	e001      	b.n	80083c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083c0:	2300      	movs	r3, #0
 80083c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083c4:	f001 fd36 	bl	8009e34 <vPortExitCritical>

	return xReturn;
 80083c8:	68fb      	ldr	r3, [r7, #12]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083de:	2300      	movs	r3, #0
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	e014      	b.n	800840e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083e4:	4a0f      	ldr	r2, [pc, #60]	; (8008424 <vQueueAddToRegistry+0x50>)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10b      	bne.n	8008408 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083f0:	490c      	ldr	r1, [pc, #48]	; (8008424 <vQueueAddToRegistry+0x50>)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083fa:	4a0a      	ldr	r2, [pc, #40]	; (8008424 <vQueueAddToRegistry+0x50>)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	00db      	lsls	r3, r3, #3
 8008400:	4413      	add	r3, r2
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008406:	e006      	b.n	8008416 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	3301      	adds	r3, #1
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2b07      	cmp	r3, #7
 8008412:	d9e7      	bls.n	80083e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	20002910 	.word	0x20002910

08008428 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008430:	2300      	movs	r3, #0
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	e016      	b.n	8008464 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008436:	4a10      	ldr	r2, [pc, #64]	; (8008478 <vQueueUnregisterQueue+0x50>)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	4413      	add	r3, r2
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	429a      	cmp	r2, r3
 8008444:	d10b      	bne.n	800845e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008446:	4a0c      	ldr	r2, [pc, #48]	; (8008478 <vQueueUnregisterQueue+0x50>)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2100      	movs	r1, #0
 800844c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008450:	4a09      	ldr	r2, [pc, #36]	; (8008478 <vQueueUnregisterQueue+0x50>)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	00db      	lsls	r3, r3, #3
 8008456:	4413      	add	r3, r2
 8008458:	2200      	movs	r2, #0
 800845a:	605a      	str	r2, [r3, #4]
				break;
 800845c:	e006      	b.n	800846c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3301      	adds	r3, #1
 8008462:	60fb      	str	r3, [r7, #12]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b07      	cmp	r3, #7
 8008468:	d9e5      	bls.n	8008436 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800846a:	bf00      	nop
 800846c:	bf00      	nop
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	20002910 	.word	0x20002910

0800847c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800848c:	f001 fca2 	bl	8009dd4 <vPortEnterCritical>
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008496:	b25b      	sxtb	r3, r3
 8008498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849c:	d103      	bne.n	80084a6 <vQueueWaitForMessageRestricted+0x2a>
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084ac:	b25b      	sxtb	r3, r3
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b2:	d103      	bne.n	80084bc <vQueueWaitForMessageRestricted+0x40>
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084bc:	f001 fcba 	bl	8009e34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d106      	bne.n	80084d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	3324      	adds	r3, #36	; 0x24
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	68b9      	ldr	r1, [r7, #8]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 fc3b 	bl	8008d4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80084d6:	6978      	ldr	r0, [r7, #20]
 80084d8:	f7ff fefb 	bl	80082d2 <prvUnlockQueue>
	}
 80084dc:	bf00      	nop
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b08e      	sub	sp, #56	; 0x38
 80084e8:	af04      	add	r7, sp, #16
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10a      	bne.n	800850e <xTaskCreateStatic+0x2a>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	623b      	str	r3, [r7, #32]
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10a      	bne.n	800852a <xTaskCreateStatic+0x46>
	__asm volatile
 8008514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	61fb      	str	r3, [r7, #28]
}
 8008526:	bf00      	nop
 8008528:	e7fe      	b.n	8008528 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800852a:	235c      	movs	r3, #92	; 0x5c
 800852c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2b5c      	cmp	r3, #92	; 0x5c
 8008532:	d00a      	beq.n	800854a <xTaskCreateStatic+0x66>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	61bb      	str	r3, [r7, #24]
}
 8008546:	bf00      	nop
 8008548:	e7fe      	b.n	8008548 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800854a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854e:	2b00      	cmp	r3, #0
 8008550:	d01e      	beq.n	8008590 <xTaskCreateStatic+0xac>
 8008552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008554:	2b00      	cmp	r3, #0
 8008556:	d01b      	beq.n	8008590 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008560:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	2202      	movs	r2, #2
 8008566:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800856a:	2300      	movs	r3, #0
 800856c:	9303      	str	r3, [sp, #12]
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	9302      	str	r3, [sp, #8]
 8008572:	f107 0314 	add.w	r3, r7, #20
 8008576:	9301      	str	r3, [sp, #4]
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	9300      	str	r3, [sp, #0]
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	68b9      	ldr	r1, [r7, #8]
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 f850 	bl	8008628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800858a:	f000 f8dd 	bl	8008748 <prvAddNewTaskToReadyList>
 800858e:	e001      	b.n	8008594 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008590:	2300      	movs	r3, #0
 8008592:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008594:	697b      	ldr	r3, [r7, #20]
	}
 8008596:	4618      	mov	r0, r3
 8008598:	3728      	adds	r7, #40	; 0x28
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b08c      	sub	sp, #48	; 0x30
 80085a2:	af04      	add	r7, sp, #16
 80085a4:	60f8      	str	r0, [r7, #12]
 80085a6:	60b9      	str	r1, [r7, #8]
 80085a8:	603b      	str	r3, [r7, #0]
 80085aa:	4613      	mov	r3, r2
 80085ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80085ae:	88fb      	ldrh	r3, [r7, #6]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f001 fd30 	bl	800a018 <pvPortMalloc>
 80085b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00e      	beq.n	80085de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80085c0:	205c      	movs	r0, #92	; 0x5c
 80085c2:	f001 fd29 	bl	800a018 <pvPortMalloc>
 80085c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	631a      	str	r2, [r3, #48]	; 0x30
 80085d4:	e005      	b.n	80085e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80085d6:	6978      	ldr	r0, [r7, #20]
 80085d8:	f001 fdea 	bl	800a1b0 <vPortFree>
 80085dc:	e001      	b.n	80085e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80085de:	2300      	movs	r3, #0
 80085e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d017      	beq.n	8008618 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085f0:	88fa      	ldrh	r2, [r7, #6]
 80085f2:	2300      	movs	r3, #0
 80085f4:	9303      	str	r3, [sp, #12]
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	9302      	str	r3, [sp, #8]
 80085fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68b9      	ldr	r1, [r7, #8]
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 f80e 	bl	8008628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800860c:	69f8      	ldr	r0, [r7, #28]
 800860e:	f000 f89b 	bl	8008748 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008612:	2301      	movs	r3, #1
 8008614:	61bb      	str	r3, [r7, #24]
 8008616:	e002      	b.n	800861e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008618:	f04f 33ff 	mov.w	r3, #4294967295
 800861c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800861e:	69bb      	ldr	r3, [r7, #24]
	}
 8008620:	4618      	mov	r0, r3
 8008622:	3720      	adds	r7, #32
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b088      	sub	sp, #32
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	461a      	mov	r2, r3
 8008640:	21a5      	movs	r1, #165	; 0xa5
 8008642:	f001 ff0f 	bl	800a464 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008650:	3b01      	subs	r3, #1
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	f023 0307 	bic.w	r3, r3, #7
 800865e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <prvInitialiseNewTask+0x58>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	617b      	str	r3, [r7, #20]
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d01f      	beq.n	80086c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008686:	2300      	movs	r3, #0
 8008688:	61fb      	str	r3, [r7, #28]
 800868a:	e012      	b.n	80086b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	4413      	add	r3, r2
 8008692:	7819      	ldrb	r1, [r3, #0]
 8008694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	4413      	add	r3, r2
 800869a:	3334      	adds	r3, #52	; 0x34
 800869c:	460a      	mov	r2, r1
 800869e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	4413      	add	r3, r2
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d006      	beq.n	80086ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	3301      	adds	r3, #1
 80086b0:	61fb      	str	r3, [r7, #28]
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	2b0f      	cmp	r3, #15
 80086b6:	d9e9      	bls.n	800868c <prvInitialiseNewTask+0x64>
 80086b8:	e000      	b.n	80086bc <prvInitialiseNewTask+0x94>
			{
				break;
 80086ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086c4:	e003      	b.n	80086ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	2b37      	cmp	r3, #55	; 0x37
 80086d2:	d901      	bls.n	80086d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086d4:	2337      	movs	r3, #55	; 0x37
 80086d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	2200      	movs	r2, #0
 80086e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	3304      	adds	r3, #4
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7fe fe56 	bl	80073a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	3318      	adds	r3, #24
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fe fe51 	bl	80073a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008702:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800870a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008712:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008716:	2200      	movs	r2, #0
 8008718:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	68f9      	ldr	r1, [r7, #12]
 8008726:	69b8      	ldr	r0, [r7, #24]
 8008728:	f001 fa26 	bl	8009b78 <pxPortInitialiseStack>
 800872c:	4602      	mov	r2, r0
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800873c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800873e:	bf00      	nop
 8008740:	3720      	adds	r7, #32
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
	...

08008748 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008750:	f001 fb40 	bl	8009dd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008754:	4b2d      	ldr	r3, [pc, #180]	; (800880c <prvAddNewTaskToReadyList+0xc4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3301      	adds	r3, #1
 800875a:	4a2c      	ldr	r2, [pc, #176]	; (800880c <prvAddNewTaskToReadyList+0xc4>)
 800875c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800875e:	4b2c      	ldr	r3, [pc, #176]	; (8008810 <prvAddNewTaskToReadyList+0xc8>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d109      	bne.n	800877a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008766:	4a2a      	ldr	r2, [pc, #168]	; (8008810 <prvAddNewTaskToReadyList+0xc8>)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800876c:	4b27      	ldr	r3, [pc, #156]	; (800880c <prvAddNewTaskToReadyList+0xc4>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d110      	bne.n	8008796 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008774:	f000 fc16 	bl	8008fa4 <prvInitialiseTaskLists>
 8008778:	e00d      	b.n	8008796 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800877a:	4b26      	ldr	r3, [pc, #152]	; (8008814 <prvAddNewTaskToReadyList+0xcc>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d109      	bne.n	8008796 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008782:	4b23      	ldr	r3, [pc, #140]	; (8008810 <prvAddNewTaskToReadyList+0xc8>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878c:	429a      	cmp	r2, r3
 800878e:	d802      	bhi.n	8008796 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008790:	4a1f      	ldr	r2, [pc, #124]	; (8008810 <prvAddNewTaskToReadyList+0xc8>)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008796:	4b20      	ldr	r3, [pc, #128]	; (8008818 <prvAddNewTaskToReadyList+0xd0>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3301      	adds	r3, #1
 800879c:	4a1e      	ldr	r2, [pc, #120]	; (8008818 <prvAddNewTaskToReadyList+0xd0>)
 800879e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80087a0:	4b1d      	ldr	r3, [pc, #116]	; (8008818 <prvAddNewTaskToReadyList+0xd0>)
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ac:	4b1b      	ldr	r3, [pc, #108]	; (800881c <prvAddNewTaskToReadyList+0xd4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d903      	bls.n	80087bc <prvAddNewTaskToReadyList+0x74>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	4a18      	ldr	r2, [pc, #96]	; (800881c <prvAddNewTaskToReadyList+0xd4>)
 80087ba:	6013      	str	r3, [r2, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4a15      	ldr	r2, [pc, #84]	; (8008820 <prvAddNewTaskToReadyList+0xd8>)
 80087ca:	441a      	add	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	3304      	adds	r3, #4
 80087d0:	4619      	mov	r1, r3
 80087d2:	4610      	mov	r0, r2
 80087d4:	f7fe fdf1 	bl	80073ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087d8:	f001 fb2c 	bl	8009e34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087dc:	4b0d      	ldr	r3, [pc, #52]	; (8008814 <prvAddNewTaskToReadyList+0xcc>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00e      	beq.n	8008802 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087e4:	4b0a      	ldr	r3, [pc, #40]	; (8008810 <prvAddNewTaskToReadyList+0xc8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d207      	bcs.n	8008802 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087f2:	4b0c      	ldr	r3, [pc, #48]	; (8008824 <prvAddNewTaskToReadyList+0xdc>)
 80087f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008802:	bf00      	nop
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	20000dc0 	.word	0x20000dc0
 8008810:	200008ec 	.word	0x200008ec
 8008814:	20000dcc 	.word	0x20000dcc
 8008818:	20000ddc 	.word	0x20000ddc
 800881c:	20000dc8 	.word	0x20000dc8
 8008820:	200008f0 	.word	0x200008f0
 8008824:	e000ed04 	.word	0xe000ed04

08008828 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008830:	2300      	movs	r3, #0
 8008832:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d017      	beq.n	800886a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800883a:	4b13      	ldr	r3, [pc, #76]	; (8008888 <vTaskDelay+0x60>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00a      	beq.n	8008858 <vTaskDelay+0x30>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	60bb      	str	r3, [r7, #8]
}
 8008854:	bf00      	nop
 8008856:	e7fe      	b.n	8008856 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008858:	f000 f880 	bl	800895c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800885c:	2100      	movs	r1, #0
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fde8 	bl	8009434 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008864:	f000 f888 	bl	8008978 <xTaskResumeAll>
 8008868:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d107      	bne.n	8008880 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008870:	4b06      	ldr	r3, [pc, #24]	; (800888c <vTaskDelay+0x64>)
 8008872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008880:	bf00      	nop
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	20000de8 	.word	0x20000de8
 800888c:	e000ed04 	.word	0xe000ed04

08008890 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b08a      	sub	sp, #40	; 0x28
 8008894:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008896:	2300      	movs	r3, #0
 8008898:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800889a:	2300      	movs	r3, #0
 800889c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800889e:	463a      	mov	r2, r7
 80088a0:	1d39      	adds	r1, r7, #4
 80088a2:	f107 0308 	add.w	r3, r7, #8
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe fd26 	bl	80072f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	9202      	str	r2, [sp, #8]
 80088b4:	9301      	str	r3, [sp, #4]
 80088b6:	2300      	movs	r3, #0
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	2300      	movs	r3, #0
 80088bc:	460a      	mov	r2, r1
 80088be:	4921      	ldr	r1, [pc, #132]	; (8008944 <vTaskStartScheduler+0xb4>)
 80088c0:	4821      	ldr	r0, [pc, #132]	; (8008948 <vTaskStartScheduler+0xb8>)
 80088c2:	f7ff fe0f 	bl	80084e4 <xTaskCreateStatic>
 80088c6:	4603      	mov	r3, r0
 80088c8:	4a20      	ldr	r2, [pc, #128]	; (800894c <vTaskStartScheduler+0xbc>)
 80088ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088cc:	4b1f      	ldr	r3, [pc, #124]	; (800894c <vTaskStartScheduler+0xbc>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d002      	beq.n	80088da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088d4:	2301      	movs	r3, #1
 80088d6:	617b      	str	r3, [r7, #20]
 80088d8:	e001      	b.n	80088de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088da:	2300      	movs	r3, #0
 80088dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d102      	bne.n	80088ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088e4:	f000 fdfa 	bl	80094dc <xTimerCreateTimerTask>
 80088e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d116      	bne.n	800891e <vTaskStartScheduler+0x8e>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	613b      	str	r3, [r7, #16]
}
 8008902:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008904:	4b12      	ldr	r3, [pc, #72]	; (8008950 <vTaskStartScheduler+0xc0>)
 8008906:	f04f 32ff 	mov.w	r2, #4294967295
 800890a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800890c:	4b11      	ldr	r3, [pc, #68]	; (8008954 <vTaskStartScheduler+0xc4>)
 800890e:	2201      	movs	r2, #1
 8008910:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008912:	4b11      	ldr	r3, [pc, #68]	; (8008958 <vTaskStartScheduler+0xc8>)
 8008914:	2200      	movs	r2, #0
 8008916:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008918:	f001 f9ba 	bl	8009c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800891c:	e00e      	b.n	800893c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008924:	d10a      	bne.n	800893c <vTaskStartScheduler+0xac>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	60fb      	str	r3, [r7, #12]
}
 8008938:	bf00      	nop
 800893a:	e7fe      	b.n	800893a <vTaskStartScheduler+0xaa>
}
 800893c:	bf00      	nop
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	0800e60c 	.word	0x0800e60c
 8008948:	08008f75 	.word	0x08008f75
 800894c:	20000de4 	.word	0x20000de4
 8008950:	20000de0 	.word	0x20000de0
 8008954:	20000dcc 	.word	0x20000dcc
 8008958:	20000dc4 	.word	0x20000dc4

0800895c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800895c:	b480      	push	{r7}
 800895e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008960:	4b04      	ldr	r3, [pc, #16]	; (8008974 <vTaskSuspendAll+0x18>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3301      	adds	r3, #1
 8008966:	4a03      	ldr	r2, [pc, #12]	; (8008974 <vTaskSuspendAll+0x18>)
 8008968:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800896a:	bf00      	nop
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	20000de8 	.word	0x20000de8

08008978 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800897e:	2300      	movs	r3, #0
 8008980:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008982:	2300      	movs	r3, #0
 8008984:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008986:	4b42      	ldr	r3, [pc, #264]	; (8008a90 <xTaskResumeAll+0x118>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10a      	bne.n	80089a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	603b      	str	r3, [r7, #0]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80089a4:	f001 fa16 	bl	8009dd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089a8:	4b39      	ldr	r3, [pc, #228]	; (8008a90 <xTaskResumeAll+0x118>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3b01      	subs	r3, #1
 80089ae:	4a38      	ldr	r2, [pc, #224]	; (8008a90 <xTaskResumeAll+0x118>)
 80089b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089b2:	4b37      	ldr	r3, [pc, #220]	; (8008a90 <xTaskResumeAll+0x118>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d162      	bne.n	8008a80 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089ba:	4b36      	ldr	r3, [pc, #216]	; (8008a94 <xTaskResumeAll+0x11c>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d05e      	beq.n	8008a80 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089c2:	e02f      	b.n	8008a24 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089c4:	4b34      	ldr	r3, [pc, #208]	; (8008a98 <xTaskResumeAll+0x120>)
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	3318      	adds	r3, #24
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fe fd4f 	bl	8007474 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	3304      	adds	r3, #4
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe fd4a 	bl	8007474 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e4:	4b2d      	ldr	r3, [pc, #180]	; (8008a9c <xTaskResumeAll+0x124>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d903      	bls.n	80089f4 <xTaskResumeAll+0x7c>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f0:	4a2a      	ldr	r2, [pc, #168]	; (8008a9c <xTaskResumeAll+0x124>)
 80089f2:	6013      	str	r3, [r2, #0]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f8:	4613      	mov	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	4a27      	ldr	r2, [pc, #156]	; (8008aa0 <xTaskResumeAll+0x128>)
 8008a02:	441a      	add	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	3304      	adds	r3, #4
 8008a08:	4619      	mov	r1, r3
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	f7fe fcd5 	bl	80073ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a14:	4b23      	ldr	r3, [pc, #140]	; (8008aa4 <xTaskResumeAll+0x12c>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d302      	bcc.n	8008a24 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008a1e:	4b22      	ldr	r3, [pc, #136]	; (8008aa8 <xTaskResumeAll+0x130>)
 8008a20:	2201      	movs	r2, #1
 8008a22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a24:	4b1c      	ldr	r3, [pc, #112]	; (8008a98 <xTaskResumeAll+0x120>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1cb      	bne.n	80089c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a32:	f000 fb55 	bl	80090e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a36:	4b1d      	ldr	r3, [pc, #116]	; (8008aac <xTaskResumeAll+0x134>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d010      	beq.n	8008a64 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a42:	f000 f847 	bl	8008ad4 <xTaskIncrementTick>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008a4c:	4b16      	ldr	r3, [pc, #88]	; (8008aa8 <xTaskResumeAll+0x130>)
 8008a4e:	2201      	movs	r2, #1
 8008a50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1f1      	bne.n	8008a42 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008a5e:	4b13      	ldr	r3, [pc, #76]	; (8008aac <xTaskResumeAll+0x134>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a64:	4b10      	ldr	r3, [pc, #64]	; (8008aa8 <xTaskResumeAll+0x130>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d009      	beq.n	8008a80 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a70:	4b0f      	ldr	r3, [pc, #60]	; (8008ab0 <xTaskResumeAll+0x138>)
 8008a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a76:	601a      	str	r2, [r3, #0]
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a80:	f001 f9d8 	bl	8009e34 <vPortExitCritical>

	return xAlreadyYielded;
 8008a84:	68bb      	ldr	r3, [r7, #8]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20000de8 	.word	0x20000de8
 8008a94:	20000dc0 	.word	0x20000dc0
 8008a98:	20000d80 	.word	0x20000d80
 8008a9c:	20000dc8 	.word	0x20000dc8
 8008aa0:	200008f0 	.word	0x200008f0
 8008aa4:	200008ec 	.word	0x200008ec
 8008aa8:	20000dd4 	.word	0x20000dd4
 8008aac:	20000dd0 	.word	0x20000dd0
 8008ab0:	e000ed04 	.word	0xe000ed04

08008ab4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008aba:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <xTaskGetTickCount+0x1c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ac0:	687b      	ldr	r3, [r7, #4]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	20000dc4 	.word	0x20000dc4

08008ad4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ada:	2300      	movs	r3, #0
 8008adc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ade:	4b4f      	ldr	r3, [pc, #316]	; (8008c1c <xTaskIncrementTick+0x148>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f040 808f 	bne.w	8008c06 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ae8:	4b4d      	ldr	r3, [pc, #308]	; (8008c20 <xTaskIncrementTick+0x14c>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3301      	adds	r3, #1
 8008aee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008af0:	4a4b      	ldr	r2, [pc, #300]	; (8008c20 <xTaskIncrementTick+0x14c>)
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d120      	bne.n	8008b3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008afc:	4b49      	ldr	r3, [pc, #292]	; (8008c24 <xTaskIncrementTick+0x150>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00a      	beq.n	8008b1c <xTaskIncrementTick+0x48>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	603b      	str	r3, [r7, #0]
}
 8008b18:	bf00      	nop
 8008b1a:	e7fe      	b.n	8008b1a <xTaskIncrementTick+0x46>
 8008b1c:	4b41      	ldr	r3, [pc, #260]	; (8008c24 <xTaskIncrementTick+0x150>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	4b41      	ldr	r3, [pc, #260]	; (8008c28 <xTaskIncrementTick+0x154>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a3f      	ldr	r2, [pc, #252]	; (8008c24 <xTaskIncrementTick+0x150>)
 8008b28:	6013      	str	r3, [r2, #0]
 8008b2a:	4a3f      	ldr	r2, [pc, #252]	; (8008c28 <xTaskIncrementTick+0x154>)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6013      	str	r3, [r2, #0]
 8008b30:	4b3e      	ldr	r3, [pc, #248]	; (8008c2c <xTaskIncrementTick+0x158>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3301      	adds	r3, #1
 8008b36:	4a3d      	ldr	r2, [pc, #244]	; (8008c2c <xTaskIncrementTick+0x158>)
 8008b38:	6013      	str	r3, [r2, #0]
 8008b3a:	f000 fad1 	bl	80090e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b3e:	4b3c      	ldr	r3, [pc, #240]	; (8008c30 <xTaskIncrementTick+0x15c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d349      	bcc.n	8008bdc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b48:	4b36      	ldr	r3, [pc, #216]	; (8008c24 <xTaskIncrementTick+0x150>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d104      	bne.n	8008b5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b52:	4b37      	ldr	r3, [pc, #220]	; (8008c30 <xTaskIncrementTick+0x15c>)
 8008b54:	f04f 32ff 	mov.w	r2, #4294967295
 8008b58:	601a      	str	r2, [r3, #0]
					break;
 8008b5a:	e03f      	b.n	8008bdc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b5c:	4b31      	ldr	r3, [pc, #196]	; (8008c24 <xTaskIncrementTick+0x150>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d203      	bcs.n	8008b7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b74:	4a2e      	ldr	r2, [pc, #184]	; (8008c30 <xTaskIncrementTick+0x15c>)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b7a:	e02f      	b.n	8008bdc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fe fc77 	bl	8007474 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	3318      	adds	r3, #24
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe fc6e 	bl	8007474 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b9c:	4b25      	ldr	r3, [pc, #148]	; (8008c34 <xTaskIncrementTick+0x160>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d903      	bls.n	8008bac <xTaskIncrementTick+0xd8>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba8:	4a22      	ldr	r2, [pc, #136]	; (8008c34 <xTaskIncrementTick+0x160>)
 8008baa:	6013      	str	r3, [r2, #0]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4a1f      	ldr	r2, [pc, #124]	; (8008c38 <xTaskIncrementTick+0x164>)
 8008bba:	441a      	add	r2, r3
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	f7fe fbf9 	bl	80073ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bcc:	4b1b      	ldr	r3, [pc, #108]	; (8008c3c <xTaskIncrementTick+0x168>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d3b8      	bcc.n	8008b48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bda:	e7b5      	b.n	8008b48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bdc:	4b17      	ldr	r3, [pc, #92]	; (8008c3c <xTaskIncrementTick+0x168>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be2:	4915      	ldr	r1, [pc, #84]	; (8008c38 <xTaskIncrementTick+0x164>)
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	440b      	add	r3, r1
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d901      	bls.n	8008bf8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008bf8:	4b11      	ldr	r3, [pc, #68]	; (8008c40 <xTaskIncrementTick+0x16c>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d007      	beq.n	8008c10 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008c00:	2301      	movs	r3, #1
 8008c02:	617b      	str	r3, [r7, #20]
 8008c04:	e004      	b.n	8008c10 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c06:	4b0f      	ldr	r3, [pc, #60]	; (8008c44 <xTaskIncrementTick+0x170>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	4a0d      	ldr	r2, [pc, #52]	; (8008c44 <xTaskIncrementTick+0x170>)
 8008c0e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c10:	697b      	ldr	r3, [r7, #20]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	20000de8 	.word	0x20000de8
 8008c20:	20000dc4 	.word	0x20000dc4
 8008c24:	20000d78 	.word	0x20000d78
 8008c28:	20000d7c 	.word	0x20000d7c
 8008c2c:	20000dd8 	.word	0x20000dd8
 8008c30:	20000de0 	.word	0x20000de0
 8008c34:	20000dc8 	.word	0x20000dc8
 8008c38:	200008f0 	.word	0x200008f0
 8008c3c:	200008ec 	.word	0x200008ec
 8008c40:	20000dd4 	.word	0x20000dd4
 8008c44:	20000dd0 	.word	0x20000dd0

08008c48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c4e:	4b28      	ldr	r3, [pc, #160]	; (8008cf0 <vTaskSwitchContext+0xa8>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c56:	4b27      	ldr	r3, [pc, #156]	; (8008cf4 <vTaskSwitchContext+0xac>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c5c:	e041      	b.n	8008ce2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008c5e:	4b25      	ldr	r3, [pc, #148]	; (8008cf4 <vTaskSwitchContext+0xac>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c64:	4b24      	ldr	r3, [pc, #144]	; (8008cf8 <vTaskSwitchContext+0xb0>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	60fb      	str	r3, [r7, #12]
 8008c6a:	e010      	b.n	8008c8e <vTaskSwitchContext+0x46>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10a      	bne.n	8008c88 <vTaskSwitchContext+0x40>
	__asm volatile
 8008c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	607b      	str	r3, [r7, #4]
}
 8008c84:	bf00      	nop
 8008c86:	e7fe      	b.n	8008c86 <vTaskSwitchContext+0x3e>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	60fb      	str	r3, [r7, #12]
 8008c8e:	491b      	ldr	r1, [pc, #108]	; (8008cfc <vTaskSwitchContext+0xb4>)
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4613      	mov	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	440b      	add	r3, r1
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0e4      	beq.n	8008c6c <vTaskSwitchContext+0x24>
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4a13      	ldr	r2, [pc, #76]	; (8008cfc <vTaskSwitchContext+0xb4>)
 8008cae:	4413      	add	r3, r2
 8008cb0:	60bb      	str	r3, [r7, #8]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	605a      	str	r2, [r3, #4]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	3308      	adds	r3, #8
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d104      	bne.n	8008cd2 <vTaskSwitchContext+0x8a>
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	605a      	str	r2, [r3, #4]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	4a09      	ldr	r2, [pc, #36]	; (8008d00 <vTaskSwitchContext+0xb8>)
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	4a06      	ldr	r2, [pc, #24]	; (8008cf8 <vTaskSwitchContext+0xb0>)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6013      	str	r3, [r2, #0]
}
 8008ce2:	bf00      	nop
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	20000de8 	.word	0x20000de8
 8008cf4:	20000dd4 	.word	0x20000dd4
 8008cf8:	20000dc8 	.word	0x20000dc8
 8008cfc:	200008f0 	.word	0x200008f0
 8008d00:	200008ec 	.word	0x200008ec

08008d04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	60fb      	str	r3, [r7, #12]
}
 8008d26:	bf00      	nop
 8008d28:	e7fe      	b.n	8008d28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d2a:	4b07      	ldr	r3, [pc, #28]	; (8008d48 <vTaskPlaceOnEventList+0x44>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3318      	adds	r3, #24
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7fe fb65 	bl	8007402 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d38:	2101      	movs	r1, #1
 8008d3a:	6838      	ldr	r0, [r7, #0]
 8008d3c:	f000 fb7a 	bl	8009434 <prvAddCurrentTaskToDelayedList>
}
 8008d40:	bf00      	nop
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	200008ec 	.word	0x200008ec

08008d4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10a      	bne.n	8008d74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	617b      	str	r3, [r7, #20]
}
 8008d70:	bf00      	nop
 8008d72:	e7fe      	b.n	8008d72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d74:	4b0a      	ldr	r3, [pc, #40]	; (8008da0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3318      	adds	r3, #24
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f7fe fb1c 	bl	80073ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008d88:	f04f 33ff 	mov.w	r3, #4294967295
 8008d8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	68b8      	ldr	r0, [r7, #8]
 8008d92:	f000 fb4f 	bl	8009434 <prvAddCurrentTaskToDelayedList>
	}
 8008d96:	bf00      	nop
 8008d98:	3718      	adds	r7, #24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	200008ec 	.word	0x200008ec

08008da4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10a      	bne.n	8008dd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	60fb      	str	r3, [r7, #12]
}
 8008dcc:	bf00      	nop
 8008dce:	e7fe      	b.n	8008dce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	3318      	adds	r3, #24
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fe fb4d 	bl	8007474 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dda:	4b1e      	ldr	r3, [pc, #120]	; (8008e54 <xTaskRemoveFromEventList+0xb0>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d11d      	bne.n	8008e1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	3304      	adds	r3, #4
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe fb44 	bl	8007474 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df0:	4b19      	ldr	r3, [pc, #100]	; (8008e58 <xTaskRemoveFromEventList+0xb4>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d903      	bls.n	8008e00 <xTaskRemoveFromEventList+0x5c>
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfc:	4a16      	ldr	r2, [pc, #88]	; (8008e58 <xTaskRemoveFromEventList+0xb4>)
 8008dfe:	6013      	str	r3, [r2, #0]
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e04:	4613      	mov	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4a13      	ldr	r2, [pc, #76]	; (8008e5c <xTaskRemoveFromEventList+0xb8>)
 8008e0e:	441a      	add	r2, r3
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	3304      	adds	r3, #4
 8008e14:	4619      	mov	r1, r3
 8008e16:	4610      	mov	r0, r2
 8008e18:	f7fe facf 	bl	80073ba <vListInsertEnd>
 8008e1c:	e005      	b.n	8008e2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	3318      	adds	r3, #24
 8008e22:	4619      	mov	r1, r3
 8008e24:	480e      	ldr	r0, [pc, #56]	; (8008e60 <xTaskRemoveFromEventList+0xbc>)
 8008e26:	f7fe fac8 	bl	80073ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <xTaskRemoveFromEventList+0xc0>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d905      	bls.n	8008e44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e3c:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <xTaskRemoveFromEventList+0xc4>)
 8008e3e:	2201      	movs	r2, #1
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	e001      	b.n	8008e48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008e44:	2300      	movs	r3, #0
 8008e46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e48:	697b      	ldr	r3, [r7, #20]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	20000de8 	.word	0x20000de8
 8008e58:	20000dc8 	.word	0x20000dc8
 8008e5c:	200008f0 	.word	0x200008f0
 8008e60:	20000d80 	.word	0x20000d80
 8008e64:	200008ec 	.word	0x200008ec
 8008e68:	20000dd4 	.word	0x20000dd4

08008e6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e74:	4b06      	ldr	r3, [pc, #24]	; (8008e90 <vTaskInternalSetTimeOutState+0x24>)
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e7c:	4b05      	ldr	r3, [pc, #20]	; (8008e94 <vTaskInternalSetTimeOutState+0x28>)
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	605a      	str	r2, [r3, #4]
}
 8008e84:	bf00      	nop
 8008e86:	370c      	adds	r7, #12
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	20000dd8 	.word	0x20000dd8
 8008e94:	20000dc4 	.word	0x20000dc4

08008e98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10a      	bne.n	8008ebe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	613b      	str	r3, [r7, #16]
}
 8008eba:	bf00      	nop
 8008ebc:	e7fe      	b.n	8008ebc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10a      	bne.n	8008eda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	60fb      	str	r3, [r7, #12]
}
 8008ed6:	bf00      	nop
 8008ed8:	e7fe      	b.n	8008ed8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008eda:	f000 ff7b 	bl	8009dd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ede:	4b1d      	ldr	r3, [pc, #116]	; (8008f54 <xTaskCheckForTimeOut+0xbc>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	69ba      	ldr	r2, [r7, #24]
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef6:	d102      	bne.n	8008efe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	61fb      	str	r3, [r7, #28]
 8008efc:	e023      	b.n	8008f46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	4b15      	ldr	r3, [pc, #84]	; (8008f58 <xTaskCheckForTimeOut+0xc0>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d007      	beq.n	8008f1a <xTaskCheckForTimeOut+0x82>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	69ba      	ldr	r2, [r7, #24]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d302      	bcc.n	8008f1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f14:	2301      	movs	r3, #1
 8008f16:	61fb      	str	r3, [r7, #28]
 8008f18:	e015      	b.n	8008f46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d20b      	bcs.n	8008f3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	1ad2      	subs	r2, r2, r3
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7ff ff9b 	bl	8008e6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f36:	2300      	movs	r3, #0
 8008f38:	61fb      	str	r3, [r7, #28]
 8008f3a:	e004      	b.n	8008f46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f42:	2301      	movs	r3, #1
 8008f44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f46:	f000 ff75 	bl	8009e34 <vPortExitCritical>

	return xReturn;
 8008f4a:	69fb      	ldr	r3, [r7, #28]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3720      	adds	r7, #32
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	20000dc4 	.word	0x20000dc4
 8008f58:	20000dd8 	.word	0x20000dd8

08008f5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f60:	4b03      	ldr	r3, [pc, #12]	; (8008f70 <vTaskMissedYield+0x14>)
 8008f62:	2201      	movs	r2, #1
 8008f64:	601a      	str	r2, [r3, #0]
}
 8008f66:	bf00      	nop
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	20000dd4 	.word	0x20000dd4

08008f74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f7c:	f000 f852 	bl	8009024 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f80:	4b06      	ldr	r3, [pc, #24]	; (8008f9c <prvIdleTask+0x28>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d9f9      	bls.n	8008f7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f88:	4b05      	ldr	r3, [pc, #20]	; (8008fa0 <prvIdleTask+0x2c>)
 8008f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f98:	e7f0      	b.n	8008f7c <prvIdleTask+0x8>
 8008f9a:	bf00      	nop
 8008f9c:	200008f0 	.word	0x200008f0
 8008fa0:	e000ed04 	.word	0xe000ed04

08008fa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008faa:	2300      	movs	r3, #0
 8008fac:	607b      	str	r3, [r7, #4]
 8008fae:	e00c      	b.n	8008fca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4a12      	ldr	r2, [pc, #72]	; (8009004 <prvInitialiseTaskLists+0x60>)
 8008fbc:	4413      	add	r3, r2
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe f9ce 	bl	8007360 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	607b      	str	r3, [r7, #4]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2b37      	cmp	r3, #55	; 0x37
 8008fce:	d9ef      	bls.n	8008fb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fd0:	480d      	ldr	r0, [pc, #52]	; (8009008 <prvInitialiseTaskLists+0x64>)
 8008fd2:	f7fe f9c5 	bl	8007360 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fd6:	480d      	ldr	r0, [pc, #52]	; (800900c <prvInitialiseTaskLists+0x68>)
 8008fd8:	f7fe f9c2 	bl	8007360 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fdc:	480c      	ldr	r0, [pc, #48]	; (8009010 <prvInitialiseTaskLists+0x6c>)
 8008fde:	f7fe f9bf 	bl	8007360 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fe2:	480c      	ldr	r0, [pc, #48]	; (8009014 <prvInitialiseTaskLists+0x70>)
 8008fe4:	f7fe f9bc 	bl	8007360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fe8:	480b      	ldr	r0, [pc, #44]	; (8009018 <prvInitialiseTaskLists+0x74>)
 8008fea:	f7fe f9b9 	bl	8007360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fee:	4b0b      	ldr	r3, [pc, #44]	; (800901c <prvInitialiseTaskLists+0x78>)
 8008ff0:	4a05      	ldr	r2, [pc, #20]	; (8009008 <prvInitialiseTaskLists+0x64>)
 8008ff2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ff4:	4b0a      	ldr	r3, [pc, #40]	; (8009020 <prvInitialiseTaskLists+0x7c>)
 8008ff6:	4a05      	ldr	r2, [pc, #20]	; (800900c <prvInitialiseTaskLists+0x68>)
 8008ff8:	601a      	str	r2, [r3, #0]
}
 8008ffa:	bf00      	nop
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	200008f0 	.word	0x200008f0
 8009008:	20000d50 	.word	0x20000d50
 800900c:	20000d64 	.word	0x20000d64
 8009010:	20000d80 	.word	0x20000d80
 8009014:	20000d94 	.word	0x20000d94
 8009018:	20000dac 	.word	0x20000dac
 800901c:	20000d78 	.word	0x20000d78
 8009020:	20000d7c 	.word	0x20000d7c

08009024 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800902a:	e019      	b.n	8009060 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800902c:	f000 fed2 	bl	8009dd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009030:	4b10      	ldr	r3, [pc, #64]	; (8009074 <prvCheckTasksWaitingTermination+0x50>)
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	3304      	adds	r3, #4
 800903c:	4618      	mov	r0, r3
 800903e:	f7fe fa19 	bl	8007474 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009042:	4b0d      	ldr	r3, [pc, #52]	; (8009078 <prvCheckTasksWaitingTermination+0x54>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3b01      	subs	r3, #1
 8009048:	4a0b      	ldr	r2, [pc, #44]	; (8009078 <prvCheckTasksWaitingTermination+0x54>)
 800904a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800904c:	4b0b      	ldr	r3, [pc, #44]	; (800907c <prvCheckTasksWaitingTermination+0x58>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3b01      	subs	r3, #1
 8009052:	4a0a      	ldr	r2, [pc, #40]	; (800907c <prvCheckTasksWaitingTermination+0x58>)
 8009054:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009056:	f000 feed 	bl	8009e34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f810 	bl	8009080 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009060:	4b06      	ldr	r3, [pc, #24]	; (800907c <prvCheckTasksWaitingTermination+0x58>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e1      	bne.n	800902c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20000d94 	.word	0x20000d94
 8009078:	20000dc0 	.word	0x20000dc0
 800907c:	20000da8 	.word	0x20000da8

08009080 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800908e:	2b00      	cmp	r3, #0
 8009090:	d108      	bne.n	80090a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009096:	4618      	mov	r0, r3
 8009098:	f001 f88a 	bl	800a1b0 <vPortFree>
				vPortFree( pxTCB );
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 f887 	bl	800a1b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090a2:	e018      	b.n	80090d6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d103      	bne.n	80090b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f001 f87e 	bl	800a1b0 <vPortFree>
	}
 80090b4:	e00f      	b.n	80090d6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d00a      	beq.n	80090d6 <prvDeleteTCB+0x56>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	60fb      	str	r3, [r7, #12]
}
 80090d2:	bf00      	nop
 80090d4:	e7fe      	b.n	80090d4 <prvDeleteTCB+0x54>
	}
 80090d6:	bf00      	nop
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090e6:	4b0c      	ldr	r3, [pc, #48]	; (8009118 <prvResetNextTaskUnblockTime+0x38>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d104      	bne.n	80090fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090f0:	4b0a      	ldr	r3, [pc, #40]	; (800911c <prvResetNextTaskUnblockTime+0x3c>)
 80090f2:	f04f 32ff 	mov.w	r2, #4294967295
 80090f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090f8:	e008      	b.n	800910c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090fa:	4b07      	ldr	r3, [pc, #28]	; (8009118 <prvResetNextTaskUnblockTime+0x38>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	4a04      	ldr	r2, [pc, #16]	; (800911c <prvResetNextTaskUnblockTime+0x3c>)
 800910a:	6013      	str	r3, [r2, #0]
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	20000d78 	.word	0x20000d78
 800911c:	20000de0 	.word	0x20000de0

08009120 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009126:	4b0b      	ldr	r3, [pc, #44]	; (8009154 <xTaskGetSchedulerState+0x34>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d102      	bne.n	8009134 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800912e:	2301      	movs	r3, #1
 8009130:	607b      	str	r3, [r7, #4]
 8009132:	e008      	b.n	8009146 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009134:	4b08      	ldr	r3, [pc, #32]	; (8009158 <xTaskGetSchedulerState+0x38>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d102      	bne.n	8009142 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800913c:	2302      	movs	r3, #2
 800913e:	607b      	str	r3, [r7, #4]
 8009140:	e001      	b.n	8009146 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009142:	2300      	movs	r3, #0
 8009144:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009146:	687b      	ldr	r3, [r7, #4]
	}
 8009148:	4618      	mov	r0, r3
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	20000dcc 	.word	0x20000dcc
 8009158:	20000de8 	.word	0x20000de8

0800915c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009168:	2300      	movs	r3, #0
 800916a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d051      	beq.n	8009216 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009176:	4b2a      	ldr	r3, [pc, #168]	; (8009220 <xTaskPriorityInherit+0xc4>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917c:	429a      	cmp	r2, r3
 800917e:	d241      	bcs.n	8009204 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	2b00      	cmp	r3, #0
 8009186:	db06      	blt.n	8009196 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009188:	4b25      	ldr	r3, [pc, #148]	; (8009220 <xTaskPriorityInherit+0xc4>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	6959      	ldr	r1, [r3, #20]
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800919e:	4613      	mov	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4a1f      	ldr	r2, [pc, #124]	; (8009224 <xTaskPriorityInherit+0xc8>)
 80091a8:	4413      	add	r3, r2
 80091aa:	4299      	cmp	r1, r3
 80091ac:	d122      	bne.n	80091f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	3304      	adds	r3, #4
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fe f95e 	bl	8007474 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091b8:	4b19      	ldr	r3, [pc, #100]	; (8009220 <xTaskPriorityInherit+0xc4>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c6:	4b18      	ldr	r3, [pc, #96]	; (8009228 <xTaskPriorityInherit+0xcc>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d903      	bls.n	80091d6 <xTaskPriorityInherit+0x7a>
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d2:	4a15      	ldr	r2, [pc, #84]	; (8009228 <xTaskPriorityInherit+0xcc>)
 80091d4:	6013      	str	r3, [r2, #0]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091da:	4613      	mov	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4a10      	ldr	r2, [pc, #64]	; (8009224 <xTaskPriorityInherit+0xc8>)
 80091e4:	441a      	add	r2, r3
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	3304      	adds	r3, #4
 80091ea:	4619      	mov	r1, r3
 80091ec:	4610      	mov	r0, r2
 80091ee:	f7fe f8e4 	bl	80073ba <vListInsertEnd>
 80091f2:	e004      	b.n	80091fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091f4:	4b0a      	ldr	r3, [pc, #40]	; (8009220 <xTaskPriorityInherit+0xc4>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80091fe:	2301      	movs	r3, #1
 8009200:	60fb      	str	r3, [r7, #12]
 8009202:	e008      	b.n	8009216 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009208:	4b05      	ldr	r3, [pc, #20]	; (8009220 <xTaskPriorityInherit+0xc4>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920e:	429a      	cmp	r2, r3
 8009210:	d201      	bcs.n	8009216 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009212:	2301      	movs	r3, #1
 8009214:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009216:	68fb      	ldr	r3, [r7, #12]
	}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	200008ec 	.word	0x200008ec
 8009224:	200008f0 	.word	0x200008f0
 8009228:	20000dc8 	.word	0x20000dc8

0800922c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800922c:	b580      	push	{r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009238:	2300      	movs	r3, #0
 800923a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d056      	beq.n	80092f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009242:	4b2e      	ldr	r3, [pc, #184]	; (80092fc <xTaskPriorityDisinherit+0xd0>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	429a      	cmp	r2, r3
 800924a:	d00a      	beq.n	8009262 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	60fb      	str	r3, [r7, #12]
}
 800925e:	bf00      	nop
 8009260:	e7fe      	b.n	8009260 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10a      	bne.n	8009280 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800926a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	60bb      	str	r3, [r7, #8]
}
 800927c:	bf00      	nop
 800927e:	e7fe      	b.n	800927e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009284:	1e5a      	subs	r2, r3, #1
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009292:	429a      	cmp	r2, r3
 8009294:	d02c      	beq.n	80092f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800929a:	2b00      	cmp	r3, #0
 800929c:	d128      	bne.n	80092f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	3304      	adds	r3, #4
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fe f8e6 	bl	8007474 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c0:	4b0f      	ldr	r3, [pc, #60]	; (8009300 <xTaskPriorityDisinherit+0xd4>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d903      	bls.n	80092d0 <xTaskPriorityDisinherit+0xa4>
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092cc:	4a0c      	ldr	r2, [pc, #48]	; (8009300 <xTaskPriorityDisinherit+0xd4>)
 80092ce:	6013      	str	r3, [r2, #0]
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d4:	4613      	mov	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4a09      	ldr	r2, [pc, #36]	; (8009304 <xTaskPriorityDisinherit+0xd8>)
 80092de:	441a      	add	r2, r3
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	3304      	adds	r3, #4
 80092e4:	4619      	mov	r1, r3
 80092e6:	4610      	mov	r0, r2
 80092e8:	f7fe f867 	bl	80073ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092ec:	2301      	movs	r3, #1
 80092ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092f0:	697b      	ldr	r3, [r7, #20]
	}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	200008ec 	.word	0x200008ec
 8009300:	20000dc8 	.word	0x20000dc8
 8009304:	200008f0 	.word	0x200008f0

08009308 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009316:	2301      	movs	r3, #1
 8009318:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d06a      	beq.n	80093f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	60fb      	str	r3, [r7, #12]
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	429a      	cmp	r2, r3
 8009346:	d902      	bls.n	800934e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	61fb      	str	r3, [r7, #28]
 800934c:	e002      	b.n	8009354 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009352:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009358:	69fa      	ldr	r2, [r7, #28]
 800935a:	429a      	cmp	r2, r3
 800935c:	d04b      	beq.n	80093f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	429a      	cmp	r2, r3
 8009366:	d146      	bne.n	80093f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009368:	4b25      	ldr	r3, [pc, #148]	; (8009400 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	69ba      	ldr	r2, [r7, #24]
 800936e:	429a      	cmp	r2, r3
 8009370:	d10a      	bne.n	8009388 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	60bb      	str	r3, [r7, #8]
}
 8009384:	bf00      	nop
 8009386:	e7fe      	b.n	8009386 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	69fa      	ldr	r2, [r7, #28]
 8009392:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	2b00      	cmp	r3, #0
 800939a:	db04      	blt.n	80093a6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	6959      	ldr	r1, [r3, #20]
 80093aa:	693a      	ldr	r2, [r7, #16]
 80093ac:	4613      	mov	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4a13      	ldr	r2, [pc, #76]	; (8009404 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80093b6:	4413      	add	r3, r2
 80093b8:	4299      	cmp	r1, r3
 80093ba:	d11c      	bne.n	80093f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	3304      	adds	r3, #4
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fe f857 	bl	8007474 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ca:	4b0f      	ldr	r3, [pc, #60]	; (8009408 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d903      	bls.n	80093da <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d6:	4a0c      	ldr	r2, [pc, #48]	; (8009408 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093d8:	6013      	str	r3, [r2, #0]
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093de:	4613      	mov	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4a07      	ldr	r2, [pc, #28]	; (8009404 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80093e8:	441a      	add	r2, r3
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	3304      	adds	r3, #4
 80093ee:	4619      	mov	r1, r3
 80093f0:	4610      	mov	r0, r2
 80093f2:	f7fd ffe2 	bl	80073ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093f6:	bf00      	nop
 80093f8:	3720      	adds	r7, #32
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	200008ec 	.word	0x200008ec
 8009404:	200008f0 	.word	0x200008f0
 8009408:	20000dc8 	.word	0x20000dc8

0800940c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800940c:	b480      	push	{r7}
 800940e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009410:	4b07      	ldr	r3, [pc, #28]	; (8009430 <pvTaskIncrementMutexHeldCount+0x24>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d004      	beq.n	8009422 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009418:	4b05      	ldr	r3, [pc, #20]	; (8009430 <pvTaskIncrementMutexHeldCount+0x24>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800941e:	3201      	adds	r2, #1
 8009420:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009422:	4b03      	ldr	r3, [pc, #12]	; (8009430 <pvTaskIncrementMutexHeldCount+0x24>)
 8009424:	681b      	ldr	r3, [r3, #0]
	}
 8009426:	4618      	mov	r0, r3
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	200008ec 	.word	0x200008ec

08009434 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800943e:	4b21      	ldr	r3, [pc, #132]	; (80094c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009444:	4b20      	ldr	r3, [pc, #128]	; (80094c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3304      	adds	r3, #4
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe f812 	bl	8007474 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009456:	d10a      	bne.n	800946e <prvAddCurrentTaskToDelayedList+0x3a>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d007      	beq.n	800946e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800945e:	4b1a      	ldr	r3, [pc, #104]	; (80094c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3304      	adds	r3, #4
 8009464:	4619      	mov	r1, r3
 8009466:	4819      	ldr	r0, [pc, #100]	; (80094cc <prvAddCurrentTaskToDelayedList+0x98>)
 8009468:	f7fd ffa7 	bl	80073ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800946c:	e026      	b.n	80094bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4413      	add	r3, r2
 8009474:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009476:	4b14      	ldr	r3, [pc, #80]	; (80094c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	429a      	cmp	r2, r3
 8009484:	d209      	bcs.n	800949a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009486:	4b12      	ldr	r3, [pc, #72]	; (80094d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	4b0f      	ldr	r3, [pc, #60]	; (80094c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	3304      	adds	r3, #4
 8009490:	4619      	mov	r1, r3
 8009492:	4610      	mov	r0, r2
 8009494:	f7fd ffb5 	bl	8007402 <vListInsert>
}
 8009498:	e010      	b.n	80094bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800949a:	4b0e      	ldr	r3, [pc, #56]	; (80094d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3304      	adds	r3, #4
 80094a4:	4619      	mov	r1, r3
 80094a6:	4610      	mov	r0, r2
 80094a8:	f7fd ffab 	bl	8007402 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094ac:	4b0a      	ldr	r3, [pc, #40]	; (80094d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68ba      	ldr	r2, [r7, #8]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d202      	bcs.n	80094bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094b6:	4a08      	ldr	r2, [pc, #32]	; (80094d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	6013      	str	r3, [r2, #0]
}
 80094bc:	bf00      	nop
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	20000dc4 	.word	0x20000dc4
 80094c8:	200008ec 	.word	0x200008ec
 80094cc:	20000dac 	.word	0x20000dac
 80094d0:	20000d7c 	.word	0x20000d7c
 80094d4:	20000d78 	.word	0x20000d78
 80094d8:	20000de0 	.word	0x20000de0

080094dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08a      	sub	sp, #40	; 0x28
 80094e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094e2:	2300      	movs	r3, #0
 80094e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094e6:	f000 fb07 	bl	8009af8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094ea:	4b1c      	ldr	r3, [pc, #112]	; (800955c <xTimerCreateTimerTask+0x80>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d021      	beq.n	8009536 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094f6:	2300      	movs	r3, #0
 80094f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094fa:	1d3a      	adds	r2, r7, #4
 80094fc:	f107 0108 	add.w	r1, r7, #8
 8009500:	f107 030c 	add.w	r3, r7, #12
 8009504:	4618      	mov	r0, r3
 8009506:	f7fd ff11 	bl	800732c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800950a:	6879      	ldr	r1, [r7, #4]
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	9202      	str	r2, [sp, #8]
 8009512:	9301      	str	r3, [sp, #4]
 8009514:	2302      	movs	r3, #2
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	2300      	movs	r3, #0
 800951a:	460a      	mov	r2, r1
 800951c:	4910      	ldr	r1, [pc, #64]	; (8009560 <xTimerCreateTimerTask+0x84>)
 800951e:	4811      	ldr	r0, [pc, #68]	; (8009564 <xTimerCreateTimerTask+0x88>)
 8009520:	f7fe ffe0 	bl	80084e4 <xTaskCreateStatic>
 8009524:	4603      	mov	r3, r0
 8009526:	4a10      	ldr	r2, [pc, #64]	; (8009568 <xTimerCreateTimerTask+0x8c>)
 8009528:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800952a:	4b0f      	ldr	r3, [pc, #60]	; (8009568 <xTimerCreateTimerTask+0x8c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009532:	2301      	movs	r3, #1
 8009534:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10a      	bne.n	8009552 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	613b      	str	r3, [r7, #16]
}
 800954e:	bf00      	nop
 8009550:	e7fe      	b.n	8009550 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009552:	697b      	ldr	r3, [r7, #20]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	20000e1c 	.word	0x20000e1c
 8009560:	0800e614 	.word	0x0800e614
 8009564:	080096a1 	.word	0x080096a1
 8009568:	20000e20 	.word	0x20000e20

0800956c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08a      	sub	sp, #40	; 0x28
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800957a:	2300      	movs	r3, #0
 800957c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10a      	bne.n	800959a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	623b      	str	r3, [r7, #32]
}
 8009596:	bf00      	nop
 8009598:	e7fe      	b.n	8009598 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800959a:	4b1a      	ldr	r3, [pc, #104]	; (8009604 <xTimerGenericCommand+0x98>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d02a      	beq.n	80095f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	2b05      	cmp	r3, #5
 80095b2:	dc18      	bgt.n	80095e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095b4:	f7ff fdb4 	bl	8009120 <xTaskGetSchedulerState>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d109      	bne.n	80095d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095be:	4b11      	ldr	r3, [pc, #68]	; (8009604 <xTimerGenericCommand+0x98>)
 80095c0:	6818      	ldr	r0, [r3, #0]
 80095c2:	f107 0110 	add.w	r1, r7, #16
 80095c6:	2300      	movs	r3, #0
 80095c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095ca:	f7fe f925 	bl	8007818 <xQueueGenericSend>
 80095ce:	6278      	str	r0, [r7, #36]	; 0x24
 80095d0:	e012      	b.n	80095f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095d2:	4b0c      	ldr	r3, [pc, #48]	; (8009604 <xTimerGenericCommand+0x98>)
 80095d4:	6818      	ldr	r0, [r3, #0]
 80095d6:	f107 0110 	add.w	r1, r7, #16
 80095da:	2300      	movs	r3, #0
 80095dc:	2200      	movs	r2, #0
 80095de:	f7fe f91b 	bl	8007818 <xQueueGenericSend>
 80095e2:	6278      	str	r0, [r7, #36]	; 0x24
 80095e4:	e008      	b.n	80095f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095e6:	4b07      	ldr	r3, [pc, #28]	; (8009604 <xTimerGenericCommand+0x98>)
 80095e8:	6818      	ldr	r0, [r3, #0]
 80095ea:	f107 0110 	add.w	r1, r7, #16
 80095ee:	2300      	movs	r3, #0
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	f7fe fa0f 	bl	8007a14 <xQueueGenericSendFromISR>
 80095f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3728      	adds	r7, #40	; 0x28
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	20000e1c 	.word	0x20000e1c

08009608 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b088      	sub	sp, #32
 800960c:	af02      	add	r7, sp, #8
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009612:	4b22      	ldr	r3, [pc, #136]	; (800969c <prvProcessExpiredTimer+0x94>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	3304      	adds	r3, #4
 8009620:	4618      	mov	r0, r3
 8009622:	f7fd ff27 	bl	8007474 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800962c:	f003 0304 	and.w	r3, r3, #4
 8009630:	2b00      	cmp	r3, #0
 8009632:	d022      	beq.n	800967a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	699a      	ldr	r2, [r3, #24]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	18d1      	adds	r1, r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	6978      	ldr	r0, [r7, #20]
 8009642:	f000 f8d1 	bl	80097e8 <prvInsertTimerInActiveList>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d01f      	beq.n	800968c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800964c:	2300      	movs	r3, #0
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	2300      	movs	r3, #0
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	2100      	movs	r1, #0
 8009656:	6978      	ldr	r0, [r7, #20]
 8009658:	f7ff ff88 	bl	800956c <xTimerGenericCommand>
 800965c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d113      	bne.n	800968c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009668:	f383 8811 	msr	BASEPRI, r3
 800966c:	f3bf 8f6f 	isb	sy
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	60fb      	str	r3, [r7, #12]
}
 8009676:	bf00      	nop
 8009678:	e7fe      	b.n	8009678 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009680:	f023 0301 	bic.w	r3, r3, #1
 8009684:	b2da      	uxtb	r2, r3
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	6978      	ldr	r0, [r7, #20]
 8009692:	4798      	blx	r3
}
 8009694:	bf00      	nop
 8009696:	3718      	adds	r7, #24
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	20000e14 	.word	0x20000e14

080096a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096a8:	f107 0308 	add.w	r3, r7, #8
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 f857 	bl	8009760 <prvGetNextExpireTime>
 80096b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	4619      	mov	r1, r3
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 f803 	bl	80096c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096be:	f000 f8d5 	bl	800986c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096c2:	e7f1      	b.n	80096a8 <prvTimerTask+0x8>

080096c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096ce:	f7ff f945 	bl	800895c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096d2:	f107 0308 	add.w	r3, r7, #8
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 f866 	bl	80097a8 <prvSampleTimeNow>
 80096dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d130      	bne.n	8009746 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10a      	bne.n	8009700 <prvProcessTimerOrBlockTask+0x3c>
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d806      	bhi.n	8009700 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80096f2:	f7ff f941 	bl	8008978 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80096f6:	68f9      	ldr	r1, [r7, #12]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7ff ff85 	bl	8009608 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80096fe:	e024      	b.n	800974a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d008      	beq.n	8009718 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009706:	4b13      	ldr	r3, [pc, #76]	; (8009754 <prvProcessTimerOrBlockTask+0x90>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <prvProcessTimerOrBlockTask+0x50>
 8009710:	2301      	movs	r3, #1
 8009712:	e000      	b.n	8009716 <prvProcessTimerOrBlockTask+0x52>
 8009714:	2300      	movs	r3, #0
 8009716:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009718:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <prvProcessTimerOrBlockTask+0x94>)
 800971a:	6818      	ldr	r0, [r3, #0]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	4619      	mov	r1, r3
 8009726:	f7fe fea9 	bl	800847c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800972a:	f7ff f925 	bl	8008978 <xTaskResumeAll>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10a      	bne.n	800974a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009734:	4b09      	ldr	r3, [pc, #36]	; (800975c <prvProcessTimerOrBlockTask+0x98>)
 8009736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	f3bf 8f6f 	isb	sy
}
 8009744:	e001      	b.n	800974a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009746:	f7ff f917 	bl	8008978 <xTaskResumeAll>
}
 800974a:	bf00      	nop
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	20000e18 	.word	0x20000e18
 8009758:	20000e1c 	.word	0x20000e1c
 800975c:	e000ed04 	.word	0xe000ed04

08009760 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009768:	4b0e      	ldr	r3, [pc, #56]	; (80097a4 <prvGetNextExpireTime+0x44>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d101      	bne.n	8009776 <prvGetNextExpireTime+0x16>
 8009772:	2201      	movs	r2, #1
 8009774:	e000      	b.n	8009778 <prvGetNextExpireTime+0x18>
 8009776:	2200      	movs	r2, #0
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d105      	bne.n	8009790 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009784:	4b07      	ldr	r3, [pc, #28]	; (80097a4 <prvGetNextExpireTime+0x44>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	60fb      	str	r3, [r7, #12]
 800978e:	e001      	b.n	8009794 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009790:	2300      	movs	r3, #0
 8009792:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009794:	68fb      	ldr	r3, [r7, #12]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	20000e14 	.word	0x20000e14

080097a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097b0:	f7ff f980 	bl	8008ab4 <xTaskGetTickCount>
 80097b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097b6:	4b0b      	ldr	r3, [pc, #44]	; (80097e4 <prvSampleTimeNow+0x3c>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d205      	bcs.n	80097cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097c0:	f000 f936 	bl	8009a30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	601a      	str	r2, [r3, #0]
 80097ca:	e002      	b.n	80097d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097d2:	4a04      	ldr	r2, [pc, #16]	; (80097e4 <prvSampleTimeNow+0x3c>)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80097d8:	68fb      	ldr	r3, [r7, #12]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20000e24 	.word	0x20000e24

080097e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
 80097f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80097f6:	2300      	movs	r3, #0
 80097f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	429a      	cmp	r2, r3
 800980c:	d812      	bhi.n	8009834 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	1ad2      	subs	r2, r2, r3
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	429a      	cmp	r2, r3
 800981a:	d302      	bcc.n	8009822 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800981c:	2301      	movs	r3, #1
 800981e:	617b      	str	r3, [r7, #20]
 8009820:	e01b      	b.n	800985a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009822:	4b10      	ldr	r3, [pc, #64]	; (8009864 <prvInsertTimerInActiveList+0x7c>)
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3304      	adds	r3, #4
 800982a:	4619      	mov	r1, r3
 800982c:	4610      	mov	r0, r2
 800982e:	f7fd fde8 	bl	8007402 <vListInsert>
 8009832:	e012      	b.n	800985a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	429a      	cmp	r2, r3
 800983a:	d206      	bcs.n	800984a <prvInsertTimerInActiveList+0x62>
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	d302      	bcc.n	800984a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009844:	2301      	movs	r3, #1
 8009846:	617b      	str	r3, [r7, #20]
 8009848:	e007      	b.n	800985a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800984a:	4b07      	ldr	r3, [pc, #28]	; (8009868 <prvInsertTimerInActiveList+0x80>)
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3304      	adds	r3, #4
 8009852:	4619      	mov	r1, r3
 8009854:	4610      	mov	r0, r2
 8009856:	f7fd fdd4 	bl	8007402 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800985a:	697b      	ldr	r3, [r7, #20]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	20000e18 	.word	0x20000e18
 8009868:	20000e14 	.word	0x20000e14

0800986c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b08e      	sub	sp, #56	; 0x38
 8009870:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009872:	e0ca      	b.n	8009a0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	da18      	bge.n	80098ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800987a:	1d3b      	adds	r3, r7, #4
 800987c:	3304      	adds	r3, #4
 800987e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10a      	bne.n	800989c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	61fb      	str	r3, [r7, #28]
}
 8009898:	bf00      	nop
 800989a:	e7fe      	b.n	800989a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800989c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098a2:	6850      	ldr	r0, [r2, #4]
 80098a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098a6:	6892      	ldr	r2, [r2, #8]
 80098a8:	4611      	mov	r1, r2
 80098aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f2c0 80aa 	blt.w	8009a08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d004      	beq.n	80098ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c2:	3304      	adds	r3, #4
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fd fdd5 	bl	8007474 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098ca:	463b      	mov	r3, r7
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7ff ff6b 	bl	80097a8 <prvSampleTimeNow>
 80098d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b09      	cmp	r3, #9
 80098d8:	f200 8097 	bhi.w	8009a0a <prvProcessReceivedCommands+0x19e>
 80098dc:	a201      	add	r2, pc, #4	; (adr r2, 80098e4 <prvProcessReceivedCommands+0x78>)
 80098de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e2:	bf00      	nop
 80098e4:	0800990d 	.word	0x0800990d
 80098e8:	0800990d 	.word	0x0800990d
 80098ec:	0800990d 	.word	0x0800990d
 80098f0:	08009981 	.word	0x08009981
 80098f4:	08009995 	.word	0x08009995
 80098f8:	080099df 	.word	0x080099df
 80098fc:	0800990d 	.word	0x0800990d
 8009900:	0800990d 	.word	0x0800990d
 8009904:	08009981 	.word	0x08009981
 8009908:	08009995 	.word	0x08009995
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800990c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009912:	f043 0301 	orr.w	r3, r3, #1
 8009916:	b2da      	uxtb	r2, r3
 8009918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	18d1      	adds	r1, r2, r3
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800992a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800992c:	f7ff ff5c 	bl	80097e8 <prvInsertTimerInActiveList>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d069      	beq.n	8009a0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800993c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009944:	f003 0304 	and.w	r3, r3, #4
 8009948:	2b00      	cmp	r3, #0
 800994a:	d05e      	beq.n	8009a0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	441a      	add	r2, r3
 8009954:	2300      	movs	r3, #0
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	2300      	movs	r3, #0
 800995a:	2100      	movs	r1, #0
 800995c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800995e:	f7ff fe05 	bl	800956c <xTimerGenericCommand>
 8009962:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d14f      	bne.n	8009a0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	61bb      	str	r3, [r7, #24]
}
 800997c:	bf00      	nop
 800997e:	e7fe      	b.n	800997e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009986:	f023 0301 	bic.w	r3, r3, #1
 800998a:	b2da      	uxtb	r2, r3
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009992:	e03a      	b.n	8009a0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800999a:	f043 0301 	orr.w	r3, r3, #1
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10a      	bne.n	80099ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	617b      	str	r3, [r7, #20]
}
 80099c6:	bf00      	nop
 80099c8:	e7fe      	b.n	80099c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	699a      	ldr	r2, [r3, #24]
 80099ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d0:	18d1      	adds	r1, r2, r3
 80099d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099d8:	f7ff ff06 	bl	80097e8 <prvInsertTimerInActiveList>
					break;
 80099dc:	e015      	b.n	8009a0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80099de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099e4:	f003 0302 	and.w	r3, r3, #2
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d103      	bne.n	80099f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80099ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ee:	f000 fbdf 	bl	800a1b0 <vPortFree>
 80099f2:	e00a      	b.n	8009a0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099fa:	f023 0301 	bic.w	r3, r3, #1
 80099fe:	b2da      	uxtb	r2, r3
 8009a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a06:	e000      	b.n	8009a0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009a08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a0a:	4b08      	ldr	r3, [pc, #32]	; (8009a2c <prvProcessReceivedCommands+0x1c0>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	1d39      	adds	r1, r7, #4
 8009a10:	2200      	movs	r2, #0
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fe f926 	bl	8007c64 <xQueueReceive>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f47f af2a 	bne.w	8009874 <prvProcessReceivedCommands+0x8>
	}
}
 8009a20:	bf00      	nop
 8009a22:	bf00      	nop
 8009a24:	3730      	adds	r7, #48	; 0x30
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	20000e1c 	.word	0x20000e1c

08009a30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b088      	sub	sp, #32
 8009a34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a36:	e048      	b.n	8009aca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a38:	4b2d      	ldr	r3, [pc, #180]	; (8009af0 <prvSwitchTimerLists+0xc0>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a42:	4b2b      	ldr	r3, [pc, #172]	; (8009af0 <prvSwitchTimerLists+0xc0>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	3304      	adds	r3, #4
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fd fd0f 	bl	8007474 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a64:	f003 0304 	and.w	r3, r3, #4
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d02e      	beq.n	8009aca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	4413      	add	r3, r2
 8009a74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d90e      	bls.n	8009a9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a8a:	4b19      	ldr	r3, [pc, #100]	; (8009af0 <prvSwitchTimerLists+0xc0>)
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	3304      	adds	r3, #4
 8009a92:	4619      	mov	r1, r3
 8009a94:	4610      	mov	r0, r2
 8009a96:	f7fd fcb4 	bl	8007402 <vListInsert>
 8009a9a:	e016      	b.n	8009aca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	2100      	movs	r1, #0
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f7ff fd60 	bl	800956c <xTimerGenericCommand>
 8009aac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10a      	bne.n	8009aca <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	603b      	str	r3, [r7, #0]
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009aca:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <prvSwitchTimerLists+0xc0>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1b1      	bne.n	8009a38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ad4:	4b06      	ldr	r3, [pc, #24]	; (8009af0 <prvSwitchTimerLists+0xc0>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ada:	4b06      	ldr	r3, [pc, #24]	; (8009af4 <prvSwitchTimerLists+0xc4>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a04      	ldr	r2, [pc, #16]	; (8009af0 <prvSwitchTimerLists+0xc0>)
 8009ae0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ae2:	4a04      	ldr	r2, [pc, #16]	; (8009af4 <prvSwitchTimerLists+0xc4>)
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	6013      	str	r3, [r2, #0]
}
 8009ae8:	bf00      	nop
 8009aea:	3718      	adds	r7, #24
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	20000e14 	.word	0x20000e14
 8009af4:	20000e18 	.word	0x20000e18

08009af8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009afe:	f000 f969 	bl	8009dd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b02:	4b15      	ldr	r3, [pc, #84]	; (8009b58 <prvCheckForValidListAndQueue+0x60>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d120      	bne.n	8009b4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b0a:	4814      	ldr	r0, [pc, #80]	; (8009b5c <prvCheckForValidListAndQueue+0x64>)
 8009b0c:	f7fd fc28 	bl	8007360 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b10:	4813      	ldr	r0, [pc, #76]	; (8009b60 <prvCheckForValidListAndQueue+0x68>)
 8009b12:	f7fd fc25 	bl	8007360 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b16:	4b13      	ldr	r3, [pc, #76]	; (8009b64 <prvCheckForValidListAndQueue+0x6c>)
 8009b18:	4a10      	ldr	r2, [pc, #64]	; (8009b5c <prvCheckForValidListAndQueue+0x64>)
 8009b1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b1c:	4b12      	ldr	r3, [pc, #72]	; (8009b68 <prvCheckForValidListAndQueue+0x70>)
 8009b1e:	4a10      	ldr	r2, [pc, #64]	; (8009b60 <prvCheckForValidListAndQueue+0x68>)
 8009b20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b22:	2300      	movs	r3, #0
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	4b11      	ldr	r3, [pc, #68]	; (8009b6c <prvCheckForValidListAndQueue+0x74>)
 8009b28:	4a11      	ldr	r2, [pc, #68]	; (8009b70 <prvCheckForValidListAndQueue+0x78>)
 8009b2a:	2110      	movs	r1, #16
 8009b2c:	200a      	movs	r0, #10
 8009b2e:	f7fd fd33 	bl	8007598 <xQueueGenericCreateStatic>
 8009b32:	4603      	mov	r3, r0
 8009b34:	4a08      	ldr	r2, [pc, #32]	; (8009b58 <prvCheckForValidListAndQueue+0x60>)
 8009b36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b38:	4b07      	ldr	r3, [pc, #28]	; (8009b58 <prvCheckForValidListAndQueue+0x60>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d005      	beq.n	8009b4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b40:	4b05      	ldr	r3, [pc, #20]	; (8009b58 <prvCheckForValidListAndQueue+0x60>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	490b      	ldr	r1, [pc, #44]	; (8009b74 <prvCheckForValidListAndQueue+0x7c>)
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7fe fc44 	bl	80083d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b4c:	f000 f972 	bl	8009e34 <vPortExitCritical>
}
 8009b50:	bf00      	nop
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20000e1c 	.word	0x20000e1c
 8009b5c:	20000dec 	.word	0x20000dec
 8009b60:	20000e00 	.word	0x20000e00
 8009b64:	20000e14 	.word	0x20000e14
 8009b68:	20000e18 	.word	0x20000e18
 8009b6c:	20000ec8 	.word	0x20000ec8
 8009b70:	20000e28 	.word	0x20000e28
 8009b74:	0800e61c 	.word	0x0800e61c

08009b78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	3b04      	subs	r3, #4
 8009b88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	3b04      	subs	r3, #4
 8009b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	f023 0201 	bic.w	r2, r3, #1
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3b04      	subs	r3, #4
 8009ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ba8:	4a0c      	ldr	r2, [pc, #48]	; (8009bdc <pxPortInitialiseStack+0x64>)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3b14      	subs	r3, #20
 8009bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	3b04      	subs	r3, #4
 8009bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f06f 0202 	mvn.w	r2, #2
 8009bc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	3b20      	subs	r3, #32
 8009bcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009bce:	68fb      	ldr	r3, [r7, #12]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	08009be1 	.word	0x08009be1

08009be0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009be0:	b480      	push	{r7}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009be6:	2300      	movs	r3, #0
 8009be8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bea:	4b12      	ldr	r3, [pc, #72]	; (8009c34 <prvTaskExitError+0x54>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf2:	d00a      	beq.n	8009c0a <prvTaskExitError+0x2a>
	__asm volatile
 8009bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	60fb      	str	r3, [r7, #12]
}
 8009c06:	bf00      	nop
 8009c08:	e7fe      	b.n	8009c08 <prvTaskExitError+0x28>
	__asm volatile
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	60bb      	str	r3, [r7, #8]
}
 8009c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c1e:	bf00      	nop
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d0fc      	beq.n	8009c20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c26:	bf00      	nop
 8009c28:	bf00      	nop
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	20000010 	.word	0x20000010
	...

08009c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c40:	4b07      	ldr	r3, [pc, #28]	; (8009c60 <pxCurrentTCBConst2>)
 8009c42:	6819      	ldr	r1, [r3, #0]
 8009c44:	6808      	ldr	r0, [r1, #0]
 8009c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4a:	f380 8809 	msr	PSP, r0
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f04f 0000 	mov.w	r0, #0
 8009c56:	f380 8811 	msr	BASEPRI, r0
 8009c5a:	4770      	bx	lr
 8009c5c:	f3af 8000 	nop.w

08009c60 <pxCurrentTCBConst2>:
 8009c60:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop

08009c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c68:	4808      	ldr	r0, [pc, #32]	; (8009c8c <prvPortStartFirstTask+0x24>)
 8009c6a:	6800      	ldr	r0, [r0, #0]
 8009c6c:	6800      	ldr	r0, [r0, #0]
 8009c6e:	f380 8808 	msr	MSP, r0
 8009c72:	f04f 0000 	mov.w	r0, #0
 8009c76:	f380 8814 	msr	CONTROL, r0
 8009c7a:	b662      	cpsie	i
 8009c7c:	b661      	cpsie	f
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	df00      	svc	0
 8009c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c8a:	bf00      	nop
 8009c8c:	e000ed08 	.word	0xe000ed08

08009c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b086      	sub	sp, #24
 8009c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c96:	4b46      	ldr	r3, [pc, #280]	; (8009db0 <xPortStartScheduler+0x120>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a46      	ldr	r2, [pc, #280]	; (8009db4 <xPortStartScheduler+0x124>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d10a      	bne.n	8009cb6 <xPortStartScheduler+0x26>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	613b      	str	r3, [r7, #16]
}
 8009cb2:	bf00      	nop
 8009cb4:	e7fe      	b.n	8009cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009cb6:	4b3e      	ldr	r3, [pc, #248]	; (8009db0 <xPortStartScheduler+0x120>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a3f      	ldr	r2, [pc, #252]	; (8009db8 <xPortStartScheduler+0x128>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d10a      	bne.n	8009cd6 <xPortStartScheduler+0x46>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	60fb      	str	r3, [r7, #12]
}
 8009cd2:	bf00      	nop
 8009cd4:	e7fe      	b.n	8009cd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cd6:	4b39      	ldr	r3, [pc, #228]	; (8009dbc <xPortStartScheduler+0x12c>)
 8009cd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	22ff      	movs	r2, #255	; 0xff
 8009ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009cf0:	78fb      	ldrb	r3, [r7, #3]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009cf8:	b2da      	uxtb	r2, r3
 8009cfa:	4b31      	ldr	r3, [pc, #196]	; (8009dc0 <xPortStartScheduler+0x130>)
 8009cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009cfe:	4b31      	ldr	r3, [pc, #196]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d00:	2207      	movs	r2, #7
 8009d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d04:	e009      	b.n	8009d1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009d06:	4b2f      	ldr	r3, [pc, #188]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	4a2d      	ldr	r2, [pc, #180]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d10:	78fb      	ldrb	r3, [r7, #3]
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	005b      	lsls	r3, r3, #1
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d1a:	78fb      	ldrb	r3, [r7, #3]
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d22:	2b80      	cmp	r3, #128	; 0x80
 8009d24:	d0ef      	beq.n	8009d06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d26:	4b27      	ldr	r3, [pc, #156]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f1c3 0307 	rsb	r3, r3, #7
 8009d2e:	2b04      	cmp	r3, #4
 8009d30:	d00a      	beq.n	8009d48 <xPortStartScheduler+0xb8>
	__asm volatile
 8009d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	60bb      	str	r3, [r7, #8]
}
 8009d44:	bf00      	nop
 8009d46:	e7fe      	b.n	8009d46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d48:	4b1e      	ldr	r3, [pc, #120]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	021b      	lsls	r3, r3, #8
 8009d4e:	4a1d      	ldr	r2, [pc, #116]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d52:	4b1c      	ldr	r3, [pc, #112]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d5a:	4a1a      	ldr	r2, [pc, #104]	; (8009dc4 <xPortStartScheduler+0x134>)
 8009d5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d66:	4b18      	ldr	r3, [pc, #96]	; (8009dc8 <xPortStartScheduler+0x138>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a17      	ldr	r2, [pc, #92]	; (8009dc8 <xPortStartScheduler+0x138>)
 8009d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d72:	4b15      	ldr	r3, [pc, #84]	; (8009dc8 <xPortStartScheduler+0x138>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a14      	ldr	r2, [pc, #80]	; (8009dc8 <xPortStartScheduler+0x138>)
 8009d78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d7e:	f000 f8dd 	bl	8009f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d82:	4b12      	ldr	r3, [pc, #72]	; (8009dcc <xPortStartScheduler+0x13c>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d88:	f000 f8fc 	bl	8009f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d8c:	4b10      	ldr	r3, [pc, #64]	; (8009dd0 <xPortStartScheduler+0x140>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a0f      	ldr	r2, [pc, #60]	; (8009dd0 <xPortStartScheduler+0x140>)
 8009d92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009d96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d98:	f7ff ff66 	bl	8009c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d9c:	f7fe ff54 	bl	8008c48 <vTaskSwitchContext>
	prvTaskExitError();
 8009da0:	f7ff ff1e 	bl	8009be0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3718      	adds	r7, #24
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	e000ed00 	.word	0xe000ed00
 8009db4:	410fc271 	.word	0x410fc271
 8009db8:	410fc270 	.word	0x410fc270
 8009dbc:	e000e400 	.word	0xe000e400
 8009dc0:	20000f18 	.word	0x20000f18
 8009dc4:	20000f1c 	.word	0x20000f1c
 8009dc8:	e000ed20 	.word	0xe000ed20
 8009dcc:	20000010 	.word	0x20000010
 8009dd0:	e000ef34 	.word	0xe000ef34

08009dd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	607b      	str	r3, [r7, #4]
}
 8009dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009dee:	4b0f      	ldr	r3, [pc, #60]	; (8009e2c <vPortEnterCritical+0x58>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3301      	adds	r3, #1
 8009df4:	4a0d      	ldr	r2, [pc, #52]	; (8009e2c <vPortEnterCritical+0x58>)
 8009df6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009df8:	4b0c      	ldr	r3, [pc, #48]	; (8009e2c <vPortEnterCritical+0x58>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d10f      	bne.n	8009e20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e00:	4b0b      	ldr	r3, [pc, #44]	; (8009e30 <vPortEnterCritical+0x5c>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d00a      	beq.n	8009e20 <vPortEnterCritical+0x4c>
	__asm volatile
 8009e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0e:	f383 8811 	msr	BASEPRI, r3
 8009e12:	f3bf 8f6f 	isb	sy
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	603b      	str	r3, [r7, #0]
}
 8009e1c:	bf00      	nop
 8009e1e:	e7fe      	b.n	8009e1e <vPortEnterCritical+0x4a>
	}
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	20000010 	.word	0x20000010
 8009e30:	e000ed04 	.word	0xe000ed04

08009e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e3a:	4b12      	ldr	r3, [pc, #72]	; (8009e84 <vPortExitCritical+0x50>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10a      	bne.n	8009e58 <vPortExitCritical+0x24>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	607b      	str	r3, [r7, #4]
}
 8009e54:	bf00      	nop
 8009e56:	e7fe      	b.n	8009e56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e58:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <vPortExitCritical+0x50>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	4a09      	ldr	r2, [pc, #36]	; (8009e84 <vPortExitCritical+0x50>)
 8009e60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e62:	4b08      	ldr	r3, [pc, #32]	; (8009e84 <vPortExitCritical+0x50>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d105      	bne.n	8009e76 <vPortExitCritical+0x42>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	f383 8811 	msr	BASEPRI, r3
}
 8009e74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e76:	bf00      	nop
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20000010 	.word	0x20000010
	...

08009e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e90:	f3ef 8009 	mrs	r0, PSP
 8009e94:	f3bf 8f6f 	isb	sy
 8009e98:	4b15      	ldr	r3, [pc, #84]	; (8009ef0 <pxCurrentTCBConst>)
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	f01e 0f10 	tst.w	lr, #16
 8009ea0:	bf08      	it	eq
 8009ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eaa:	6010      	str	r0, [r2, #0]
 8009eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009eb4:	f380 8811 	msr	BASEPRI, r0
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f7fe fec2 	bl	8008c48 <vTaskSwitchContext>
 8009ec4:	f04f 0000 	mov.w	r0, #0
 8009ec8:	f380 8811 	msr	BASEPRI, r0
 8009ecc:	bc09      	pop	{r0, r3}
 8009ece:	6819      	ldr	r1, [r3, #0]
 8009ed0:	6808      	ldr	r0, [r1, #0]
 8009ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed6:	f01e 0f10 	tst.w	lr, #16
 8009eda:	bf08      	it	eq
 8009edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ee0:	f380 8809 	msr	PSP, r0
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	f3af 8000 	nop.w

08009ef0 <pxCurrentTCBConst>:
 8009ef0:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ef4:	bf00      	nop
 8009ef6:	bf00      	nop

08009ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	607b      	str	r3, [r7, #4]
}
 8009f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f12:	f7fe fddf 	bl	8008ad4 <xTaskIncrementTick>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d003      	beq.n	8009f24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f1c:	4b06      	ldr	r3, [pc, #24]	; (8009f38 <xPortSysTickHandler+0x40>)
 8009f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f22:	601a      	str	r2, [r3, #0]
 8009f24:	2300      	movs	r3, #0
 8009f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	f383 8811 	msr	BASEPRI, r3
}
 8009f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f30:	bf00      	nop
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	e000ed04 	.word	0xe000ed04

08009f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f40:	4b0b      	ldr	r3, [pc, #44]	; (8009f70 <vPortSetupTimerInterrupt+0x34>)
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f46:	4b0b      	ldr	r3, [pc, #44]	; (8009f74 <vPortSetupTimerInterrupt+0x38>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f4c:	4b0a      	ldr	r3, [pc, #40]	; (8009f78 <vPortSetupTimerInterrupt+0x3c>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a0a      	ldr	r2, [pc, #40]	; (8009f7c <vPortSetupTimerInterrupt+0x40>)
 8009f52:	fba2 2303 	umull	r2, r3, r2, r3
 8009f56:	099b      	lsrs	r3, r3, #6
 8009f58:	4a09      	ldr	r2, [pc, #36]	; (8009f80 <vPortSetupTimerInterrupt+0x44>)
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f5e:	4b04      	ldr	r3, [pc, #16]	; (8009f70 <vPortSetupTimerInterrupt+0x34>)
 8009f60:	2207      	movs	r2, #7
 8009f62:	601a      	str	r2, [r3, #0]
}
 8009f64:	bf00      	nop
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	e000e010 	.word	0xe000e010
 8009f74:	e000e018 	.word	0xe000e018
 8009f78:	20000004 	.word	0x20000004
 8009f7c:	10624dd3 	.word	0x10624dd3
 8009f80:	e000e014 	.word	0xe000e014

08009f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f94 <vPortEnableVFP+0x10>
 8009f88:	6801      	ldr	r1, [r0, #0]
 8009f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f8e:	6001      	str	r1, [r0, #0]
 8009f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f92:	bf00      	nop
 8009f94:	e000ed88 	.word	0xe000ed88

08009f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f9e:	f3ef 8305 	mrs	r3, IPSR
 8009fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2b0f      	cmp	r3, #15
 8009fa8:	d914      	bls.n	8009fd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009faa:	4a17      	ldr	r2, [pc, #92]	; (800a008 <vPortValidateInterruptPriority+0x70>)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	4413      	add	r3, r2
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fb4:	4b15      	ldr	r3, [pc, #84]	; (800a00c <vPortValidateInterruptPriority+0x74>)
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	7afa      	ldrb	r2, [r7, #11]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d20a      	bcs.n	8009fd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	607b      	str	r3, [r7, #4]
}
 8009fd0:	bf00      	nop
 8009fd2:	e7fe      	b.n	8009fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009fd4:	4b0e      	ldr	r3, [pc, #56]	; (800a010 <vPortValidateInterruptPriority+0x78>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009fdc:	4b0d      	ldr	r3, [pc, #52]	; (800a014 <vPortValidateInterruptPriority+0x7c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d90a      	bls.n	8009ffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	603b      	str	r3, [r7, #0]
}
 8009ff6:	bf00      	nop
 8009ff8:	e7fe      	b.n	8009ff8 <vPortValidateInterruptPriority+0x60>
	}
 8009ffa:	bf00      	nop
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	e000e3f0 	.word	0xe000e3f0
 800a00c:	20000f18 	.word	0x20000f18
 800a010:	e000ed0c 	.word	0xe000ed0c
 800a014:	20000f1c 	.word	0x20000f1c

0800a018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08a      	sub	sp, #40	; 0x28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a020:	2300      	movs	r3, #0
 800a022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a024:	f7fe fc9a 	bl	800895c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a028:	4b5b      	ldr	r3, [pc, #364]	; (800a198 <pvPortMalloc+0x180>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d101      	bne.n	800a034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a030:	f000 f920 	bl	800a274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a034:	4b59      	ldr	r3, [pc, #356]	; (800a19c <pvPortMalloc+0x184>)
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4013      	ands	r3, r2
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f040 8093 	bne.w	800a168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d01d      	beq.n	800a084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a048:	2208      	movs	r2, #8
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4413      	add	r3, r2
 800a04e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f003 0307 	and.w	r3, r3, #7
 800a056:	2b00      	cmp	r3, #0
 800a058:	d014      	beq.n	800a084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f023 0307 	bic.w	r3, r3, #7
 800a060:	3308      	adds	r3, #8
 800a062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f003 0307 	and.w	r3, r3, #7
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00a      	beq.n	800a084 <pvPortMalloc+0x6c>
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	617b      	str	r3, [r7, #20]
}
 800a080:	bf00      	nop
 800a082:	e7fe      	b.n	800a082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d06e      	beq.n	800a168 <pvPortMalloc+0x150>
 800a08a:	4b45      	ldr	r3, [pc, #276]	; (800a1a0 <pvPortMalloc+0x188>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	429a      	cmp	r2, r3
 800a092:	d869      	bhi.n	800a168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a094:	4b43      	ldr	r3, [pc, #268]	; (800a1a4 <pvPortMalloc+0x18c>)
 800a096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a098:	4b42      	ldr	r3, [pc, #264]	; (800a1a4 <pvPortMalloc+0x18c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a09e:	e004      	b.n	800a0aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d903      	bls.n	800a0bc <pvPortMalloc+0xa4>
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1f1      	bne.n	800a0a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0bc:	4b36      	ldr	r3, [pc, #216]	; (800a198 <pvPortMalloc+0x180>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d050      	beq.n	800a168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0c6:	6a3b      	ldr	r3, [r7, #32]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2208      	movs	r2, #8
 800a0cc:	4413      	add	r3, r2
 800a0ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	685a      	ldr	r2, [r3, #4]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	1ad2      	subs	r2, r2, r3
 800a0e0:	2308      	movs	r3, #8
 800a0e2:	005b      	lsls	r3, r3, #1
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d91f      	bls.n	800a128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	f003 0307 	and.w	r3, r3, #7
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00a      	beq.n	800a110 <pvPortMalloc+0xf8>
	__asm volatile
 800a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	613b      	str	r3, [r7, #16]
}
 800a10c:	bf00      	nop
 800a10e:	e7fe      	b.n	800a10e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	685a      	ldr	r2, [r3, #4]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	1ad2      	subs	r2, r2, r3
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a122:	69b8      	ldr	r0, [r7, #24]
 800a124:	f000 f908 	bl	800a338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a128:	4b1d      	ldr	r3, [pc, #116]	; (800a1a0 <pvPortMalloc+0x188>)
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	4a1b      	ldr	r2, [pc, #108]	; (800a1a0 <pvPortMalloc+0x188>)
 800a134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a136:	4b1a      	ldr	r3, [pc, #104]	; (800a1a0 <pvPortMalloc+0x188>)
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	4b1b      	ldr	r3, [pc, #108]	; (800a1a8 <pvPortMalloc+0x190>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d203      	bcs.n	800a14a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a142:	4b17      	ldr	r3, [pc, #92]	; (800a1a0 <pvPortMalloc+0x188>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a18      	ldr	r2, [pc, #96]	; (800a1a8 <pvPortMalloc+0x190>)
 800a148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	685a      	ldr	r2, [r3, #4]
 800a14e:	4b13      	ldr	r3, [pc, #76]	; (800a19c <pvPortMalloc+0x184>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	431a      	orrs	r2, r3
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15a:	2200      	movs	r2, #0
 800a15c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a15e:	4b13      	ldr	r3, [pc, #76]	; (800a1ac <pvPortMalloc+0x194>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3301      	adds	r3, #1
 800a164:	4a11      	ldr	r2, [pc, #68]	; (800a1ac <pvPortMalloc+0x194>)
 800a166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a168:	f7fe fc06 	bl	8008978 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	f003 0307 	and.w	r3, r3, #7
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00a      	beq.n	800a18c <pvPortMalloc+0x174>
	__asm volatile
 800a176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17a:	f383 8811 	msr	BASEPRI, r3
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	60fb      	str	r3, [r7, #12]
}
 800a188:	bf00      	nop
 800a18a:	e7fe      	b.n	800a18a <pvPortMalloc+0x172>
	return pvReturn;
 800a18c:	69fb      	ldr	r3, [r7, #28]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3728      	adds	r7, #40	; 0x28
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	20002698 	.word	0x20002698
 800a19c:	200026ac 	.word	0x200026ac
 800a1a0:	2000269c 	.word	0x2000269c
 800a1a4:	20002690 	.word	0x20002690
 800a1a8:	200026a0 	.word	0x200026a0
 800a1ac:	200026a4 	.word	0x200026a4

0800a1b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d04d      	beq.n	800a25e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1c2:	2308      	movs	r3, #8
 800a1c4:	425b      	negs	r3, r3
 800a1c6:	697a      	ldr	r2, [r7, #20]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	685a      	ldr	r2, [r3, #4]
 800a1d4:	4b24      	ldr	r3, [pc, #144]	; (800a268 <vPortFree+0xb8>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4013      	ands	r3, r2
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10a      	bne.n	800a1f4 <vPortFree+0x44>
	__asm volatile
 800a1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	60fb      	str	r3, [r7, #12]
}
 800a1f0:	bf00      	nop
 800a1f2:	e7fe      	b.n	800a1f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00a      	beq.n	800a212 <vPortFree+0x62>
	__asm volatile
 800a1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a200:	f383 8811 	msr	BASEPRI, r3
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	60bb      	str	r3, [r7, #8]
}
 800a20e:	bf00      	nop
 800a210:	e7fe      	b.n	800a210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	4b14      	ldr	r3, [pc, #80]	; (800a268 <vPortFree+0xb8>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4013      	ands	r3, r2
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d01e      	beq.n	800a25e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d11a      	bne.n	800a25e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	4b0e      	ldr	r3, [pc, #56]	; (800a268 <vPortFree+0xb8>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	43db      	mvns	r3, r3
 800a232:	401a      	ands	r2, r3
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a238:	f7fe fb90 	bl	800895c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	4b0a      	ldr	r3, [pc, #40]	; (800a26c <vPortFree+0xbc>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4413      	add	r3, r2
 800a246:	4a09      	ldr	r2, [pc, #36]	; (800a26c <vPortFree+0xbc>)
 800a248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a24a:	6938      	ldr	r0, [r7, #16]
 800a24c:	f000 f874 	bl	800a338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a250:	4b07      	ldr	r3, [pc, #28]	; (800a270 <vPortFree+0xc0>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3301      	adds	r3, #1
 800a256:	4a06      	ldr	r2, [pc, #24]	; (800a270 <vPortFree+0xc0>)
 800a258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a25a:	f7fe fb8d 	bl	8008978 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a25e:	bf00      	nop
 800a260:	3718      	adds	r7, #24
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	200026ac 	.word	0x200026ac
 800a26c:	2000269c 	.word	0x2000269c
 800a270:	200026a8 	.word	0x200026a8

0800a274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a27a:	f241 7370 	movw	r3, #6000	; 0x1770
 800a27e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a280:	4b27      	ldr	r3, [pc, #156]	; (800a320 <prvHeapInit+0xac>)
 800a282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f003 0307 	and.w	r3, r3, #7
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00c      	beq.n	800a2a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3307      	adds	r3, #7
 800a292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f023 0307 	bic.w	r3, r3, #7
 800a29a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	4a1f      	ldr	r2, [pc, #124]	; (800a320 <prvHeapInit+0xac>)
 800a2a4:	4413      	add	r3, r2
 800a2a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2ac:	4a1d      	ldr	r2, [pc, #116]	; (800a324 <prvHeapInit+0xb0>)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2b2:	4b1c      	ldr	r3, [pc, #112]	; (800a324 <prvHeapInit+0xb0>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	4413      	add	r3, r2
 800a2be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2c0:	2208      	movs	r2, #8
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	1a9b      	subs	r3, r3, r2
 800a2c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f023 0307 	bic.w	r3, r3, #7
 800a2ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	4a15      	ldr	r2, [pc, #84]	; (800a328 <prvHeapInit+0xb4>)
 800a2d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2d6:	4b14      	ldr	r3, [pc, #80]	; (800a328 <prvHeapInit+0xb4>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2de:	4b12      	ldr	r3, [pc, #72]	; (800a328 <prvHeapInit+0xb4>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	1ad2      	subs	r2, r2, r3
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a2f4:	4b0c      	ldr	r3, [pc, #48]	; (800a328 <prvHeapInit+0xb4>)
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	4a0a      	ldr	r2, [pc, #40]	; (800a32c <prvHeapInit+0xb8>)
 800a302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	4a09      	ldr	r2, [pc, #36]	; (800a330 <prvHeapInit+0xbc>)
 800a30a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a30c:	4b09      	ldr	r3, [pc, #36]	; (800a334 <prvHeapInit+0xc0>)
 800a30e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a312:	601a      	str	r2, [r3, #0]
}
 800a314:	bf00      	nop
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	20000f20 	.word	0x20000f20
 800a324:	20002690 	.word	0x20002690
 800a328:	20002698 	.word	0x20002698
 800a32c:	200026a0 	.word	0x200026a0
 800a330:	2000269c 	.word	0x2000269c
 800a334:	200026ac 	.word	0x200026ac

0800a338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a340:	4b28      	ldr	r3, [pc, #160]	; (800a3e4 <prvInsertBlockIntoFreeList+0xac>)
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	e002      	b.n	800a34c <prvInsertBlockIntoFreeList+0x14>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	60fb      	str	r3, [r7, #12]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	429a      	cmp	r2, r3
 800a354:	d8f7      	bhi.n	800a346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	4413      	add	r3, r2
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	429a      	cmp	r2, r3
 800a366:	d108      	bne.n	800a37a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	441a      	add	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	441a      	add	r2, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d118      	bne.n	800a3c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	4b15      	ldr	r3, [pc, #84]	; (800a3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	429a      	cmp	r2, r3
 800a398:	d00d      	beq.n	800a3b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	441a      	add	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	e008      	b.n	800a3c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3b6:	4b0c      	ldr	r3, [pc, #48]	; (800a3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a3b8:	681a      	ldr	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	601a      	str	r2, [r3, #0]
 800a3be:	e003      	b.n	800a3c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d002      	beq.n	800a3d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3d6:	bf00      	nop
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	20002690 	.word	0x20002690
 800a3e8:	20002698 	.word	0x20002698

0800a3ec <atof>:
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	f001 bb61 	b.w	800bab4 <strtod>
	...

0800a3f4 <__errno>:
 800a3f4:	4b01      	ldr	r3, [pc, #4]	; (800a3fc <__errno+0x8>)
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	20000014 	.word	0x20000014

0800a400 <__libc_init_array>:
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	4d0d      	ldr	r5, [pc, #52]	; (800a438 <__libc_init_array+0x38>)
 800a404:	4c0d      	ldr	r4, [pc, #52]	; (800a43c <__libc_init_array+0x3c>)
 800a406:	1b64      	subs	r4, r4, r5
 800a408:	10a4      	asrs	r4, r4, #2
 800a40a:	2600      	movs	r6, #0
 800a40c:	42a6      	cmp	r6, r4
 800a40e:	d109      	bne.n	800a424 <__libc_init_array+0x24>
 800a410:	4d0b      	ldr	r5, [pc, #44]	; (800a440 <__libc_init_array+0x40>)
 800a412:	4c0c      	ldr	r4, [pc, #48]	; (800a444 <__libc_init_array+0x44>)
 800a414:	f004 f87a 	bl	800e50c <_init>
 800a418:	1b64      	subs	r4, r4, r5
 800a41a:	10a4      	asrs	r4, r4, #2
 800a41c:	2600      	movs	r6, #0
 800a41e:	42a6      	cmp	r6, r4
 800a420:	d105      	bne.n	800a42e <__libc_init_array+0x2e>
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	f855 3b04 	ldr.w	r3, [r5], #4
 800a428:	4798      	blx	r3
 800a42a:	3601      	adds	r6, #1
 800a42c:	e7ee      	b.n	800a40c <__libc_init_array+0xc>
 800a42e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a432:	4798      	blx	r3
 800a434:	3601      	adds	r6, #1
 800a436:	e7f2      	b.n	800a41e <__libc_init_array+0x1e>
 800a438:	0800ebbc 	.word	0x0800ebbc
 800a43c:	0800ebbc 	.word	0x0800ebbc
 800a440:	0800ebbc 	.word	0x0800ebbc
 800a444:	0800ebc0 	.word	0x0800ebc0

0800a448 <memcpy>:
 800a448:	440a      	add	r2, r1
 800a44a:	4291      	cmp	r1, r2
 800a44c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a450:	d100      	bne.n	800a454 <memcpy+0xc>
 800a452:	4770      	bx	lr
 800a454:	b510      	push	{r4, lr}
 800a456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a45a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a45e:	4291      	cmp	r1, r2
 800a460:	d1f9      	bne.n	800a456 <memcpy+0xe>
 800a462:	bd10      	pop	{r4, pc}

0800a464 <memset>:
 800a464:	4402      	add	r2, r0
 800a466:	4603      	mov	r3, r0
 800a468:	4293      	cmp	r3, r2
 800a46a:	d100      	bne.n	800a46e <memset+0xa>
 800a46c:	4770      	bx	lr
 800a46e:	f803 1b01 	strb.w	r1, [r3], #1
 800a472:	e7f9      	b.n	800a468 <memset+0x4>

0800a474 <__cvt>:
 800a474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a478:	ec55 4b10 	vmov	r4, r5, d0
 800a47c:	2d00      	cmp	r5, #0
 800a47e:	460e      	mov	r6, r1
 800a480:	4619      	mov	r1, r3
 800a482:	462b      	mov	r3, r5
 800a484:	bfbb      	ittet	lt
 800a486:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a48a:	461d      	movlt	r5, r3
 800a48c:	2300      	movge	r3, #0
 800a48e:	232d      	movlt	r3, #45	; 0x2d
 800a490:	700b      	strb	r3, [r1, #0]
 800a492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a494:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a498:	4691      	mov	r9, r2
 800a49a:	f023 0820 	bic.w	r8, r3, #32
 800a49e:	bfbc      	itt	lt
 800a4a0:	4622      	movlt	r2, r4
 800a4a2:	4614      	movlt	r4, r2
 800a4a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4a8:	d005      	beq.n	800a4b6 <__cvt+0x42>
 800a4aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a4ae:	d100      	bne.n	800a4b2 <__cvt+0x3e>
 800a4b0:	3601      	adds	r6, #1
 800a4b2:	2102      	movs	r1, #2
 800a4b4:	e000      	b.n	800a4b8 <__cvt+0x44>
 800a4b6:	2103      	movs	r1, #3
 800a4b8:	ab03      	add	r3, sp, #12
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	ab02      	add	r3, sp, #8
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	ec45 4b10 	vmov	d0, r4, r5
 800a4c4:	4653      	mov	r3, sl
 800a4c6:	4632      	mov	r2, r6
 800a4c8:	f001 fc4e 	bl	800bd68 <_dtoa_r>
 800a4cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a4d0:	4607      	mov	r7, r0
 800a4d2:	d102      	bne.n	800a4da <__cvt+0x66>
 800a4d4:	f019 0f01 	tst.w	r9, #1
 800a4d8:	d022      	beq.n	800a520 <__cvt+0xac>
 800a4da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4de:	eb07 0906 	add.w	r9, r7, r6
 800a4e2:	d110      	bne.n	800a506 <__cvt+0x92>
 800a4e4:	783b      	ldrb	r3, [r7, #0]
 800a4e6:	2b30      	cmp	r3, #48	; 0x30
 800a4e8:	d10a      	bne.n	800a500 <__cvt+0x8c>
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	f7f6 fae9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4f6:	b918      	cbnz	r0, 800a500 <__cvt+0x8c>
 800a4f8:	f1c6 0601 	rsb	r6, r6, #1
 800a4fc:	f8ca 6000 	str.w	r6, [sl]
 800a500:	f8da 3000 	ldr.w	r3, [sl]
 800a504:	4499      	add	r9, r3
 800a506:	2200      	movs	r2, #0
 800a508:	2300      	movs	r3, #0
 800a50a:	4620      	mov	r0, r4
 800a50c:	4629      	mov	r1, r5
 800a50e:	f7f6 fadb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a512:	b108      	cbz	r0, 800a518 <__cvt+0xa4>
 800a514:	f8cd 900c 	str.w	r9, [sp, #12]
 800a518:	2230      	movs	r2, #48	; 0x30
 800a51a:	9b03      	ldr	r3, [sp, #12]
 800a51c:	454b      	cmp	r3, r9
 800a51e:	d307      	bcc.n	800a530 <__cvt+0xbc>
 800a520:	9b03      	ldr	r3, [sp, #12]
 800a522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a524:	1bdb      	subs	r3, r3, r7
 800a526:	4638      	mov	r0, r7
 800a528:	6013      	str	r3, [r2, #0]
 800a52a:	b004      	add	sp, #16
 800a52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a530:	1c59      	adds	r1, r3, #1
 800a532:	9103      	str	r1, [sp, #12]
 800a534:	701a      	strb	r2, [r3, #0]
 800a536:	e7f0      	b.n	800a51a <__cvt+0xa6>

0800a538 <__exponent>:
 800a538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a53a:	4603      	mov	r3, r0
 800a53c:	2900      	cmp	r1, #0
 800a53e:	bfb8      	it	lt
 800a540:	4249      	neglt	r1, r1
 800a542:	f803 2b02 	strb.w	r2, [r3], #2
 800a546:	bfb4      	ite	lt
 800a548:	222d      	movlt	r2, #45	; 0x2d
 800a54a:	222b      	movge	r2, #43	; 0x2b
 800a54c:	2909      	cmp	r1, #9
 800a54e:	7042      	strb	r2, [r0, #1]
 800a550:	dd2a      	ble.n	800a5a8 <__exponent+0x70>
 800a552:	f10d 0407 	add.w	r4, sp, #7
 800a556:	46a4      	mov	ip, r4
 800a558:	270a      	movs	r7, #10
 800a55a:	46a6      	mov	lr, r4
 800a55c:	460a      	mov	r2, r1
 800a55e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a562:	fb07 1516 	mls	r5, r7, r6, r1
 800a566:	3530      	adds	r5, #48	; 0x30
 800a568:	2a63      	cmp	r2, #99	; 0x63
 800a56a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a56e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a572:	4631      	mov	r1, r6
 800a574:	dcf1      	bgt.n	800a55a <__exponent+0x22>
 800a576:	3130      	adds	r1, #48	; 0x30
 800a578:	f1ae 0502 	sub.w	r5, lr, #2
 800a57c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a580:	1c44      	adds	r4, r0, #1
 800a582:	4629      	mov	r1, r5
 800a584:	4561      	cmp	r1, ip
 800a586:	d30a      	bcc.n	800a59e <__exponent+0x66>
 800a588:	f10d 0209 	add.w	r2, sp, #9
 800a58c:	eba2 020e 	sub.w	r2, r2, lr
 800a590:	4565      	cmp	r5, ip
 800a592:	bf88      	it	hi
 800a594:	2200      	movhi	r2, #0
 800a596:	4413      	add	r3, r2
 800a598:	1a18      	subs	r0, r3, r0
 800a59a:	b003      	add	sp, #12
 800a59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a59e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a5a6:	e7ed      	b.n	800a584 <__exponent+0x4c>
 800a5a8:	2330      	movs	r3, #48	; 0x30
 800a5aa:	3130      	adds	r1, #48	; 0x30
 800a5ac:	7083      	strb	r3, [r0, #2]
 800a5ae:	70c1      	strb	r1, [r0, #3]
 800a5b0:	1d03      	adds	r3, r0, #4
 800a5b2:	e7f1      	b.n	800a598 <__exponent+0x60>

0800a5b4 <_printf_float>:
 800a5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	ed2d 8b02 	vpush	{d8}
 800a5bc:	b08d      	sub	sp, #52	; 0x34
 800a5be:	460c      	mov	r4, r1
 800a5c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a5c4:	4616      	mov	r6, r2
 800a5c6:	461f      	mov	r7, r3
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	f002 fedf 	bl	800d38c <_localeconv_r>
 800a5ce:	f8d0 a000 	ldr.w	sl, [r0]
 800a5d2:	4650      	mov	r0, sl
 800a5d4:	f7f5 fdfc 	bl	80001d0 <strlen>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	930a      	str	r3, [sp, #40]	; 0x28
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	9305      	str	r3, [sp, #20]
 800a5e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a5e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a5e8:	3307      	adds	r3, #7
 800a5ea:	f023 0307 	bic.w	r3, r3, #7
 800a5ee:	f103 0208 	add.w	r2, r3, #8
 800a5f2:	f8c8 2000 	str.w	r2, [r8]
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a5fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a602:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a606:	9307      	str	r3, [sp, #28]
 800a608:	f8cd 8018 	str.w	r8, [sp, #24]
 800a60c:	ee08 0a10 	vmov	s16, r0
 800a610:	4b9f      	ldr	r3, [pc, #636]	; (800a890 <_printf_float+0x2dc>)
 800a612:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a616:	f04f 32ff 	mov.w	r2, #4294967295
 800a61a:	f7f6 fa87 	bl	8000b2c <__aeabi_dcmpun>
 800a61e:	bb88      	cbnz	r0, 800a684 <_printf_float+0xd0>
 800a620:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a624:	4b9a      	ldr	r3, [pc, #616]	; (800a890 <_printf_float+0x2dc>)
 800a626:	f04f 32ff 	mov.w	r2, #4294967295
 800a62a:	f7f6 fa61 	bl	8000af0 <__aeabi_dcmple>
 800a62e:	bb48      	cbnz	r0, 800a684 <_printf_float+0xd0>
 800a630:	2200      	movs	r2, #0
 800a632:	2300      	movs	r3, #0
 800a634:	4640      	mov	r0, r8
 800a636:	4649      	mov	r1, r9
 800a638:	f7f6 fa50 	bl	8000adc <__aeabi_dcmplt>
 800a63c:	b110      	cbz	r0, 800a644 <_printf_float+0x90>
 800a63e:	232d      	movs	r3, #45	; 0x2d
 800a640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a644:	4b93      	ldr	r3, [pc, #588]	; (800a894 <_printf_float+0x2e0>)
 800a646:	4894      	ldr	r0, [pc, #592]	; (800a898 <_printf_float+0x2e4>)
 800a648:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a64c:	bf94      	ite	ls
 800a64e:	4698      	movls	r8, r3
 800a650:	4680      	movhi	r8, r0
 800a652:	2303      	movs	r3, #3
 800a654:	6123      	str	r3, [r4, #16]
 800a656:	9b05      	ldr	r3, [sp, #20]
 800a658:	f023 0204 	bic.w	r2, r3, #4
 800a65c:	6022      	str	r2, [r4, #0]
 800a65e:	f04f 0900 	mov.w	r9, #0
 800a662:	9700      	str	r7, [sp, #0]
 800a664:	4633      	mov	r3, r6
 800a666:	aa0b      	add	r2, sp, #44	; 0x2c
 800a668:	4621      	mov	r1, r4
 800a66a:	4628      	mov	r0, r5
 800a66c:	f000 f9d8 	bl	800aa20 <_printf_common>
 800a670:	3001      	adds	r0, #1
 800a672:	f040 8090 	bne.w	800a796 <_printf_float+0x1e2>
 800a676:	f04f 30ff 	mov.w	r0, #4294967295
 800a67a:	b00d      	add	sp, #52	; 0x34
 800a67c:	ecbd 8b02 	vpop	{d8}
 800a680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a684:	4642      	mov	r2, r8
 800a686:	464b      	mov	r3, r9
 800a688:	4640      	mov	r0, r8
 800a68a:	4649      	mov	r1, r9
 800a68c:	f7f6 fa4e 	bl	8000b2c <__aeabi_dcmpun>
 800a690:	b140      	cbz	r0, 800a6a4 <_printf_float+0xf0>
 800a692:	464b      	mov	r3, r9
 800a694:	2b00      	cmp	r3, #0
 800a696:	bfbc      	itt	lt
 800a698:	232d      	movlt	r3, #45	; 0x2d
 800a69a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a69e:	487f      	ldr	r0, [pc, #508]	; (800a89c <_printf_float+0x2e8>)
 800a6a0:	4b7f      	ldr	r3, [pc, #508]	; (800a8a0 <_printf_float+0x2ec>)
 800a6a2:	e7d1      	b.n	800a648 <_printf_float+0x94>
 800a6a4:	6863      	ldr	r3, [r4, #4]
 800a6a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a6aa:	9206      	str	r2, [sp, #24]
 800a6ac:	1c5a      	adds	r2, r3, #1
 800a6ae:	d13f      	bne.n	800a730 <_printf_float+0x17c>
 800a6b0:	2306      	movs	r3, #6
 800a6b2:	6063      	str	r3, [r4, #4]
 800a6b4:	9b05      	ldr	r3, [sp, #20]
 800a6b6:	6861      	ldr	r1, [r4, #4]
 800a6b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9303      	str	r3, [sp, #12]
 800a6c0:	ab0a      	add	r3, sp, #40	; 0x28
 800a6c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a6c6:	ab09      	add	r3, sp, #36	; 0x24
 800a6c8:	ec49 8b10 	vmov	d0, r8, r9
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	6022      	str	r2, [r4, #0]
 800a6d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	f7ff fecd 	bl	800a474 <__cvt>
 800a6da:	9b06      	ldr	r3, [sp, #24]
 800a6dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6de:	2b47      	cmp	r3, #71	; 0x47
 800a6e0:	4680      	mov	r8, r0
 800a6e2:	d108      	bne.n	800a6f6 <_printf_float+0x142>
 800a6e4:	1cc8      	adds	r0, r1, #3
 800a6e6:	db02      	blt.n	800a6ee <_printf_float+0x13a>
 800a6e8:	6863      	ldr	r3, [r4, #4]
 800a6ea:	4299      	cmp	r1, r3
 800a6ec:	dd41      	ble.n	800a772 <_printf_float+0x1be>
 800a6ee:	f1ab 0b02 	sub.w	fp, fp, #2
 800a6f2:	fa5f fb8b 	uxtb.w	fp, fp
 800a6f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a6fa:	d820      	bhi.n	800a73e <_printf_float+0x18a>
 800a6fc:	3901      	subs	r1, #1
 800a6fe:	465a      	mov	r2, fp
 800a700:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a704:	9109      	str	r1, [sp, #36]	; 0x24
 800a706:	f7ff ff17 	bl	800a538 <__exponent>
 800a70a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a70c:	1813      	adds	r3, r2, r0
 800a70e:	2a01      	cmp	r2, #1
 800a710:	4681      	mov	r9, r0
 800a712:	6123      	str	r3, [r4, #16]
 800a714:	dc02      	bgt.n	800a71c <_printf_float+0x168>
 800a716:	6822      	ldr	r2, [r4, #0]
 800a718:	07d2      	lsls	r2, r2, #31
 800a71a:	d501      	bpl.n	800a720 <_printf_float+0x16c>
 800a71c:	3301      	adds	r3, #1
 800a71e:	6123      	str	r3, [r4, #16]
 800a720:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a724:	2b00      	cmp	r3, #0
 800a726:	d09c      	beq.n	800a662 <_printf_float+0xae>
 800a728:	232d      	movs	r3, #45	; 0x2d
 800a72a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a72e:	e798      	b.n	800a662 <_printf_float+0xae>
 800a730:	9a06      	ldr	r2, [sp, #24]
 800a732:	2a47      	cmp	r2, #71	; 0x47
 800a734:	d1be      	bne.n	800a6b4 <_printf_float+0x100>
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1bc      	bne.n	800a6b4 <_printf_float+0x100>
 800a73a:	2301      	movs	r3, #1
 800a73c:	e7b9      	b.n	800a6b2 <_printf_float+0xfe>
 800a73e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a742:	d118      	bne.n	800a776 <_printf_float+0x1c2>
 800a744:	2900      	cmp	r1, #0
 800a746:	6863      	ldr	r3, [r4, #4]
 800a748:	dd0b      	ble.n	800a762 <_printf_float+0x1ae>
 800a74a:	6121      	str	r1, [r4, #16]
 800a74c:	b913      	cbnz	r3, 800a754 <_printf_float+0x1a0>
 800a74e:	6822      	ldr	r2, [r4, #0]
 800a750:	07d0      	lsls	r0, r2, #31
 800a752:	d502      	bpl.n	800a75a <_printf_float+0x1a6>
 800a754:	3301      	adds	r3, #1
 800a756:	440b      	add	r3, r1
 800a758:	6123      	str	r3, [r4, #16]
 800a75a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a75c:	f04f 0900 	mov.w	r9, #0
 800a760:	e7de      	b.n	800a720 <_printf_float+0x16c>
 800a762:	b913      	cbnz	r3, 800a76a <_printf_float+0x1b6>
 800a764:	6822      	ldr	r2, [r4, #0]
 800a766:	07d2      	lsls	r2, r2, #31
 800a768:	d501      	bpl.n	800a76e <_printf_float+0x1ba>
 800a76a:	3302      	adds	r3, #2
 800a76c:	e7f4      	b.n	800a758 <_printf_float+0x1a4>
 800a76e:	2301      	movs	r3, #1
 800a770:	e7f2      	b.n	800a758 <_printf_float+0x1a4>
 800a772:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a778:	4299      	cmp	r1, r3
 800a77a:	db05      	blt.n	800a788 <_printf_float+0x1d4>
 800a77c:	6823      	ldr	r3, [r4, #0]
 800a77e:	6121      	str	r1, [r4, #16]
 800a780:	07d8      	lsls	r0, r3, #31
 800a782:	d5ea      	bpl.n	800a75a <_printf_float+0x1a6>
 800a784:	1c4b      	adds	r3, r1, #1
 800a786:	e7e7      	b.n	800a758 <_printf_float+0x1a4>
 800a788:	2900      	cmp	r1, #0
 800a78a:	bfd4      	ite	le
 800a78c:	f1c1 0202 	rsble	r2, r1, #2
 800a790:	2201      	movgt	r2, #1
 800a792:	4413      	add	r3, r2
 800a794:	e7e0      	b.n	800a758 <_printf_float+0x1a4>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	055a      	lsls	r2, r3, #21
 800a79a:	d407      	bmi.n	800a7ac <_printf_float+0x1f8>
 800a79c:	6923      	ldr	r3, [r4, #16]
 800a79e:	4642      	mov	r2, r8
 800a7a0:	4631      	mov	r1, r6
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	47b8      	blx	r7
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	d12c      	bne.n	800a804 <_printf_float+0x250>
 800a7aa:	e764      	b.n	800a676 <_printf_float+0xc2>
 800a7ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7b0:	f240 80e0 	bls.w	800a974 <_printf_float+0x3c0>
 800a7b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f7f6 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d034      	beq.n	800a82e <_printf_float+0x27a>
 800a7c4:	4a37      	ldr	r2, [pc, #220]	; (800a8a4 <_printf_float+0x2f0>)
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	47b8      	blx	r7
 800a7ce:	3001      	adds	r0, #1
 800a7d0:	f43f af51 	beq.w	800a676 <_printf_float+0xc2>
 800a7d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	db02      	blt.n	800a7e2 <_printf_float+0x22e>
 800a7dc:	6823      	ldr	r3, [r4, #0]
 800a7de:	07d8      	lsls	r0, r3, #31
 800a7e0:	d510      	bpl.n	800a804 <_printf_float+0x250>
 800a7e2:	ee18 3a10 	vmov	r3, s16
 800a7e6:	4652      	mov	r2, sl
 800a7e8:	4631      	mov	r1, r6
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	47b8      	blx	r7
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	f43f af41 	beq.w	800a676 <_printf_float+0xc2>
 800a7f4:	f04f 0800 	mov.w	r8, #0
 800a7f8:	f104 091a 	add.w	r9, r4, #26
 800a7fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7fe:	3b01      	subs	r3, #1
 800a800:	4543      	cmp	r3, r8
 800a802:	dc09      	bgt.n	800a818 <_printf_float+0x264>
 800a804:	6823      	ldr	r3, [r4, #0]
 800a806:	079b      	lsls	r3, r3, #30
 800a808:	f100 8105 	bmi.w	800aa16 <_printf_float+0x462>
 800a80c:	68e0      	ldr	r0, [r4, #12]
 800a80e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a810:	4298      	cmp	r0, r3
 800a812:	bfb8      	it	lt
 800a814:	4618      	movlt	r0, r3
 800a816:	e730      	b.n	800a67a <_printf_float+0xc6>
 800a818:	2301      	movs	r3, #1
 800a81a:	464a      	mov	r2, r9
 800a81c:	4631      	mov	r1, r6
 800a81e:	4628      	mov	r0, r5
 800a820:	47b8      	blx	r7
 800a822:	3001      	adds	r0, #1
 800a824:	f43f af27 	beq.w	800a676 <_printf_float+0xc2>
 800a828:	f108 0801 	add.w	r8, r8, #1
 800a82c:	e7e6      	b.n	800a7fc <_printf_float+0x248>
 800a82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a830:	2b00      	cmp	r3, #0
 800a832:	dc39      	bgt.n	800a8a8 <_printf_float+0x2f4>
 800a834:	4a1b      	ldr	r2, [pc, #108]	; (800a8a4 <_printf_float+0x2f0>)
 800a836:	2301      	movs	r3, #1
 800a838:	4631      	mov	r1, r6
 800a83a:	4628      	mov	r0, r5
 800a83c:	47b8      	blx	r7
 800a83e:	3001      	adds	r0, #1
 800a840:	f43f af19 	beq.w	800a676 <_printf_float+0xc2>
 800a844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a848:	4313      	orrs	r3, r2
 800a84a:	d102      	bne.n	800a852 <_printf_float+0x29e>
 800a84c:	6823      	ldr	r3, [r4, #0]
 800a84e:	07d9      	lsls	r1, r3, #31
 800a850:	d5d8      	bpl.n	800a804 <_printf_float+0x250>
 800a852:	ee18 3a10 	vmov	r3, s16
 800a856:	4652      	mov	r2, sl
 800a858:	4631      	mov	r1, r6
 800a85a:	4628      	mov	r0, r5
 800a85c:	47b8      	blx	r7
 800a85e:	3001      	adds	r0, #1
 800a860:	f43f af09 	beq.w	800a676 <_printf_float+0xc2>
 800a864:	f04f 0900 	mov.w	r9, #0
 800a868:	f104 0a1a 	add.w	sl, r4, #26
 800a86c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a86e:	425b      	negs	r3, r3
 800a870:	454b      	cmp	r3, r9
 800a872:	dc01      	bgt.n	800a878 <_printf_float+0x2c4>
 800a874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a876:	e792      	b.n	800a79e <_printf_float+0x1ea>
 800a878:	2301      	movs	r3, #1
 800a87a:	4652      	mov	r2, sl
 800a87c:	4631      	mov	r1, r6
 800a87e:	4628      	mov	r0, r5
 800a880:	47b8      	blx	r7
 800a882:	3001      	adds	r0, #1
 800a884:	f43f aef7 	beq.w	800a676 <_printf_float+0xc2>
 800a888:	f109 0901 	add.w	r9, r9, #1
 800a88c:	e7ee      	b.n	800a86c <_printf_float+0x2b8>
 800a88e:	bf00      	nop
 800a890:	7fefffff 	.word	0x7fefffff
 800a894:	0800e70c 	.word	0x0800e70c
 800a898:	0800e710 	.word	0x0800e710
 800a89c:	0800e718 	.word	0x0800e718
 800a8a0:	0800e714 	.word	0x0800e714
 800a8a4:	0800e71c 	.word	0x0800e71c
 800a8a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	bfa8      	it	ge
 800a8b0:	461a      	movge	r2, r3
 800a8b2:	2a00      	cmp	r2, #0
 800a8b4:	4691      	mov	r9, r2
 800a8b6:	dc37      	bgt.n	800a928 <_printf_float+0x374>
 800a8b8:	f04f 0b00 	mov.w	fp, #0
 800a8bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8c0:	f104 021a 	add.w	r2, r4, #26
 800a8c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8c6:	9305      	str	r3, [sp, #20]
 800a8c8:	eba3 0309 	sub.w	r3, r3, r9
 800a8cc:	455b      	cmp	r3, fp
 800a8ce:	dc33      	bgt.n	800a938 <_printf_float+0x384>
 800a8d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	db3b      	blt.n	800a950 <_printf_float+0x39c>
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	07da      	lsls	r2, r3, #31
 800a8dc:	d438      	bmi.n	800a950 <_printf_float+0x39c>
 800a8de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8e0:	9b05      	ldr	r3, [sp, #20]
 800a8e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	eba2 0901 	sub.w	r9, r2, r1
 800a8ea:	4599      	cmp	r9, r3
 800a8ec:	bfa8      	it	ge
 800a8ee:	4699      	movge	r9, r3
 800a8f0:	f1b9 0f00 	cmp.w	r9, #0
 800a8f4:	dc35      	bgt.n	800a962 <_printf_float+0x3ae>
 800a8f6:	f04f 0800 	mov.w	r8, #0
 800a8fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8fe:	f104 0a1a 	add.w	sl, r4, #26
 800a902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a906:	1a9b      	subs	r3, r3, r2
 800a908:	eba3 0309 	sub.w	r3, r3, r9
 800a90c:	4543      	cmp	r3, r8
 800a90e:	f77f af79 	ble.w	800a804 <_printf_float+0x250>
 800a912:	2301      	movs	r3, #1
 800a914:	4652      	mov	r2, sl
 800a916:	4631      	mov	r1, r6
 800a918:	4628      	mov	r0, r5
 800a91a:	47b8      	blx	r7
 800a91c:	3001      	adds	r0, #1
 800a91e:	f43f aeaa 	beq.w	800a676 <_printf_float+0xc2>
 800a922:	f108 0801 	add.w	r8, r8, #1
 800a926:	e7ec      	b.n	800a902 <_printf_float+0x34e>
 800a928:	4613      	mov	r3, r2
 800a92a:	4631      	mov	r1, r6
 800a92c:	4642      	mov	r2, r8
 800a92e:	4628      	mov	r0, r5
 800a930:	47b8      	blx	r7
 800a932:	3001      	adds	r0, #1
 800a934:	d1c0      	bne.n	800a8b8 <_printf_float+0x304>
 800a936:	e69e      	b.n	800a676 <_printf_float+0xc2>
 800a938:	2301      	movs	r3, #1
 800a93a:	4631      	mov	r1, r6
 800a93c:	4628      	mov	r0, r5
 800a93e:	9205      	str	r2, [sp, #20]
 800a940:	47b8      	blx	r7
 800a942:	3001      	adds	r0, #1
 800a944:	f43f ae97 	beq.w	800a676 <_printf_float+0xc2>
 800a948:	9a05      	ldr	r2, [sp, #20]
 800a94a:	f10b 0b01 	add.w	fp, fp, #1
 800a94e:	e7b9      	b.n	800a8c4 <_printf_float+0x310>
 800a950:	ee18 3a10 	vmov	r3, s16
 800a954:	4652      	mov	r2, sl
 800a956:	4631      	mov	r1, r6
 800a958:	4628      	mov	r0, r5
 800a95a:	47b8      	blx	r7
 800a95c:	3001      	adds	r0, #1
 800a95e:	d1be      	bne.n	800a8de <_printf_float+0x32a>
 800a960:	e689      	b.n	800a676 <_printf_float+0xc2>
 800a962:	9a05      	ldr	r2, [sp, #20]
 800a964:	464b      	mov	r3, r9
 800a966:	4442      	add	r2, r8
 800a968:	4631      	mov	r1, r6
 800a96a:	4628      	mov	r0, r5
 800a96c:	47b8      	blx	r7
 800a96e:	3001      	adds	r0, #1
 800a970:	d1c1      	bne.n	800a8f6 <_printf_float+0x342>
 800a972:	e680      	b.n	800a676 <_printf_float+0xc2>
 800a974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a976:	2a01      	cmp	r2, #1
 800a978:	dc01      	bgt.n	800a97e <_printf_float+0x3ca>
 800a97a:	07db      	lsls	r3, r3, #31
 800a97c:	d538      	bpl.n	800a9f0 <_printf_float+0x43c>
 800a97e:	2301      	movs	r3, #1
 800a980:	4642      	mov	r2, r8
 800a982:	4631      	mov	r1, r6
 800a984:	4628      	mov	r0, r5
 800a986:	47b8      	blx	r7
 800a988:	3001      	adds	r0, #1
 800a98a:	f43f ae74 	beq.w	800a676 <_printf_float+0xc2>
 800a98e:	ee18 3a10 	vmov	r3, s16
 800a992:	4652      	mov	r2, sl
 800a994:	4631      	mov	r1, r6
 800a996:	4628      	mov	r0, r5
 800a998:	47b8      	blx	r7
 800a99a:	3001      	adds	r0, #1
 800a99c:	f43f ae6b 	beq.w	800a676 <_printf_float+0xc2>
 800a9a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	f7f6 f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9ac:	b9d8      	cbnz	r0, 800a9e6 <_printf_float+0x432>
 800a9ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9b0:	f108 0201 	add.w	r2, r8, #1
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	47b8      	blx	r7
 800a9bc:	3001      	adds	r0, #1
 800a9be:	d10e      	bne.n	800a9de <_printf_float+0x42a>
 800a9c0:	e659      	b.n	800a676 <_printf_float+0xc2>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	4652      	mov	r2, sl
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	47b8      	blx	r7
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	f43f ae52 	beq.w	800a676 <_printf_float+0xc2>
 800a9d2:	f108 0801 	add.w	r8, r8, #1
 800a9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	4543      	cmp	r3, r8
 800a9dc:	dcf1      	bgt.n	800a9c2 <_printf_float+0x40e>
 800a9de:	464b      	mov	r3, r9
 800a9e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9e4:	e6dc      	b.n	800a7a0 <_printf_float+0x1ec>
 800a9e6:	f04f 0800 	mov.w	r8, #0
 800a9ea:	f104 0a1a 	add.w	sl, r4, #26
 800a9ee:	e7f2      	b.n	800a9d6 <_printf_float+0x422>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	4642      	mov	r2, r8
 800a9f4:	e7df      	b.n	800a9b6 <_printf_float+0x402>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	464a      	mov	r2, r9
 800a9fa:	4631      	mov	r1, r6
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	47b8      	blx	r7
 800aa00:	3001      	adds	r0, #1
 800aa02:	f43f ae38 	beq.w	800a676 <_printf_float+0xc2>
 800aa06:	f108 0801 	add.w	r8, r8, #1
 800aa0a:	68e3      	ldr	r3, [r4, #12]
 800aa0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa0e:	1a5b      	subs	r3, r3, r1
 800aa10:	4543      	cmp	r3, r8
 800aa12:	dcf0      	bgt.n	800a9f6 <_printf_float+0x442>
 800aa14:	e6fa      	b.n	800a80c <_printf_float+0x258>
 800aa16:	f04f 0800 	mov.w	r8, #0
 800aa1a:	f104 0919 	add.w	r9, r4, #25
 800aa1e:	e7f4      	b.n	800aa0a <_printf_float+0x456>

0800aa20 <_printf_common>:
 800aa20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa24:	4616      	mov	r6, r2
 800aa26:	4699      	mov	r9, r3
 800aa28:	688a      	ldr	r2, [r1, #8]
 800aa2a:	690b      	ldr	r3, [r1, #16]
 800aa2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa30:	4293      	cmp	r3, r2
 800aa32:	bfb8      	it	lt
 800aa34:	4613      	movlt	r3, r2
 800aa36:	6033      	str	r3, [r6, #0]
 800aa38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	460c      	mov	r4, r1
 800aa40:	b10a      	cbz	r2, 800aa46 <_printf_common+0x26>
 800aa42:	3301      	adds	r3, #1
 800aa44:	6033      	str	r3, [r6, #0]
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	0699      	lsls	r1, r3, #26
 800aa4a:	bf42      	ittt	mi
 800aa4c:	6833      	ldrmi	r3, [r6, #0]
 800aa4e:	3302      	addmi	r3, #2
 800aa50:	6033      	strmi	r3, [r6, #0]
 800aa52:	6825      	ldr	r5, [r4, #0]
 800aa54:	f015 0506 	ands.w	r5, r5, #6
 800aa58:	d106      	bne.n	800aa68 <_printf_common+0x48>
 800aa5a:	f104 0a19 	add.w	sl, r4, #25
 800aa5e:	68e3      	ldr	r3, [r4, #12]
 800aa60:	6832      	ldr	r2, [r6, #0]
 800aa62:	1a9b      	subs	r3, r3, r2
 800aa64:	42ab      	cmp	r3, r5
 800aa66:	dc26      	bgt.n	800aab6 <_printf_common+0x96>
 800aa68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa6c:	1e13      	subs	r3, r2, #0
 800aa6e:	6822      	ldr	r2, [r4, #0]
 800aa70:	bf18      	it	ne
 800aa72:	2301      	movne	r3, #1
 800aa74:	0692      	lsls	r2, r2, #26
 800aa76:	d42b      	bmi.n	800aad0 <_printf_common+0xb0>
 800aa78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	4638      	mov	r0, r7
 800aa80:	47c0      	blx	r8
 800aa82:	3001      	adds	r0, #1
 800aa84:	d01e      	beq.n	800aac4 <_printf_common+0xa4>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	68e5      	ldr	r5, [r4, #12]
 800aa8a:	6832      	ldr	r2, [r6, #0]
 800aa8c:	f003 0306 	and.w	r3, r3, #6
 800aa90:	2b04      	cmp	r3, #4
 800aa92:	bf08      	it	eq
 800aa94:	1aad      	subeq	r5, r5, r2
 800aa96:	68a3      	ldr	r3, [r4, #8]
 800aa98:	6922      	ldr	r2, [r4, #16]
 800aa9a:	bf0c      	ite	eq
 800aa9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaa0:	2500      	movne	r5, #0
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	bfc4      	itt	gt
 800aaa6:	1a9b      	subgt	r3, r3, r2
 800aaa8:	18ed      	addgt	r5, r5, r3
 800aaaa:	2600      	movs	r6, #0
 800aaac:	341a      	adds	r4, #26
 800aaae:	42b5      	cmp	r5, r6
 800aab0:	d11a      	bne.n	800aae8 <_printf_common+0xc8>
 800aab2:	2000      	movs	r0, #0
 800aab4:	e008      	b.n	800aac8 <_printf_common+0xa8>
 800aab6:	2301      	movs	r3, #1
 800aab8:	4652      	mov	r2, sl
 800aaba:	4649      	mov	r1, r9
 800aabc:	4638      	mov	r0, r7
 800aabe:	47c0      	blx	r8
 800aac0:	3001      	adds	r0, #1
 800aac2:	d103      	bne.n	800aacc <_printf_common+0xac>
 800aac4:	f04f 30ff 	mov.w	r0, #4294967295
 800aac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aacc:	3501      	adds	r5, #1
 800aace:	e7c6      	b.n	800aa5e <_printf_common+0x3e>
 800aad0:	18e1      	adds	r1, r4, r3
 800aad2:	1c5a      	adds	r2, r3, #1
 800aad4:	2030      	movs	r0, #48	; 0x30
 800aad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aada:	4422      	add	r2, r4
 800aadc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aae4:	3302      	adds	r3, #2
 800aae6:	e7c7      	b.n	800aa78 <_printf_common+0x58>
 800aae8:	2301      	movs	r3, #1
 800aaea:	4622      	mov	r2, r4
 800aaec:	4649      	mov	r1, r9
 800aaee:	4638      	mov	r0, r7
 800aaf0:	47c0      	blx	r8
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	d0e6      	beq.n	800aac4 <_printf_common+0xa4>
 800aaf6:	3601      	adds	r6, #1
 800aaf8:	e7d9      	b.n	800aaae <_printf_common+0x8e>
	...

0800aafc <_printf_i>:
 800aafc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab00:	460c      	mov	r4, r1
 800ab02:	4691      	mov	r9, r2
 800ab04:	7e27      	ldrb	r7, [r4, #24]
 800ab06:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ab08:	2f78      	cmp	r7, #120	; 0x78
 800ab0a:	4680      	mov	r8, r0
 800ab0c:	469a      	mov	sl, r3
 800ab0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab12:	d807      	bhi.n	800ab24 <_printf_i+0x28>
 800ab14:	2f62      	cmp	r7, #98	; 0x62
 800ab16:	d80a      	bhi.n	800ab2e <_printf_i+0x32>
 800ab18:	2f00      	cmp	r7, #0
 800ab1a:	f000 80d8 	beq.w	800acce <_printf_i+0x1d2>
 800ab1e:	2f58      	cmp	r7, #88	; 0x58
 800ab20:	f000 80a3 	beq.w	800ac6a <_printf_i+0x16e>
 800ab24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab2c:	e03a      	b.n	800aba4 <_printf_i+0xa8>
 800ab2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab32:	2b15      	cmp	r3, #21
 800ab34:	d8f6      	bhi.n	800ab24 <_printf_i+0x28>
 800ab36:	a001      	add	r0, pc, #4	; (adr r0, 800ab3c <_printf_i+0x40>)
 800ab38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ab3c:	0800ab95 	.word	0x0800ab95
 800ab40:	0800aba9 	.word	0x0800aba9
 800ab44:	0800ab25 	.word	0x0800ab25
 800ab48:	0800ab25 	.word	0x0800ab25
 800ab4c:	0800ab25 	.word	0x0800ab25
 800ab50:	0800ab25 	.word	0x0800ab25
 800ab54:	0800aba9 	.word	0x0800aba9
 800ab58:	0800ab25 	.word	0x0800ab25
 800ab5c:	0800ab25 	.word	0x0800ab25
 800ab60:	0800ab25 	.word	0x0800ab25
 800ab64:	0800ab25 	.word	0x0800ab25
 800ab68:	0800acb5 	.word	0x0800acb5
 800ab6c:	0800abd9 	.word	0x0800abd9
 800ab70:	0800ac97 	.word	0x0800ac97
 800ab74:	0800ab25 	.word	0x0800ab25
 800ab78:	0800ab25 	.word	0x0800ab25
 800ab7c:	0800acd7 	.word	0x0800acd7
 800ab80:	0800ab25 	.word	0x0800ab25
 800ab84:	0800abd9 	.word	0x0800abd9
 800ab88:	0800ab25 	.word	0x0800ab25
 800ab8c:	0800ab25 	.word	0x0800ab25
 800ab90:	0800ac9f 	.word	0x0800ac9f
 800ab94:	680b      	ldr	r3, [r1, #0]
 800ab96:	1d1a      	adds	r2, r3, #4
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	600a      	str	r2, [r1, #0]
 800ab9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aba4:	2301      	movs	r3, #1
 800aba6:	e0a3      	b.n	800acf0 <_printf_i+0x1f4>
 800aba8:	6825      	ldr	r5, [r4, #0]
 800abaa:	6808      	ldr	r0, [r1, #0]
 800abac:	062e      	lsls	r6, r5, #24
 800abae:	f100 0304 	add.w	r3, r0, #4
 800abb2:	d50a      	bpl.n	800abca <_printf_i+0xce>
 800abb4:	6805      	ldr	r5, [r0, #0]
 800abb6:	600b      	str	r3, [r1, #0]
 800abb8:	2d00      	cmp	r5, #0
 800abba:	da03      	bge.n	800abc4 <_printf_i+0xc8>
 800abbc:	232d      	movs	r3, #45	; 0x2d
 800abbe:	426d      	negs	r5, r5
 800abc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abc4:	485e      	ldr	r0, [pc, #376]	; (800ad40 <_printf_i+0x244>)
 800abc6:	230a      	movs	r3, #10
 800abc8:	e019      	b.n	800abfe <_printf_i+0x102>
 800abca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800abce:	6805      	ldr	r5, [r0, #0]
 800abd0:	600b      	str	r3, [r1, #0]
 800abd2:	bf18      	it	ne
 800abd4:	b22d      	sxthne	r5, r5
 800abd6:	e7ef      	b.n	800abb8 <_printf_i+0xbc>
 800abd8:	680b      	ldr	r3, [r1, #0]
 800abda:	6825      	ldr	r5, [r4, #0]
 800abdc:	1d18      	adds	r0, r3, #4
 800abde:	6008      	str	r0, [r1, #0]
 800abe0:	0628      	lsls	r0, r5, #24
 800abe2:	d501      	bpl.n	800abe8 <_printf_i+0xec>
 800abe4:	681d      	ldr	r5, [r3, #0]
 800abe6:	e002      	b.n	800abee <_printf_i+0xf2>
 800abe8:	0669      	lsls	r1, r5, #25
 800abea:	d5fb      	bpl.n	800abe4 <_printf_i+0xe8>
 800abec:	881d      	ldrh	r5, [r3, #0]
 800abee:	4854      	ldr	r0, [pc, #336]	; (800ad40 <_printf_i+0x244>)
 800abf0:	2f6f      	cmp	r7, #111	; 0x6f
 800abf2:	bf0c      	ite	eq
 800abf4:	2308      	moveq	r3, #8
 800abf6:	230a      	movne	r3, #10
 800abf8:	2100      	movs	r1, #0
 800abfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abfe:	6866      	ldr	r6, [r4, #4]
 800ac00:	60a6      	str	r6, [r4, #8]
 800ac02:	2e00      	cmp	r6, #0
 800ac04:	bfa2      	ittt	ge
 800ac06:	6821      	ldrge	r1, [r4, #0]
 800ac08:	f021 0104 	bicge.w	r1, r1, #4
 800ac0c:	6021      	strge	r1, [r4, #0]
 800ac0e:	b90d      	cbnz	r5, 800ac14 <_printf_i+0x118>
 800ac10:	2e00      	cmp	r6, #0
 800ac12:	d04d      	beq.n	800acb0 <_printf_i+0x1b4>
 800ac14:	4616      	mov	r6, r2
 800ac16:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac1a:	fb03 5711 	mls	r7, r3, r1, r5
 800ac1e:	5dc7      	ldrb	r7, [r0, r7]
 800ac20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac24:	462f      	mov	r7, r5
 800ac26:	42bb      	cmp	r3, r7
 800ac28:	460d      	mov	r5, r1
 800ac2a:	d9f4      	bls.n	800ac16 <_printf_i+0x11a>
 800ac2c:	2b08      	cmp	r3, #8
 800ac2e:	d10b      	bne.n	800ac48 <_printf_i+0x14c>
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	07df      	lsls	r7, r3, #31
 800ac34:	d508      	bpl.n	800ac48 <_printf_i+0x14c>
 800ac36:	6923      	ldr	r3, [r4, #16]
 800ac38:	6861      	ldr	r1, [r4, #4]
 800ac3a:	4299      	cmp	r1, r3
 800ac3c:	bfde      	ittt	le
 800ac3e:	2330      	movle	r3, #48	; 0x30
 800ac40:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac44:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac48:	1b92      	subs	r2, r2, r6
 800ac4a:	6122      	str	r2, [r4, #16]
 800ac4c:	f8cd a000 	str.w	sl, [sp]
 800ac50:	464b      	mov	r3, r9
 800ac52:	aa03      	add	r2, sp, #12
 800ac54:	4621      	mov	r1, r4
 800ac56:	4640      	mov	r0, r8
 800ac58:	f7ff fee2 	bl	800aa20 <_printf_common>
 800ac5c:	3001      	adds	r0, #1
 800ac5e:	d14c      	bne.n	800acfa <_printf_i+0x1fe>
 800ac60:	f04f 30ff 	mov.w	r0, #4294967295
 800ac64:	b004      	add	sp, #16
 800ac66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6a:	4835      	ldr	r0, [pc, #212]	; (800ad40 <_printf_i+0x244>)
 800ac6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	680e      	ldr	r6, [r1, #0]
 800ac74:	061f      	lsls	r7, r3, #24
 800ac76:	f856 5b04 	ldr.w	r5, [r6], #4
 800ac7a:	600e      	str	r6, [r1, #0]
 800ac7c:	d514      	bpl.n	800aca8 <_printf_i+0x1ac>
 800ac7e:	07d9      	lsls	r1, r3, #31
 800ac80:	bf44      	itt	mi
 800ac82:	f043 0320 	orrmi.w	r3, r3, #32
 800ac86:	6023      	strmi	r3, [r4, #0]
 800ac88:	b91d      	cbnz	r5, 800ac92 <_printf_i+0x196>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	f023 0320 	bic.w	r3, r3, #32
 800ac90:	6023      	str	r3, [r4, #0]
 800ac92:	2310      	movs	r3, #16
 800ac94:	e7b0      	b.n	800abf8 <_printf_i+0xfc>
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	f043 0320 	orr.w	r3, r3, #32
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	2378      	movs	r3, #120	; 0x78
 800aca0:	4828      	ldr	r0, [pc, #160]	; (800ad44 <_printf_i+0x248>)
 800aca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aca6:	e7e3      	b.n	800ac70 <_printf_i+0x174>
 800aca8:	065e      	lsls	r6, r3, #25
 800acaa:	bf48      	it	mi
 800acac:	b2ad      	uxthmi	r5, r5
 800acae:	e7e6      	b.n	800ac7e <_printf_i+0x182>
 800acb0:	4616      	mov	r6, r2
 800acb2:	e7bb      	b.n	800ac2c <_printf_i+0x130>
 800acb4:	680b      	ldr	r3, [r1, #0]
 800acb6:	6826      	ldr	r6, [r4, #0]
 800acb8:	6960      	ldr	r0, [r4, #20]
 800acba:	1d1d      	adds	r5, r3, #4
 800acbc:	600d      	str	r5, [r1, #0]
 800acbe:	0635      	lsls	r5, r6, #24
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	d501      	bpl.n	800acc8 <_printf_i+0x1cc>
 800acc4:	6018      	str	r0, [r3, #0]
 800acc6:	e002      	b.n	800acce <_printf_i+0x1d2>
 800acc8:	0671      	lsls	r1, r6, #25
 800acca:	d5fb      	bpl.n	800acc4 <_printf_i+0x1c8>
 800accc:	8018      	strh	r0, [r3, #0]
 800acce:	2300      	movs	r3, #0
 800acd0:	6123      	str	r3, [r4, #16]
 800acd2:	4616      	mov	r6, r2
 800acd4:	e7ba      	b.n	800ac4c <_printf_i+0x150>
 800acd6:	680b      	ldr	r3, [r1, #0]
 800acd8:	1d1a      	adds	r2, r3, #4
 800acda:	600a      	str	r2, [r1, #0]
 800acdc:	681e      	ldr	r6, [r3, #0]
 800acde:	6862      	ldr	r2, [r4, #4]
 800ace0:	2100      	movs	r1, #0
 800ace2:	4630      	mov	r0, r6
 800ace4:	f7f5 fa7c 	bl	80001e0 <memchr>
 800ace8:	b108      	cbz	r0, 800acee <_printf_i+0x1f2>
 800acea:	1b80      	subs	r0, r0, r6
 800acec:	6060      	str	r0, [r4, #4]
 800acee:	6863      	ldr	r3, [r4, #4]
 800acf0:	6123      	str	r3, [r4, #16]
 800acf2:	2300      	movs	r3, #0
 800acf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acf8:	e7a8      	b.n	800ac4c <_printf_i+0x150>
 800acfa:	6923      	ldr	r3, [r4, #16]
 800acfc:	4632      	mov	r2, r6
 800acfe:	4649      	mov	r1, r9
 800ad00:	4640      	mov	r0, r8
 800ad02:	47d0      	blx	sl
 800ad04:	3001      	adds	r0, #1
 800ad06:	d0ab      	beq.n	800ac60 <_printf_i+0x164>
 800ad08:	6823      	ldr	r3, [r4, #0]
 800ad0a:	079b      	lsls	r3, r3, #30
 800ad0c:	d413      	bmi.n	800ad36 <_printf_i+0x23a>
 800ad0e:	68e0      	ldr	r0, [r4, #12]
 800ad10:	9b03      	ldr	r3, [sp, #12]
 800ad12:	4298      	cmp	r0, r3
 800ad14:	bfb8      	it	lt
 800ad16:	4618      	movlt	r0, r3
 800ad18:	e7a4      	b.n	800ac64 <_printf_i+0x168>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	4632      	mov	r2, r6
 800ad1e:	4649      	mov	r1, r9
 800ad20:	4640      	mov	r0, r8
 800ad22:	47d0      	blx	sl
 800ad24:	3001      	adds	r0, #1
 800ad26:	d09b      	beq.n	800ac60 <_printf_i+0x164>
 800ad28:	3501      	adds	r5, #1
 800ad2a:	68e3      	ldr	r3, [r4, #12]
 800ad2c:	9903      	ldr	r1, [sp, #12]
 800ad2e:	1a5b      	subs	r3, r3, r1
 800ad30:	42ab      	cmp	r3, r5
 800ad32:	dcf2      	bgt.n	800ad1a <_printf_i+0x21e>
 800ad34:	e7eb      	b.n	800ad0e <_printf_i+0x212>
 800ad36:	2500      	movs	r5, #0
 800ad38:	f104 0619 	add.w	r6, r4, #25
 800ad3c:	e7f5      	b.n	800ad2a <_printf_i+0x22e>
 800ad3e:	bf00      	nop
 800ad40:	0800e71e 	.word	0x0800e71e
 800ad44:	0800e72f 	.word	0x0800e72f

0800ad48 <iprintf>:
 800ad48:	b40f      	push	{r0, r1, r2, r3}
 800ad4a:	4b0a      	ldr	r3, [pc, #40]	; (800ad74 <iprintf+0x2c>)
 800ad4c:	b513      	push	{r0, r1, r4, lr}
 800ad4e:	681c      	ldr	r4, [r3, #0]
 800ad50:	b124      	cbz	r4, 800ad5c <iprintf+0x14>
 800ad52:	69a3      	ldr	r3, [r4, #24]
 800ad54:	b913      	cbnz	r3, 800ad5c <iprintf+0x14>
 800ad56:	4620      	mov	r0, r4
 800ad58:	f001 ff0c 	bl	800cb74 <__sinit>
 800ad5c:	ab05      	add	r3, sp, #20
 800ad5e:	9a04      	ldr	r2, [sp, #16]
 800ad60:	68a1      	ldr	r1, [r4, #8]
 800ad62:	9301      	str	r3, [sp, #4]
 800ad64:	4620      	mov	r0, r4
 800ad66:	f003 f935 	bl	800dfd4 <_vfiprintf_r>
 800ad6a:	b002      	add	sp, #8
 800ad6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad70:	b004      	add	sp, #16
 800ad72:	4770      	bx	lr
 800ad74:	20000014 	.word	0x20000014

0800ad78 <_puts_r>:
 800ad78:	b570      	push	{r4, r5, r6, lr}
 800ad7a:	460e      	mov	r6, r1
 800ad7c:	4605      	mov	r5, r0
 800ad7e:	b118      	cbz	r0, 800ad88 <_puts_r+0x10>
 800ad80:	6983      	ldr	r3, [r0, #24]
 800ad82:	b90b      	cbnz	r3, 800ad88 <_puts_r+0x10>
 800ad84:	f001 fef6 	bl	800cb74 <__sinit>
 800ad88:	69ab      	ldr	r3, [r5, #24]
 800ad8a:	68ac      	ldr	r4, [r5, #8]
 800ad8c:	b913      	cbnz	r3, 800ad94 <_puts_r+0x1c>
 800ad8e:	4628      	mov	r0, r5
 800ad90:	f001 fef0 	bl	800cb74 <__sinit>
 800ad94:	4b2c      	ldr	r3, [pc, #176]	; (800ae48 <_puts_r+0xd0>)
 800ad96:	429c      	cmp	r4, r3
 800ad98:	d120      	bne.n	800addc <_puts_r+0x64>
 800ad9a:	686c      	ldr	r4, [r5, #4]
 800ad9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad9e:	07db      	lsls	r3, r3, #31
 800ada0:	d405      	bmi.n	800adae <_puts_r+0x36>
 800ada2:	89a3      	ldrh	r3, [r4, #12]
 800ada4:	0598      	lsls	r0, r3, #22
 800ada6:	d402      	bmi.n	800adae <_puts_r+0x36>
 800ada8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adaa:	f002 faf4 	bl	800d396 <__retarget_lock_acquire_recursive>
 800adae:	89a3      	ldrh	r3, [r4, #12]
 800adb0:	0719      	lsls	r1, r3, #28
 800adb2:	d51d      	bpl.n	800adf0 <_puts_r+0x78>
 800adb4:	6923      	ldr	r3, [r4, #16]
 800adb6:	b1db      	cbz	r3, 800adf0 <_puts_r+0x78>
 800adb8:	3e01      	subs	r6, #1
 800adba:	68a3      	ldr	r3, [r4, #8]
 800adbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800adc0:	3b01      	subs	r3, #1
 800adc2:	60a3      	str	r3, [r4, #8]
 800adc4:	bb39      	cbnz	r1, 800ae16 <_puts_r+0x9e>
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	da38      	bge.n	800ae3c <_puts_r+0xc4>
 800adca:	4622      	mov	r2, r4
 800adcc:	210a      	movs	r1, #10
 800adce:	4628      	mov	r0, r5
 800add0:	f000 fe7c 	bl	800bacc <__swbuf_r>
 800add4:	3001      	adds	r0, #1
 800add6:	d011      	beq.n	800adfc <_puts_r+0x84>
 800add8:	250a      	movs	r5, #10
 800adda:	e011      	b.n	800ae00 <_puts_r+0x88>
 800addc:	4b1b      	ldr	r3, [pc, #108]	; (800ae4c <_puts_r+0xd4>)
 800adde:	429c      	cmp	r4, r3
 800ade0:	d101      	bne.n	800ade6 <_puts_r+0x6e>
 800ade2:	68ac      	ldr	r4, [r5, #8]
 800ade4:	e7da      	b.n	800ad9c <_puts_r+0x24>
 800ade6:	4b1a      	ldr	r3, [pc, #104]	; (800ae50 <_puts_r+0xd8>)
 800ade8:	429c      	cmp	r4, r3
 800adea:	bf08      	it	eq
 800adec:	68ec      	ldreq	r4, [r5, #12]
 800adee:	e7d5      	b.n	800ad9c <_puts_r+0x24>
 800adf0:	4621      	mov	r1, r4
 800adf2:	4628      	mov	r0, r5
 800adf4:	f000 febc 	bl	800bb70 <__swsetup_r>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d0dd      	beq.n	800adb8 <_puts_r+0x40>
 800adfc:	f04f 35ff 	mov.w	r5, #4294967295
 800ae00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae02:	07da      	lsls	r2, r3, #31
 800ae04:	d405      	bmi.n	800ae12 <_puts_r+0x9a>
 800ae06:	89a3      	ldrh	r3, [r4, #12]
 800ae08:	059b      	lsls	r3, r3, #22
 800ae0a:	d402      	bmi.n	800ae12 <_puts_r+0x9a>
 800ae0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae0e:	f002 fac3 	bl	800d398 <__retarget_lock_release_recursive>
 800ae12:	4628      	mov	r0, r5
 800ae14:	bd70      	pop	{r4, r5, r6, pc}
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	da04      	bge.n	800ae24 <_puts_r+0xac>
 800ae1a:	69a2      	ldr	r2, [r4, #24]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	dc06      	bgt.n	800ae2e <_puts_r+0xb6>
 800ae20:	290a      	cmp	r1, #10
 800ae22:	d004      	beq.n	800ae2e <_puts_r+0xb6>
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	1c5a      	adds	r2, r3, #1
 800ae28:	6022      	str	r2, [r4, #0]
 800ae2a:	7019      	strb	r1, [r3, #0]
 800ae2c:	e7c5      	b.n	800adba <_puts_r+0x42>
 800ae2e:	4622      	mov	r2, r4
 800ae30:	4628      	mov	r0, r5
 800ae32:	f000 fe4b 	bl	800bacc <__swbuf_r>
 800ae36:	3001      	adds	r0, #1
 800ae38:	d1bf      	bne.n	800adba <_puts_r+0x42>
 800ae3a:	e7df      	b.n	800adfc <_puts_r+0x84>
 800ae3c:	6823      	ldr	r3, [r4, #0]
 800ae3e:	250a      	movs	r5, #10
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	6022      	str	r2, [r4, #0]
 800ae44:	701d      	strb	r5, [r3, #0]
 800ae46:	e7db      	b.n	800ae00 <_puts_r+0x88>
 800ae48:	0800e844 	.word	0x0800e844
 800ae4c:	0800e864 	.word	0x0800e864
 800ae50:	0800e824 	.word	0x0800e824

0800ae54 <puts>:
 800ae54:	4b02      	ldr	r3, [pc, #8]	; (800ae60 <puts+0xc>)
 800ae56:	4601      	mov	r1, r0
 800ae58:	6818      	ldr	r0, [r3, #0]
 800ae5a:	f7ff bf8d 	b.w	800ad78 <_puts_r>
 800ae5e:	bf00      	nop
 800ae60:	20000014 	.word	0x20000014

0800ae64 <sulp>:
 800ae64:	b570      	push	{r4, r5, r6, lr}
 800ae66:	4604      	mov	r4, r0
 800ae68:	460d      	mov	r5, r1
 800ae6a:	ec45 4b10 	vmov	d0, r4, r5
 800ae6e:	4616      	mov	r6, r2
 800ae70:	f002 fe7e 	bl	800db70 <__ulp>
 800ae74:	ec51 0b10 	vmov	r0, r1, d0
 800ae78:	b17e      	cbz	r6, 800ae9a <sulp+0x36>
 800ae7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae7e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	dd09      	ble.n	800ae9a <sulp+0x36>
 800ae86:	051b      	lsls	r3, r3, #20
 800ae88:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ae8c:	2400      	movs	r4, #0
 800ae8e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ae92:	4622      	mov	r2, r4
 800ae94:	462b      	mov	r3, r5
 800ae96:	f7f5 fbaf 	bl	80005f8 <__aeabi_dmul>
 800ae9a:	bd70      	pop	{r4, r5, r6, pc}
 800ae9c:	0000      	movs	r0, r0
	...

0800aea0 <_strtod_l>:
 800aea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	b0a3      	sub	sp, #140	; 0x8c
 800aea6:	461f      	mov	r7, r3
 800aea8:	2300      	movs	r3, #0
 800aeaa:	931e      	str	r3, [sp, #120]	; 0x78
 800aeac:	4ba4      	ldr	r3, [pc, #656]	; (800b140 <_strtod_l+0x2a0>)
 800aeae:	9219      	str	r2, [sp, #100]	; 0x64
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	9307      	str	r3, [sp, #28]
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	4688      	mov	r8, r1
 800aeba:	f7f5 f989 	bl	80001d0 <strlen>
 800aebe:	f04f 0a00 	mov.w	sl, #0
 800aec2:	4605      	mov	r5, r0
 800aec4:	f04f 0b00 	mov.w	fp, #0
 800aec8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800aecc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aece:	781a      	ldrb	r2, [r3, #0]
 800aed0:	2a2b      	cmp	r2, #43	; 0x2b
 800aed2:	d04c      	beq.n	800af6e <_strtod_l+0xce>
 800aed4:	d839      	bhi.n	800af4a <_strtod_l+0xaa>
 800aed6:	2a0d      	cmp	r2, #13
 800aed8:	d832      	bhi.n	800af40 <_strtod_l+0xa0>
 800aeda:	2a08      	cmp	r2, #8
 800aedc:	d832      	bhi.n	800af44 <_strtod_l+0xa4>
 800aede:	2a00      	cmp	r2, #0
 800aee0:	d03c      	beq.n	800af5c <_strtod_l+0xbc>
 800aee2:	2300      	movs	r3, #0
 800aee4:	930e      	str	r3, [sp, #56]	; 0x38
 800aee6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800aee8:	7833      	ldrb	r3, [r6, #0]
 800aeea:	2b30      	cmp	r3, #48	; 0x30
 800aeec:	f040 80b4 	bne.w	800b058 <_strtod_l+0x1b8>
 800aef0:	7873      	ldrb	r3, [r6, #1]
 800aef2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800aef6:	2b58      	cmp	r3, #88	; 0x58
 800aef8:	d16c      	bne.n	800afd4 <_strtod_l+0x134>
 800aefa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	ab1e      	add	r3, sp, #120	; 0x78
 800af00:	9702      	str	r7, [sp, #8]
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	4a8f      	ldr	r2, [pc, #572]	; (800b144 <_strtod_l+0x2a4>)
 800af06:	ab1f      	add	r3, sp, #124	; 0x7c
 800af08:	a91d      	add	r1, sp, #116	; 0x74
 800af0a:	4620      	mov	r0, r4
 800af0c:	f001 ff36 	bl	800cd7c <__gethex>
 800af10:	f010 0707 	ands.w	r7, r0, #7
 800af14:	4605      	mov	r5, r0
 800af16:	d005      	beq.n	800af24 <_strtod_l+0x84>
 800af18:	2f06      	cmp	r7, #6
 800af1a:	d12a      	bne.n	800af72 <_strtod_l+0xd2>
 800af1c:	3601      	adds	r6, #1
 800af1e:	2300      	movs	r3, #0
 800af20:	961d      	str	r6, [sp, #116]	; 0x74
 800af22:	930e      	str	r3, [sp, #56]	; 0x38
 800af24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af26:	2b00      	cmp	r3, #0
 800af28:	f040 8596 	bne.w	800ba58 <_strtod_l+0xbb8>
 800af2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af2e:	b1db      	cbz	r3, 800af68 <_strtod_l+0xc8>
 800af30:	4652      	mov	r2, sl
 800af32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af36:	ec43 2b10 	vmov	d0, r2, r3
 800af3a:	b023      	add	sp, #140	; 0x8c
 800af3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af40:	2a20      	cmp	r2, #32
 800af42:	d1ce      	bne.n	800aee2 <_strtod_l+0x42>
 800af44:	3301      	adds	r3, #1
 800af46:	931d      	str	r3, [sp, #116]	; 0x74
 800af48:	e7c0      	b.n	800aecc <_strtod_l+0x2c>
 800af4a:	2a2d      	cmp	r2, #45	; 0x2d
 800af4c:	d1c9      	bne.n	800aee2 <_strtod_l+0x42>
 800af4e:	2201      	movs	r2, #1
 800af50:	920e      	str	r2, [sp, #56]	; 0x38
 800af52:	1c5a      	adds	r2, r3, #1
 800af54:	921d      	str	r2, [sp, #116]	; 0x74
 800af56:	785b      	ldrb	r3, [r3, #1]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1c4      	bne.n	800aee6 <_strtod_l+0x46>
 800af5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af5e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800af62:	2b00      	cmp	r3, #0
 800af64:	f040 8576 	bne.w	800ba54 <_strtod_l+0xbb4>
 800af68:	4652      	mov	r2, sl
 800af6a:	465b      	mov	r3, fp
 800af6c:	e7e3      	b.n	800af36 <_strtod_l+0x96>
 800af6e:	2200      	movs	r2, #0
 800af70:	e7ee      	b.n	800af50 <_strtod_l+0xb0>
 800af72:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800af74:	b13a      	cbz	r2, 800af86 <_strtod_l+0xe6>
 800af76:	2135      	movs	r1, #53	; 0x35
 800af78:	a820      	add	r0, sp, #128	; 0x80
 800af7a:	f002 ff04 	bl	800dd86 <__copybits>
 800af7e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800af80:	4620      	mov	r0, r4
 800af82:	f002 fac9 	bl	800d518 <_Bfree>
 800af86:	3f01      	subs	r7, #1
 800af88:	2f05      	cmp	r7, #5
 800af8a:	d807      	bhi.n	800af9c <_strtod_l+0xfc>
 800af8c:	e8df f007 	tbb	[pc, r7]
 800af90:	1d180b0e 	.word	0x1d180b0e
 800af94:	030e      	.short	0x030e
 800af96:	f04f 0b00 	mov.w	fp, #0
 800af9a:	46da      	mov	sl, fp
 800af9c:	0728      	lsls	r0, r5, #28
 800af9e:	d5c1      	bpl.n	800af24 <_strtod_l+0x84>
 800afa0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800afa4:	e7be      	b.n	800af24 <_strtod_l+0x84>
 800afa6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800afaa:	e7f7      	b.n	800af9c <_strtod_l+0xfc>
 800afac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800afb0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800afb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800afb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800afba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800afbe:	e7ed      	b.n	800af9c <_strtod_l+0xfc>
 800afc0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b148 <_strtod_l+0x2a8>
 800afc4:	f04f 0a00 	mov.w	sl, #0
 800afc8:	e7e8      	b.n	800af9c <_strtod_l+0xfc>
 800afca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800afce:	f04f 3aff 	mov.w	sl, #4294967295
 800afd2:	e7e3      	b.n	800af9c <_strtod_l+0xfc>
 800afd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800afd6:	1c5a      	adds	r2, r3, #1
 800afd8:	921d      	str	r2, [sp, #116]	; 0x74
 800afda:	785b      	ldrb	r3, [r3, #1]
 800afdc:	2b30      	cmp	r3, #48	; 0x30
 800afde:	d0f9      	beq.n	800afd4 <_strtod_l+0x134>
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d09f      	beq.n	800af24 <_strtod_l+0x84>
 800afe4:	2301      	movs	r3, #1
 800afe6:	f04f 0900 	mov.w	r9, #0
 800afea:	9304      	str	r3, [sp, #16]
 800afec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800afee:	930a      	str	r3, [sp, #40]	; 0x28
 800aff0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800aff4:	464f      	mov	r7, r9
 800aff6:	220a      	movs	r2, #10
 800aff8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800affa:	7806      	ldrb	r6, [r0, #0]
 800affc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b000:	b2d9      	uxtb	r1, r3
 800b002:	2909      	cmp	r1, #9
 800b004:	d92a      	bls.n	800b05c <_strtod_l+0x1bc>
 800b006:	9907      	ldr	r1, [sp, #28]
 800b008:	462a      	mov	r2, r5
 800b00a:	f003 f970 	bl	800e2ee <strncmp>
 800b00e:	b398      	cbz	r0, 800b078 <_strtod_l+0x1d8>
 800b010:	2000      	movs	r0, #0
 800b012:	4633      	mov	r3, r6
 800b014:	463d      	mov	r5, r7
 800b016:	9007      	str	r0, [sp, #28]
 800b018:	4602      	mov	r2, r0
 800b01a:	2b65      	cmp	r3, #101	; 0x65
 800b01c:	d001      	beq.n	800b022 <_strtod_l+0x182>
 800b01e:	2b45      	cmp	r3, #69	; 0x45
 800b020:	d118      	bne.n	800b054 <_strtod_l+0x1b4>
 800b022:	b91d      	cbnz	r5, 800b02c <_strtod_l+0x18c>
 800b024:	9b04      	ldr	r3, [sp, #16]
 800b026:	4303      	orrs	r3, r0
 800b028:	d098      	beq.n	800af5c <_strtod_l+0xbc>
 800b02a:	2500      	movs	r5, #0
 800b02c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800b030:	f108 0301 	add.w	r3, r8, #1
 800b034:	931d      	str	r3, [sp, #116]	; 0x74
 800b036:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b03a:	2b2b      	cmp	r3, #43	; 0x2b
 800b03c:	d075      	beq.n	800b12a <_strtod_l+0x28a>
 800b03e:	2b2d      	cmp	r3, #45	; 0x2d
 800b040:	d07b      	beq.n	800b13a <_strtod_l+0x29a>
 800b042:	f04f 0c00 	mov.w	ip, #0
 800b046:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b04a:	2909      	cmp	r1, #9
 800b04c:	f240 8082 	bls.w	800b154 <_strtod_l+0x2b4>
 800b050:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b054:	2600      	movs	r6, #0
 800b056:	e09d      	b.n	800b194 <_strtod_l+0x2f4>
 800b058:	2300      	movs	r3, #0
 800b05a:	e7c4      	b.n	800afe6 <_strtod_l+0x146>
 800b05c:	2f08      	cmp	r7, #8
 800b05e:	bfd8      	it	le
 800b060:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b062:	f100 0001 	add.w	r0, r0, #1
 800b066:	bfda      	itte	le
 800b068:	fb02 3301 	mlale	r3, r2, r1, r3
 800b06c:	9309      	strle	r3, [sp, #36]	; 0x24
 800b06e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b072:	3701      	adds	r7, #1
 800b074:	901d      	str	r0, [sp, #116]	; 0x74
 800b076:	e7bf      	b.n	800aff8 <_strtod_l+0x158>
 800b078:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b07a:	195a      	adds	r2, r3, r5
 800b07c:	921d      	str	r2, [sp, #116]	; 0x74
 800b07e:	5d5b      	ldrb	r3, [r3, r5]
 800b080:	2f00      	cmp	r7, #0
 800b082:	d037      	beq.n	800b0f4 <_strtod_l+0x254>
 800b084:	9007      	str	r0, [sp, #28]
 800b086:	463d      	mov	r5, r7
 800b088:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b08c:	2a09      	cmp	r2, #9
 800b08e:	d912      	bls.n	800b0b6 <_strtod_l+0x216>
 800b090:	2201      	movs	r2, #1
 800b092:	e7c2      	b.n	800b01a <_strtod_l+0x17a>
 800b094:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b096:	1c5a      	adds	r2, r3, #1
 800b098:	921d      	str	r2, [sp, #116]	; 0x74
 800b09a:	785b      	ldrb	r3, [r3, #1]
 800b09c:	3001      	adds	r0, #1
 800b09e:	2b30      	cmp	r3, #48	; 0x30
 800b0a0:	d0f8      	beq.n	800b094 <_strtod_l+0x1f4>
 800b0a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b0a6:	2a08      	cmp	r2, #8
 800b0a8:	f200 84db 	bhi.w	800ba62 <_strtod_l+0xbc2>
 800b0ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b0ae:	9007      	str	r0, [sp, #28]
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	920a      	str	r2, [sp, #40]	; 0x28
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	3b30      	subs	r3, #48	; 0x30
 800b0b8:	f100 0201 	add.w	r2, r0, #1
 800b0bc:	d014      	beq.n	800b0e8 <_strtod_l+0x248>
 800b0be:	9907      	ldr	r1, [sp, #28]
 800b0c0:	4411      	add	r1, r2
 800b0c2:	9107      	str	r1, [sp, #28]
 800b0c4:	462a      	mov	r2, r5
 800b0c6:	eb00 0e05 	add.w	lr, r0, r5
 800b0ca:	210a      	movs	r1, #10
 800b0cc:	4572      	cmp	r2, lr
 800b0ce:	d113      	bne.n	800b0f8 <_strtod_l+0x258>
 800b0d0:	182a      	adds	r2, r5, r0
 800b0d2:	2a08      	cmp	r2, #8
 800b0d4:	f105 0501 	add.w	r5, r5, #1
 800b0d8:	4405      	add	r5, r0
 800b0da:	dc1c      	bgt.n	800b116 <_strtod_l+0x276>
 800b0dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0de:	220a      	movs	r2, #10
 800b0e0:	fb02 3301 	mla	r3, r2, r1, r3
 800b0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0ea:	1c59      	adds	r1, r3, #1
 800b0ec:	911d      	str	r1, [sp, #116]	; 0x74
 800b0ee:	785b      	ldrb	r3, [r3, #1]
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	e7c9      	b.n	800b088 <_strtod_l+0x1e8>
 800b0f4:	4638      	mov	r0, r7
 800b0f6:	e7d2      	b.n	800b09e <_strtod_l+0x1fe>
 800b0f8:	2a08      	cmp	r2, #8
 800b0fa:	dc04      	bgt.n	800b106 <_strtod_l+0x266>
 800b0fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b0fe:	434e      	muls	r6, r1
 800b100:	9609      	str	r6, [sp, #36]	; 0x24
 800b102:	3201      	adds	r2, #1
 800b104:	e7e2      	b.n	800b0cc <_strtod_l+0x22c>
 800b106:	f102 0c01 	add.w	ip, r2, #1
 800b10a:	f1bc 0f10 	cmp.w	ip, #16
 800b10e:	bfd8      	it	le
 800b110:	fb01 f909 	mulle.w	r9, r1, r9
 800b114:	e7f5      	b.n	800b102 <_strtod_l+0x262>
 800b116:	2d10      	cmp	r5, #16
 800b118:	bfdc      	itt	le
 800b11a:	220a      	movle	r2, #10
 800b11c:	fb02 3909 	mlale	r9, r2, r9, r3
 800b120:	e7e1      	b.n	800b0e6 <_strtod_l+0x246>
 800b122:	2300      	movs	r3, #0
 800b124:	9307      	str	r3, [sp, #28]
 800b126:	2201      	movs	r2, #1
 800b128:	e77c      	b.n	800b024 <_strtod_l+0x184>
 800b12a:	f04f 0c00 	mov.w	ip, #0
 800b12e:	f108 0302 	add.w	r3, r8, #2
 800b132:	931d      	str	r3, [sp, #116]	; 0x74
 800b134:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b138:	e785      	b.n	800b046 <_strtod_l+0x1a6>
 800b13a:	f04f 0c01 	mov.w	ip, #1
 800b13e:	e7f6      	b.n	800b12e <_strtod_l+0x28e>
 800b140:	0800e8f0 	.word	0x0800e8f0
 800b144:	0800e740 	.word	0x0800e740
 800b148:	7ff00000 	.word	0x7ff00000
 800b14c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b14e:	1c59      	adds	r1, r3, #1
 800b150:	911d      	str	r1, [sp, #116]	; 0x74
 800b152:	785b      	ldrb	r3, [r3, #1]
 800b154:	2b30      	cmp	r3, #48	; 0x30
 800b156:	d0f9      	beq.n	800b14c <_strtod_l+0x2ac>
 800b158:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b15c:	2908      	cmp	r1, #8
 800b15e:	f63f af79 	bhi.w	800b054 <_strtod_l+0x1b4>
 800b162:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b166:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b168:	9308      	str	r3, [sp, #32]
 800b16a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b16c:	1c59      	adds	r1, r3, #1
 800b16e:	911d      	str	r1, [sp, #116]	; 0x74
 800b170:	785b      	ldrb	r3, [r3, #1]
 800b172:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b176:	2e09      	cmp	r6, #9
 800b178:	d937      	bls.n	800b1ea <_strtod_l+0x34a>
 800b17a:	9e08      	ldr	r6, [sp, #32]
 800b17c:	1b89      	subs	r1, r1, r6
 800b17e:	2908      	cmp	r1, #8
 800b180:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b184:	dc02      	bgt.n	800b18c <_strtod_l+0x2ec>
 800b186:	4576      	cmp	r6, lr
 800b188:	bfa8      	it	ge
 800b18a:	4676      	movge	r6, lr
 800b18c:	f1bc 0f00 	cmp.w	ip, #0
 800b190:	d000      	beq.n	800b194 <_strtod_l+0x2f4>
 800b192:	4276      	negs	r6, r6
 800b194:	2d00      	cmp	r5, #0
 800b196:	d14f      	bne.n	800b238 <_strtod_l+0x398>
 800b198:	9904      	ldr	r1, [sp, #16]
 800b19a:	4301      	orrs	r1, r0
 800b19c:	f47f aec2 	bne.w	800af24 <_strtod_l+0x84>
 800b1a0:	2a00      	cmp	r2, #0
 800b1a2:	f47f aedb 	bne.w	800af5c <_strtod_l+0xbc>
 800b1a6:	2b69      	cmp	r3, #105	; 0x69
 800b1a8:	d027      	beq.n	800b1fa <_strtod_l+0x35a>
 800b1aa:	dc24      	bgt.n	800b1f6 <_strtod_l+0x356>
 800b1ac:	2b49      	cmp	r3, #73	; 0x49
 800b1ae:	d024      	beq.n	800b1fa <_strtod_l+0x35a>
 800b1b0:	2b4e      	cmp	r3, #78	; 0x4e
 800b1b2:	f47f aed3 	bne.w	800af5c <_strtod_l+0xbc>
 800b1b6:	499e      	ldr	r1, [pc, #632]	; (800b430 <_strtod_l+0x590>)
 800b1b8:	a81d      	add	r0, sp, #116	; 0x74
 800b1ba:	f002 f837 	bl	800d22c <__match>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	f43f aecc 	beq.w	800af5c <_strtod_l+0xbc>
 800b1c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	2b28      	cmp	r3, #40	; 0x28
 800b1ca:	d12d      	bne.n	800b228 <_strtod_l+0x388>
 800b1cc:	4999      	ldr	r1, [pc, #612]	; (800b434 <_strtod_l+0x594>)
 800b1ce:	aa20      	add	r2, sp, #128	; 0x80
 800b1d0:	a81d      	add	r0, sp, #116	; 0x74
 800b1d2:	f002 f83f 	bl	800d254 <__hexnan>
 800b1d6:	2805      	cmp	r0, #5
 800b1d8:	d126      	bne.n	800b228 <_strtod_l+0x388>
 800b1da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1dc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b1e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b1e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b1e8:	e69c      	b.n	800af24 <_strtod_l+0x84>
 800b1ea:	210a      	movs	r1, #10
 800b1ec:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b1f0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b1f4:	e7b9      	b.n	800b16a <_strtod_l+0x2ca>
 800b1f6:	2b6e      	cmp	r3, #110	; 0x6e
 800b1f8:	e7db      	b.n	800b1b2 <_strtod_l+0x312>
 800b1fa:	498f      	ldr	r1, [pc, #572]	; (800b438 <_strtod_l+0x598>)
 800b1fc:	a81d      	add	r0, sp, #116	; 0x74
 800b1fe:	f002 f815 	bl	800d22c <__match>
 800b202:	2800      	cmp	r0, #0
 800b204:	f43f aeaa 	beq.w	800af5c <_strtod_l+0xbc>
 800b208:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b20a:	498c      	ldr	r1, [pc, #560]	; (800b43c <_strtod_l+0x59c>)
 800b20c:	3b01      	subs	r3, #1
 800b20e:	a81d      	add	r0, sp, #116	; 0x74
 800b210:	931d      	str	r3, [sp, #116]	; 0x74
 800b212:	f002 f80b 	bl	800d22c <__match>
 800b216:	b910      	cbnz	r0, 800b21e <_strtod_l+0x37e>
 800b218:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b21a:	3301      	adds	r3, #1
 800b21c:	931d      	str	r3, [sp, #116]	; 0x74
 800b21e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b44c <_strtod_l+0x5ac>
 800b222:	f04f 0a00 	mov.w	sl, #0
 800b226:	e67d      	b.n	800af24 <_strtod_l+0x84>
 800b228:	4885      	ldr	r0, [pc, #532]	; (800b440 <_strtod_l+0x5a0>)
 800b22a:	f003 f805 	bl	800e238 <nan>
 800b22e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b232:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b236:	e675      	b.n	800af24 <_strtod_l+0x84>
 800b238:	9b07      	ldr	r3, [sp, #28]
 800b23a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b23c:	1af3      	subs	r3, r6, r3
 800b23e:	2f00      	cmp	r7, #0
 800b240:	bf08      	it	eq
 800b242:	462f      	moveq	r7, r5
 800b244:	2d10      	cmp	r5, #16
 800b246:	9308      	str	r3, [sp, #32]
 800b248:	46a8      	mov	r8, r5
 800b24a:	bfa8      	it	ge
 800b24c:	f04f 0810 	movge.w	r8, #16
 800b250:	f7f5 f958 	bl	8000504 <__aeabi_ui2d>
 800b254:	2d09      	cmp	r5, #9
 800b256:	4682      	mov	sl, r0
 800b258:	468b      	mov	fp, r1
 800b25a:	dd13      	ble.n	800b284 <_strtod_l+0x3e4>
 800b25c:	4b79      	ldr	r3, [pc, #484]	; (800b444 <_strtod_l+0x5a4>)
 800b25e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b262:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b266:	f7f5 f9c7 	bl	80005f8 <__aeabi_dmul>
 800b26a:	4682      	mov	sl, r0
 800b26c:	4648      	mov	r0, r9
 800b26e:	468b      	mov	fp, r1
 800b270:	f7f5 f948 	bl	8000504 <__aeabi_ui2d>
 800b274:	4602      	mov	r2, r0
 800b276:	460b      	mov	r3, r1
 800b278:	4650      	mov	r0, sl
 800b27a:	4659      	mov	r1, fp
 800b27c:	f7f5 f806 	bl	800028c <__adddf3>
 800b280:	4682      	mov	sl, r0
 800b282:	468b      	mov	fp, r1
 800b284:	2d0f      	cmp	r5, #15
 800b286:	dc38      	bgt.n	800b2fa <_strtod_l+0x45a>
 800b288:	9b08      	ldr	r3, [sp, #32]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f43f ae4a 	beq.w	800af24 <_strtod_l+0x84>
 800b290:	dd24      	ble.n	800b2dc <_strtod_l+0x43c>
 800b292:	2b16      	cmp	r3, #22
 800b294:	dc0b      	bgt.n	800b2ae <_strtod_l+0x40e>
 800b296:	4d6b      	ldr	r5, [pc, #428]	; (800b444 <_strtod_l+0x5a4>)
 800b298:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b29c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b2a0:	4652      	mov	r2, sl
 800b2a2:	465b      	mov	r3, fp
 800b2a4:	f7f5 f9a8 	bl	80005f8 <__aeabi_dmul>
 800b2a8:	4682      	mov	sl, r0
 800b2aa:	468b      	mov	fp, r1
 800b2ac:	e63a      	b.n	800af24 <_strtod_l+0x84>
 800b2ae:	9a08      	ldr	r2, [sp, #32]
 800b2b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	db20      	blt.n	800b2fa <_strtod_l+0x45a>
 800b2b8:	4c62      	ldr	r4, [pc, #392]	; (800b444 <_strtod_l+0x5a4>)
 800b2ba:	f1c5 050f 	rsb	r5, r5, #15
 800b2be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b2c2:	4652      	mov	r2, sl
 800b2c4:	465b      	mov	r3, fp
 800b2c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2ca:	f7f5 f995 	bl	80005f8 <__aeabi_dmul>
 800b2ce:	9b08      	ldr	r3, [sp, #32]
 800b2d0:	1b5d      	subs	r5, r3, r5
 800b2d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b2d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b2da:	e7e3      	b.n	800b2a4 <_strtod_l+0x404>
 800b2dc:	9b08      	ldr	r3, [sp, #32]
 800b2de:	3316      	adds	r3, #22
 800b2e0:	db0b      	blt.n	800b2fa <_strtod_l+0x45a>
 800b2e2:	9b07      	ldr	r3, [sp, #28]
 800b2e4:	4a57      	ldr	r2, [pc, #348]	; (800b444 <_strtod_l+0x5a4>)
 800b2e6:	1b9e      	subs	r6, r3, r6
 800b2e8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b2ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2f0:	4650      	mov	r0, sl
 800b2f2:	4659      	mov	r1, fp
 800b2f4:	f7f5 faaa 	bl	800084c <__aeabi_ddiv>
 800b2f8:	e7d6      	b.n	800b2a8 <_strtod_l+0x408>
 800b2fa:	9b08      	ldr	r3, [sp, #32]
 800b2fc:	eba5 0808 	sub.w	r8, r5, r8
 800b300:	4498      	add	r8, r3
 800b302:	f1b8 0f00 	cmp.w	r8, #0
 800b306:	dd71      	ble.n	800b3ec <_strtod_l+0x54c>
 800b308:	f018 030f 	ands.w	r3, r8, #15
 800b30c:	d00a      	beq.n	800b324 <_strtod_l+0x484>
 800b30e:	494d      	ldr	r1, [pc, #308]	; (800b444 <_strtod_l+0x5a4>)
 800b310:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b314:	4652      	mov	r2, sl
 800b316:	465b      	mov	r3, fp
 800b318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b31c:	f7f5 f96c 	bl	80005f8 <__aeabi_dmul>
 800b320:	4682      	mov	sl, r0
 800b322:	468b      	mov	fp, r1
 800b324:	f038 080f 	bics.w	r8, r8, #15
 800b328:	d04d      	beq.n	800b3c6 <_strtod_l+0x526>
 800b32a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b32e:	dd22      	ble.n	800b376 <_strtod_l+0x4d6>
 800b330:	2500      	movs	r5, #0
 800b332:	462e      	mov	r6, r5
 800b334:	9509      	str	r5, [sp, #36]	; 0x24
 800b336:	9507      	str	r5, [sp, #28]
 800b338:	2322      	movs	r3, #34	; 0x22
 800b33a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b44c <_strtod_l+0x5ac>
 800b33e:	6023      	str	r3, [r4, #0]
 800b340:	f04f 0a00 	mov.w	sl, #0
 800b344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b346:	2b00      	cmp	r3, #0
 800b348:	f43f adec 	beq.w	800af24 <_strtod_l+0x84>
 800b34c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b34e:	4620      	mov	r0, r4
 800b350:	f002 f8e2 	bl	800d518 <_Bfree>
 800b354:	9907      	ldr	r1, [sp, #28]
 800b356:	4620      	mov	r0, r4
 800b358:	f002 f8de 	bl	800d518 <_Bfree>
 800b35c:	4631      	mov	r1, r6
 800b35e:	4620      	mov	r0, r4
 800b360:	f002 f8da 	bl	800d518 <_Bfree>
 800b364:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b366:	4620      	mov	r0, r4
 800b368:	f002 f8d6 	bl	800d518 <_Bfree>
 800b36c:	4629      	mov	r1, r5
 800b36e:	4620      	mov	r0, r4
 800b370:	f002 f8d2 	bl	800d518 <_Bfree>
 800b374:	e5d6      	b.n	800af24 <_strtod_l+0x84>
 800b376:	2300      	movs	r3, #0
 800b378:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b37c:	4650      	mov	r0, sl
 800b37e:	4659      	mov	r1, fp
 800b380:	4699      	mov	r9, r3
 800b382:	f1b8 0f01 	cmp.w	r8, #1
 800b386:	dc21      	bgt.n	800b3cc <_strtod_l+0x52c>
 800b388:	b10b      	cbz	r3, 800b38e <_strtod_l+0x4ee>
 800b38a:	4682      	mov	sl, r0
 800b38c:	468b      	mov	fp, r1
 800b38e:	4b2e      	ldr	r3, [pc, #184]	; (800b448 <_strtod_l+0x5a8>)
 800b390:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b394:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b398:	4652      	mov	r2, sl
 800b39a:	465b      	mov	r3, fp
 800b39c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b3a0:	f7f5 f92a 	bl	80005f8 <__aeabi_dmul>
 800b3a4:	4b29      	ldr	r3, [pc, #164]	; (800b44c <_strtod_l+0x5ac>)
 800b3a6:	460a      	mov	r2, r1
 800b3a8:	400b      	ands	r3, r1
 800b3aa:	4929      	ldr	r1, [pc, #164]	; (800b450 <_strtod_l+0x5b0>)
 800b3ac:	428b      	cmp	r3, r1
 800b3ae:	4682      	mov	sl, r0
 800b3b0:	d8be      	bhi.n	800b330 <_strtod_l+0x490>
 800b3b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b3b6:	428b      	cmp	r3, r1
 800b3b8:	bf86      	itte	hi
 800b3ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b454 <_strtod_l+0x5b4>
 800b3be:	f04f 3aff 	movhi.w	sl, #4294967295
 800b3c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	9304      	str	r3, [sp, #16]
 800b3ca:	e081      	b.n	800b4d0 <_strtod_l+0x630>
 800b3cc:	f018 0f01 	tst.w	r8, #1
 800b3d0:	d007      	beq.n	800b3e2 <_strtod_l+0x542>
 800b3d2:	4b1d      	ldr	r3, [pc, #116]	; (800b448 <_strtod_l+0x5a8>)
 800b3d4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3dc:	f7f5 f90c 	bl	80005f8 <__aeabi_dmul>
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	f109 0901 	add.w	r9, r9, #1
 800b3e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b3ea:	e7ca      	b.n	800b382 <_strtod_l+0x4e2>
 800b3ec:	d0eb      	beq.n	800b3c6 <_strtod_l+0x526>
 800b3ee:	f1c8 0800 	rsb	r8, r8, #0
 800b3f2:	f018 020f 	ands.w	r2, r8, #15
 800b3f6:	d00a      	beq.n	800b40e <_strtod_l+0x56e>
 800b3f8:	4b12      	ldr	r3, [pc, #72]	; (800b444 <_strtod_l+0x5a4>)
 800b3fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3fe:	4650      	mov	r0, sl
 800b400:	4659      	mov	r1, fp
 800b402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b406:	f7f5 fa21 	bl	800084c <__aeabi_ddiv>
 800b40a:	4682      	mov	sl, r0
 800b40c:	468b      	mov	fp, r1
 800b40e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b412:	d0d8      	beq.n	800b3c6 <_strtod_l+0x526>
 800b414:	f1b8 0f1f 	cmp.w	r8, #31
 800b418:	dd1e      	ble.n	800b458 <_strtod_l+0x5b8>
 800b41a:	2500      	movs	r5, #0
 800b41c:	462e      	mov	r6, r5
 800b41e:	9509      	str	r5, [sp, #36]	; 0x24
 800b420:	9507      	str	r5, [sp, #28]
 800b422:	2322      	movs	r3, #34	; 0x22
 800b424:	f04f 0a00 	mov.w	sl, #0
 800b428:	f04f 0b00 	mov.w	fp, #0
 800b42c:	6023      	str	r3, [r4, #0]
 800b42e:	e789      	b.n	800b344 <_strtod_l+0x4a4>
 800b430:	0800e719 	.word	0x0800e719
 800b434:	0800e754 	.word	0x0800e754
 800b438:	0800e711 	.word	0x0800e711
 800b43c:	0800e793 	.word	0x0800e793
 800b440:	0800eab0 	.word	0x0800eab0
 800b444:	0800e990 	.word	0x0800e990
 800b448:	0800e968 	.word	0x0800e968
 800b44c:	7ff00000 	.word	0x7ff00000
 800b450:	7ca00000 	.word	0x7ca00000
 800b454:	7fefffff 	.word	0x7fefffff
 800b458:	f018 0310 	ands.w	r3, r8, #16
 800b45c:	bf18      	it	ne
 800b45e:	236a      	movne	r3, #106	; 0x6a
 800b460:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800b818 <_strtod_l+0x978>
 800b464:	9304      	str	r3, [sp, #16]
 800b466:	4650      	mov	r0, sl
 800b468:	4659      	mov	r1, fp
 800b46a:	2300      	movs	r3, #0
 800b46c:	f018 0f01 	tst.w	r8, #1
 800b470:	d004      	beq.n	800b47c <_strtod_l+0x5dc>
 800b472:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b476:	f7f5 f8bf 	bl	80005f8 <__aeabi_dmul>
 800b47a:	2301      	movs	r3, #1
 800b47c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b480:	f109 0908 	add.w	r9, r9, #8
 800b484:	d1f2      	bne.n	800b46c <_strtod_l+0x5cc>
 800b486:	b10b      	cbz	r3, 800b48c <_strtod_l+0x5ec>
 800b488:	4682      	mov	sl, r0
 800b48a:	468b      	mov	fp, r1
 800b48c:	9b04      	ldr	r3, [sp, #16]
 800b48e:	b1bb      	cbz	r3, 800b4c0 <_strtod_l+0x620>
 800b490:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b494:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b498:	2b00      	cmp	r3, #0
 800b49a:	4659      	mov	r1, fp
 800b49c:	dd10      	ble.n	800b4c0 <_strtod_l+0x620>
 800b49e:	2b1f      	cmp	r3, #31
 800b4a0:	f340 8128 	ble.w	800b6f4 <_strtod_l+0x854>
 800b4a4:	2b34      	cmp	r3, #52	; 0x34
 800b4a6:	bfde      	ittt	le
 800b4a8:	3b20      	suble	r3, #32
 800b4aa:	f04f 32ff 	movle.w	r2, #4294967295
 800b4ae:	fa02 f303 	lslle.w	r3, r2, r3
 800b4b2:	f04f 0a00 	mov.w	sl, #0
 800b4b6:	bfcc      	ite	gt
 800b4b8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b4bc:	ea03 0b01 	andle.w	fp, r3, r1
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	4650      	mov	r0, sl
 800b4c6:	4659      	mov	r1, fp
 800b4c8:	f7f5 fafe 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d1a4      	bne.n	800b41a <_strtod_l+0x57a>
 800b4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	463a      	mov	r2, r7
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f002 f888 	bl	800d5f0 <__s2b>
 800b4e0:	9009      	str	r0, [sp, #36]	; 0x24
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	f43f af24 	beq.w	800b330 <_strtod_l+0x490>
 800b4e8:	9b07      	ldr	r3, [sp, #28]
 800b4ea:	1b9e      	subs	r6, r3, r6
 800b4ec:	9b08      	ldr	r3, [sp, #32]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	bfb4      	ite	lt
 800b4f2:	4633      	movlt	r3, r6
 800b4f4:	2300      	movge	r3, #0
 800b4f6:	9310      	str	r3, [sp, #64]	; 0x40
 800b4f8:	9b08      	ldr	r3, [sp, #32]
 800b4fa:	2500      	movs	r5, #0
 800b4fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b500:	9318      	str	r3, [sp, #96]	; 0x60
 800b502:	462e      	mov	r6, r5
 800b504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b506:	4620      	mov	r0, r4
 800b508:	6859      	ldr	r1, [r3, #4]
 800b50a:	f001 ffc5 	bl	800d498 <_Balloc>
 800b50e:	9007      	str	r0, [sp, #28]
 800b510:	2800      	cmp	r0, #0
 800b512:	f43f af11 	beq.w	800b338 <_strtod_l+0x498>
 800b516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b518:	691a      	ldr	r2, [r3, #16]
 800b51a:	3202      	adds	r2, #2
 800b51c:	f103 010c 	add.w	r1, r3, #12
 800b520:	0092      	lsls	r2, r2, #2
 800b522:	300c      	adds	r0, #12
 800b524:	f7fe ff90 	bl	800a448 <memcpy>
 800b528:	ec4b ab10 	vmov	d0, sl, fp
 800b52c:	aa20      	add	r2, sp, #128	; 0x80
 800b52e:	a91f      	add	r1, sp, #124	; 0x7c
 800b530:	4620      	mov	r0, r4
 800b532:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b536:	f002 fb97 	bl	800dc68 <__d2b>
 800b53a:	901e      	str	r0, [sp, #120]	; 0x78
 800b53c:	2800      	cmp	r0, #0
 800b53e:	f43f aefb 	beq.w	800b338 <_strtod_l+0x498>
 800b542:	2101      	movs	r1, #1
 800b544:	4620      	mov	r0, r4
 800b546:	f002 f8ed 	bl	800d724 <__i2b>
 800b54a:	4606      	mov	r6, r0
 800b54c:	2800      	cmp	r0, #0
 800b54e:	f43f aef3 	beq.w	800b338 <_strtod_l+0x498>
 800b552:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b554:	9904      	ldr	r1, [sp, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	bfab      	itete	ge
 800b55a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b55c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b55e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b560:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b564:	bfac      	ite	ge
 800b566:	eb03 0902 	addge.w	r9, r3, r2
 800b56a:	1ad7      	sublt	r7, r2, r3
 800b56c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b56e:	eba3 0801 	sub.w	r8, r3, r1
 800b572:	4490      	add	r8, r2
 800b574:	4ba3      	ldr	r3, [pc, #652]	; (800b804 <_strtod_l+0x964>)
 800b576:	f108 38ff 	add.w	r8, r8, #4294967295
 800b57a:	4598      	cmp	r8, r3
 800b57c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b580:	f280 80cc 	bge.w	800b71c <_strtod_l+0x87c>
 800b584:	eba3 0308 	sub.w	r3, r3, r8
 800b588:	2b1f      	cmp	r3, #31
 800b58a:	eba2 0203 	sub.w	r2, r2, r3
 800b58e:	f04f 0101 	mov.w	r1, #1
 800b592:	f300 80b6 	bgt.w	800b702 <_strtod_l+0x862>
 800b596:	fa01 f303 	lsl.w	r3, r1, r3
 800b59a:	9311      	str	r3, [sp, #68]	; 0x44
 800b59c:	2300      	movs	r3, #0
 800b59e:	930c      	str	r3, [sp, #48]	; 0x30
 800b5a0:	eb09 0802 	add.w	r8, r9, r2
 800b5a4:	9b04      	ldr	r3, [sp, #16]
 800b5a6:	45c1      	cmp	r9, r8
 800b5a8:	4417      	add	r7, r2
 800b5aa:	441f      	add	r7, r3
 800b5ac:	464b      	mov	r3, r9
 800b5ae:	bfa8      	it	ge
 800b5b0:	4643      	movge	r3, r8
 800b5b2:	42bb      	cmp	r3, r7
 800b5b4:	bfa8      	it	ge
 800b5b6:	463b      	movge	r3, r7
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	bfc2      	ittt	gt
 800b5bc:	eba8 0803 	subgt.w	r8, r8, r3
 800b5c0:	1aff      	subgt	r7, r7, r3
 800b5c2:	eba9 0903 	subgt.w	r9, r9, r3
 800b5c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	dd17      	ble.n	800b5fc <_strtod_l+0x75c>
 800b5cc:	4631      	mov	r1, r6
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f002 f963 	bl	800d89c <__pow5mult>
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	f43f aead 	beq.w	800b338 <_strtod_l+0x498>
 800b5de:	4601      	mov	r1, r0
 800b5e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f002 f8b4 	bl	800d750 <__multiply>
 800b5e8:	900f      	str	r0, [sp, #60]	; 0x3c
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	f43f aea4 	beq.w	800b338 <_strtod_l+0x498>
 800b5f0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f001 ff90 	bl	800d518 <_Bfree>
 800b5f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b5fa:	931e      	str	r3, [sp, #120]	; 0x78
 800b5fc:	f1b8 0f00 	cmp.w	r8, #0
 800b600:	f300 8091 	bgt.w	800b726 <_strtod_l+0x886>
 800b604:	9b08      	ldr	r3, [sp, #32]
 800b606:	2b00      	cmp	r3, #0
 800b608:	dd08      	ble.n	800b61c <_strtod_l+0x77c>
 800b60a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b60c:	9907      	ldr	r1, [sp, #28]
 800b60e:	4620      	mov	r0, r4
 800b610:	f002 f944 	bl	800d89c <__pow5mult>
 800b614:	9007      	str	r0, [sp, #28]
 800b616:	2800      	cmp	r0, #0
 800b618:	f43f ae8e 	beq.w	800b338 <_strtod_l+0x498>
 800b61c:	2f00      	cmp	r7, #0
 800b61e:	dd08      	ble.n	800b632 <_strtod_l+0x792>
 800b620:	9907      	ldr	r1, [sp, #28]
 800b622:	463a      	mov	r2, r7
 800b624:	4620      	mov	r0, r4
 800b626:	f002 f993 	bl	800d950 <__lshift>
 800b62a:	9007      	str	r0, [sp, #28]
 800b62c:	2800      	cmp	r0, #0
 800b62e:	f43f ae83 	beq.w	800b338 <_strtod_l+0x498>
 800b632:	f1b9 0f00 	cmp.w	r9, #0
 800b636:	dd08      	ble.n	800b64a <_strtod_l+0x7aa>
 800b638:	4631      	mov	r1, r6
 800b63a:	464a      	mov	r2, r9
 800b63c:	4620      	mov	r0, r4
 800b63e:	f002 f987 	bl	800d950 <__lshift>
 800b642:	4606      	mov	r6, r0
 800b644:	2800      	cmp	r0, #0
 800b646:	f43f ae77 	beq.w	800b338 <_strtod_l+0x498>
 800b64a:	9a07      	ldr	r2, [sp, #28]
 800b64c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b64e:	4620      	mov	r0, r4
 800b650:	f002 fa06 	bl	800da60 <__mdiff>
 800b654:	4605      	mov	r5, r0
 800b656:	2800      	cmp	r0, #0
 800b658:	f43f ae6e 	beq.w	800b338 <_strtod_l+0x498>
 800b65c:	68c3      	ldr	r3, [r0, #12]
 800b65e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b660:	2300      	movs	r3, #0
 800b662:	60c3      	str	r3, [r0, #12]
 800b664:	4631      	mov	r1, r6
 800b666:	f002 f9df 	bl	800da28 <__mcmp>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	da65      	bge.n	800b73a <_strtod_l+0x89a>
 800b66e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b670:	ea53 030a 	orrs.w	r3, r3, sl
 800b674:	f040 8087 	bne.w	800b786 <_strtod_l+0x8e6>
 800b678:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f040 8082 	bne.w	800b786 <_strtod_l+0x8e6>
 800b682:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b686:	0d1b      	lsrs	r3, r3, #20
 800b688:	051b      	lsls	r3, r3, #20
 800b68a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b68e:	d97a      	bls.n	800b786 <_strtod_l+0x8e6>
 800b690:	696b      	ldr	r3, [r5, #20]
 800b692:	b913      	cbnz	r3, 800b69a <_strtod_l+0x7fa>
 800b694:	692b      	ldr	r3, [r5, #16]
 800b696:	2b01      	cmp	r3, #1
 800b698:	dd75      	ble.n	800b786 <_strtod_l+0x8e6>
 800b69a:	4629      	mov	r1, r5
 800b69c:	2201      	movs	r2, #1
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f002 f956 	bl	800d950 <__lshift>
 800b6a4:	4631      	mov	r1, r6
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	f002 f9be 	bl	800da28 <__mcmp>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	dd6a      	ble.n	800b786 <_strtod_l+0x8e6>
 800b6b0:	9904      	ldr	r1, [sp, #16]
 800b6b2:	4a55      	ldr	r2, [pc, #340]	; (800b808 <_strtod_l+0x968>)
 800b6b4:	465b      	mov	r3, fp
 800b6b6:	2900      	cmp	r1, #0
 800b6b8:	f000 8085 	beq.w	800b7c6 <_strtod_l+0x926>
 800b6bc:	ea02 010b 	and.w	r1, r2, fp
 800b6c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b6c4:	dc7f      	bgt.n	800b7c6 <_strtod_l+0x926>
 800b6c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b6ca:	f77f aeaa 	ble.w	800b422 <_strtod_l+0x582>
 800b6ce:	4a4f      	ldr	r2, [pc, #316]	; (800b80c <_strtod_l+0x96c>)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800b6d6:	4650      	mov	r0, sl
 800b6d8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800b6dc:	4659      	mov	r1, fp
 800b6de:	f7f4 ff8b 	bl	80005f8 <__aeabi_dmul>
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	4303      	orrs	r3, r0
 800b6e6:	bf08      	it	eq
 800b6e8:	2322      	moveq	r3, #34	; 0x22
 800b6ea:	4682      	mov	sl, r0
 800b6ec:	468b      	mov	fp, r1
 800b6ee:	bf08      	it	eq
 800b6f0:	6023      	streq	r3, [r4, #0]
 800b6f2:	e62b      	b.n	800b34c <_strtod_l+0x4ac>
 800b6f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6fc:	ea03 0a0a 	and.w	sl, r3, sl
 800b700:	e6de      	b.n	800b4c0 <_strtod_l+0x620>
 800b702:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b706:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b70a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b70e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b712:	fa01 f308 	lsl.w	r3, r1, r8
 800b716:	930c      	str	r3, [sp, #48]	; 0x30
 800b718:	9111      	str	r1, [sp, #68]	; 0x44
 800b71a:	e741      	b.n	800b5a0 <_strtod_l+0x700>
 800b71c:	2300      	movs	r3, #0
 800b71e:	930c      	str	r3, [sp, #48]	; 0x30
 800b720:	2301      	movs	r3, #1
 800b722:	9311      	str	r3, [sp, #68]	; 0x44
 800b724:	e73c      	b.n	800b5a0 <_strtod_l+0x700>
 800b726:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b728:	4642      	mov	r2, r8
 800b72a:	4620      	mov	r0, r4
 800b72c:	f002 f910 	bl	800d950 <__lshift>
 800b730:	901e      	str	r0, [sp, #120]	; 0x78
 800b732:	2800      	cmp	r0, #0
 800b734:	f47f af66 	bne.w	800b604 <_strtod_l+0x764>
 800b738:	e5fe      	b.n	800b338 <_strtod_l+0x498>
 800b73a:	465f      	mov	r7, fp
 800b73c:	d16e      	bne.n	800b81c <_strtod_l+0x97c>
 800b73e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b740:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b744:	b342      	cbz	r2, 800b798 <_strtod_l+0x8f8>
 800b746:	4a32      	ldr	r2, [pc, #200]	; (800b810 <_strtod_l+0x970>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d128      	bne.n	800b79e <_strtod_l+0x8fe>
 800b74c:	9b04      	ldr	r3, [sp, #16]
 800b74e:	4650      	mov	r0, sl
 800b750:	b1eb      	cbz	r3, 800b78e <_strtod_l+0x8ee>
 800b752:	4a2d      	ldr	r2, [pc, #180]	; (800b808 <_strtod_l+0x968>)
 800b754:	403a      	ands	r2, r7
 800b756:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b75a:	f04f 31ff 	mov.w	r1, #4294967295
 800b75e:	d819      	bhi.n	800b794 <_strtod_l+0x8f4>
 800b760:	0d12      	lsrs	r2, r2, #20
 800b762:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b766:	fa01 f303 	lsl.w	r3, r1, r3
 800b76a:	4298      	cmp	r0, r3
 800b76c:	d117      	bne.n	800b79e <_strtod_l+0x8fe>
 800b76e:	4b29      	ldr	r3, [pc, #164]	; (800b814 <_strtod_l+0x974>)
 800b770:	429f      	cmp	r7, r3
 800b772:	d102      	bne.n	800b77a <_strtod_l+0x8da>
 800b774:	3001      	adds	r0, #1
 800b776:	f43f addf 	beq.w	800b338 <_strtod_l+0x498>
 800b77a:	4b23      	ldr	r3, [pc, #140]	; (800b808 <_strtod_l+0x968>)
 800b77c:	403b      	ands	r3, r7
 800b77e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b782:	f04f 0a00 	mov.w	sl, #0
 800b786:	9b04      	ldr	r3, [sp, #16]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1a0      	bne.n	800b6ce <_strtod_l+0x82e>
 800b78c:	e5de      	b.n	800b34c <_strtod_l+0x4ac>
 800b78e:	f04f 33ff 	mov.w	r3, #4294967295
 800b792:	e7ea      	b.n	800b76a <_strtod_l+0x8ca>
 800b794:	460b      	mov	r3, r1
 800b796:	e7e8      	b.n	800b76a <_strtod_l+0x8ca>
 800b798:	ea53 030a 	orrs.w	r3, r3, sl
 800b79c:	d088      	beq.n	800b6b0 <_strtod_l+0x810>
 800b79e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7a0:	b1db      	cbz	r3, 800b7da <_strtod_l+0x93a>
 800b7a2:	423b      	tst	r3, r7
 800b7a4:	d0ef      	beq.n	800b786 <_strtod_l+0x8e6>
 800b7a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7a8:	9a04      	ldr	r2, [sp, #16]
 800b7aa:	4650      	mov	r0, sl
 800b7ac:	4659      	mov	r1, fp
 800b7ae:	b1c3      	cbz	r3, 800b7e2 <_strtod_l+0x942>
 800b7b0:	f7ff fb58 	bl	800ae64 <sulp>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b7bc:	f7f4 fd66 	bl	800028c <__adddf3>
 800b7c0:	4682      	mov	sl, r0
 800b7c2:	468b      	mov	fp, r1
 800b7c4:	e7df      	b.n	800b786 <_strtod_l+0x8e6>
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b7cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b7d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b7d4:	f04f 3aff 	mov.w	sl, #4294967295
 800b7d8:	e7d5      	b.n	800b786 <_strtod_l+0x8e6>
 800b7da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b7dc:	ea13 0f0a 	tst.w	r3, sl
 800b7e0:	e7e0      	b.n	800b7a4 <_strtod_l+0x904>
 800b7e2:	f7ff fb3f 	bl	800ae64 <sulp>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b7ee:	f7f4 fd4b 	bl	8000288 <__aeabi_dsub>
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	4682      	mov	sl, r0
 800b7f8:	468b      	mov	fp, r1
 800b7fa:	f7f5 f965 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d0c1      	beq.n	800b786 <_strtod_l+0x8e6>
 800b802:	e60e      	b.n	800b422 <_strtod_l+0x582>
 800b804:	fffffc02 	.word	0xfffffc02
 800b808:	7ff00000 	.word	0x7ff00000
 800b80c:	39500000 	.word	0x39500000
 800b810:	000fffff 	.word	0x000fffff
 800b814:	7fefffff 	.word	0x7fefffff
 800b818:	0800e768 	.word	0x0800e768
 800b81c:	4631      	mov	r1, r6
 800b81e:	4628      	mov	r0, r5
 800b820:	f002 fa7e 	bl	800dd20 <__ratio>
 800b824:	ec59 8b10 	vmov	r8, r9, d0
 800b828:	ee10 0a10 	vmov	r0, s0
 800b82c:	2200      	movs	r2, #0
 800b82e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b832:	4649      	mov	r1, r9
 800b834:	f7f5 f95c 	bl	8000af0 <__aeabi_dcmple>
 800b838:	2800      	cmp	r0, #0
 800b83a:	d07c      	beq.n	800b936 <_strtod_l+0xa96>
 800b83c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d04c      	beq.n	800b8dc <_strtod_l+0xa3c>
 800b842:	4b95      	ldr	r3, [pc, #596]	; (800ba98 <_strtod_l+0xbf8>)
 800b844:	2200      	movs	r2, #0
 800b846:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b84a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ba98 <_strtod_l+0xbf8>
 800b84e:	f04f 0800 	mov.w	r8, #0
 800b852:	4b92      	ldr	r3, [pc, #584]	; (800ba9c <_strtod_l+0xbfc>)
 800b854:	403b      	ands	r3, r7
 800b856:	9311      	str	r3, [sp, #68]	; 0x44
 800b858:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b85a:	4b91      	ldr	r3, [pc, #580]	; (800baa0 <_strtod_l+0xc00>)
 800b85c:	429a      	cmp	r2, r3
 800b85e:	f040 80b2 	bne.w	800b9c6 <_strtod_l+0xb26>
 800b862:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b86a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b86e:	ec4b ab10 	vmov	d0, sl, fp
 800b872:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b876:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b87a:	f002 f979 	bl	800db70 <__ulp>
 800b87e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b882:	ec53 2b10 	vmov	r2, r3, d0
 800b886:	f7f4 feb7 	bl	80005f8 <__aeabi_dmul>
 800b88a:	4652      	mov	r2, sl
 800b88c:	465b      	mov	r3, fp
 800b88e:	f7f4 fcfd 	bl	800028c <__adddf3>
 800b892:	460b      	mov	r3, r1
 800b894:	4981      	ldr	r1, [pc, #516]	; (800ba9c <_strtod_l+0xbfc>)
 800b896:	4a83      	ldr	r2, [pc, #524]	; (800baa4 <_strtod_l+0xc04>)
 800b898:	4019      	ands	r1, r3
 800b89a:	4291      	cmp	r1, r2
 800b89c:	4682      	mov	sl, r0
 800b89e:	d95e      	bls.n	800b95e <_strtod_l+0xabe>
 800b8a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8a2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d103      	bne.n	800b8b2 <_strtod_l+0xa12>
 800b8aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	f43f ad43 	beq.w	800b338 <_strtod_l+0x498>
 800b8b2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800bab0 <_strtod_l+0xc10>
 800b8b6:	f04f 3aff 	mov.w	sl, #4294967295
 800b8ba:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f001 fe2b 	bl	800d518 <_Bfree>
 800b8c2:	9907      	ldr	r1, [sp, #28]
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f001 fe27 	bl	800d518 <_Bfree>
 800b8ca:	4631      	mov	r1, r6
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f001 fe23 	bl	800d518 <_Bfree>
 800b8d2:	4629      	mov	r1, r5
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f001 fe1f 	bl	800d518 <_Bfree>
 800b8da:	e613      	b.n	800b504 <_strtod_l+0x664>
 800b8dc:	f1ba 0f00 	cmp.w	sl, #0
 800b8e0:	d11b      	bne.n	800b91a <_strtod_l+0xa7a>
 800b8e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8e6:	b9f3      	cbnz	r3, 800b926 <_strtod_l+0xa86>
 800b8e8:	4b6b      	ldr	r3, [pc, #428]	; (800ba98 <_strtod_l+0xbf8>)
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	4640      	mov	r0, r8
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	f7f5 f8f4 	bl	8000adc <__aeabi_dcmplt>
 800b8f4:	b9d0      	cbnz	r0, 800b92c <_strtod_l+0xa8c>
 800b8f6:	4640      	mov	r0, r8
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	4b6b      	ldr	r3, [pc, #428]	; (800baa8 <_strtod_l+0xc08>)
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f7f4 fe7b 	bl	80005f8 <__aeabi_dmul>
 800b902:	4680      	mov	r8, r0
 800b904:	4689      	mov	r9, r1
 800b906:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b90a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b90e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b910:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b914:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b918:	e79b      	b.n	800b852 <_strtod_l+0x9b2>
 800b91a:	f1ba 0f01 	cmp.w	sl, #1
 800b91e:	d102      	bne.n	800b926 <_strtod_l+0xa86>
 800b920:	2f00      	cmp	r7, #0
 800b922:	f43f ad7e 	beq.w	800b422 <_strtod_l+0x582>
 800b926:	4b61      	ldr	r3, [pc, #388]	; (800baac <_strtod_l+0xc0c>)
 800b928:	2200      	movs	r2, #0
 800b92a:	e78c      	b.n	800b846 <_strtod_l+0x9a6>
 800b92c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800baa8 <_strtod_l+0xc08>
 800b930:	f04f 0800 	mov.w	r8, #0
 800b934:	e7e7      	b.n	800b906 <_strtod_l+0xa66>
 800b936:	4b5c      	ldr	r3, [pc, #368]	; (800baa8 <_strtod_l+0xc08>)
 800b938:	4640      	mov	r0, r8
 800b93a:	4649      	mov	r1, r9
 800b93c:	2200      	movs	r2, #0
 800b93e:	f7f4 fe5b 	bl	80005f8 <__aeabi_dmul>
 800b942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b944:	4680      	mov	r8, r0
 800b946:	4689      	mov	r9, r1
 800b948:	b933      	cbnz	r3, 800b958 <_strtod_l+0xab8>
 800b94a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b94e:	9012      	str	r0, [sp, #72]	; 0x48
 800b950:	9313      	str	r3, [sp, #76]	; 0x4c
 800b952:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b956:	e7dd      	b.n	800b914 <_strtod_l+0xa74>
 800b958:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b95c:	e7f9      	b.n	800b952 <_strtod_l+0xab2>
 800b95e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b962:	9b04      	ldr	r3, [sp, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1a8      	bne.n	800b8ba <_strtod_l+0xa1a>
 800b968:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b96c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b96e:	0d1b      	lsrs	r3, r3, #20
 800b970:	051b      	lsls	r3, r3, #20
 800b972:	429a      	cmp	r2, r3
 800b974:	d1a1      	bne.n	800b8ba <_strtod_l+0xa1a>
 800b976:	4640      	mov	r0, r8
 800b978:	4649      	mov	r1, r9
 800b97a:	f7f5 f99d 	bl	8000cb8 <__aeabi_d2lz>
 800b97e:	f7f4 fe0d 	bl	800059c <__aeabi_l2d>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	4640      	mov	r0, r8
 800b988:	4649      	mov	r1, r9
 800b98a:	f7f4 fc7d 	bl	8000288 <__aeabi_dsub>
 800b98e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b990:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b994:	ea43 030a 	orr.w	r3, r3, sl
 800b998:	4313      	orrs	r3, r2
 800b99a:	4680      	mov	r8, r0
 800b99c:	4689      	mov	r9, r1
 800b99e:	d053      	beq.n	800ba48 <_strtod_l+0xba8>
 800b9a0:	a335      	add	r3, pc, #212	; (adr r3, 800ba78 <_strtod_l+0xbd8>)
 800b9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a6:	f7f5 f899 	bl	8000adc <__aeabi_dcmplt>
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	f47f acce 	bne.w	800b34c <_strtod_l+0x4ac>
 800b9b0:	a333      	add	r3, pc, #204	; (adr r3, 800ba80 <_strtod_l+0xbe0>)
 800b9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b6:	4640      	mov	r0, r8
 800b9b8:	4649      	mov	r1, r9
 800b9ba:	f7f5 f8ad 	bl	8000b18 <__aeabi_dcmpgt>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	f43f af7b 	beq.w	800b8ba <_strtod_l+0xa1a>
 800b9c4:	e4c2      	b.n	800b34c <_strtod_l+0x4ac>
 800b9c6:	9b04      	ldr	r3, [sp, #16]
 800b9c8:	b333      	cbz	r3, 800ba18 <_strtod_l+0xb78>
 800b9ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b9d0:	d822      	bhi.n	800ba18 <_strtod_l+0xb78>
 800b9d2:	a32d      	add	r3, pc, #180	; (adr r3, 800ba88 <_strtod_l+0xbe8>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	4640      	mov	r0, r8
 800b9da:	4649      	mov	r1, r9
 800b9dc:	f7f5 f888 	bl	8000af0 <__aeabi_dcmple>
 800b9e0:	b1a0      	cbz	r0, 800ba0c <_strtod_l+0xb6c>
 800b9e2:	4649      	mov	r1, r9
 800b9e4:	4640      	mov	r0, r8
 800b9e6:	f7f5 f8df 	bl	8000ba8 <__aeabi_d2uiz>
 800b9ea:	2801      	cmp	r0, #1
 800b9ec:	bf38      	it	cc
 800b9ee:	2001      	movcc	r0, #1
 800b9f0:	f7f4 fd88 	bl	8000504 <__aeabi_ui2d>
 800b9f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9f6:	4680      	mov	r8, r0
 800b9f8:	4689      	mov	r9, r1
 800b9fa:	bb13      	cbnz	r3, 800ba42 <_strtod_l+0xba2>
 800b9fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba00:	9014      	str	r0, [sp, #80]	; 0x50
 800ba02:	9315      	str	r3, [sp, #84]	; 0x54
 800ba04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ba08:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ba0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ba14:	1a9b      	subs	r3, r3, r2
 800ba16:	930d      	str	r3, [sp, #52]	; 0x34
 800ba18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba1c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ba20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ba24:	f002 f8a4 	bl	800db70 <__ulp>
 800ba28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba2c:	ec53 2b10 	vmov	r2, r3, d0
 800ba30:	f7f4 fde2 	bl	80005f8 <__aeabi_dmul>
 800ba34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ba38:	f7f4 fc28 	bl	800028c <__adddf3>
 800ba3c:	4682      	mov	sl, r0
 800ba3e:	468b      	mov	fp, r1
 800ba40:	e78f      	b.n	800b962 <_strtod_l+0xac2>
 800ba42:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800ba46:	e7dd      	b.n	800ba04 <_strtod_l+0xb64>
 800ba48:	a311      	add	r3, pc, #68	; (adr r3, 800ba90 <_strtod_l+0xbf0>)
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	f7f5 f845 	bl	8000adc <__aeabi_dcmplt>
 800ba52:	e7b4      	b.n	800b9be <_strtod_l+0xb1e>
 800ba54:	2300      	movs	r3, #0
 800ba56:	930e      	str	r3, [sp, #56]	; 0x38
 800ba58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ba5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ba5c:	6013      	str	r3, [r2, #0]
 800ba5e:	f7ff ba65 	b.w	800af2c <_strtod_l+0x8c>
 800ba62:	2b65      	cmp	r3, #101	; 0x65
 800ba64:	f43f ab5d 	beq.w	800b122 <_strtod_l+0x282>
 800ba68:	2b45      	cmp	r3, #69	; 0x45
 800ba6a:	f43f ab5a 	beq.w	800b122 <_strtod_l+0x282>
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f7ff bb92 	b.w	800b198 <_strtod_l+0x2f8>
 800ba74:	f3af 8000 	nop.w
 800ba78:	94a03595 	.word	0x94a03595
 800ba7c:	3fdfffff 	.word	0x3fdfffff
 800ba80:	35afe535 	.word	0x35afe535
 800ba84:	3fe00000 	.word	0x3fe00000
 800ba88:	ffc00000 	.word	0xffc00000
 800ba8c:	41dfffff 	.word	0x41dfffff
 800ba90:	94a03595 	.word	0x94a03595
 800ba94:	3fcfffff 	.word	0x3fcfffff
 800ba98:	3ff00000 	.word	0x3ff00000
 800ba9c:	7ff00000 	.word	0x7ff00000
 800baa0:	7fe00000 	.word	0x7fe00000
 800baa4:	7c9fffff 	.word	0x7c9fffff
 800baa8:	3fe00000 	.word	0x3fe00000
 800baac:	bff00000 	.word	0xbff00000
 800bab0:	7fefffff 	.word	0x7fefffff

0800bab4 <strtod>:
 800bab4:	460a      	mov	r2, r1
 800bab6:	4601      	mov	r1, r0
 800bab8:	4802      	ldr	r0, [pc, #8]	; (800bac4 <strtod+0x10>)
 800baba:	4b03      	ldr	r3, [pc, #12]	; (800bac8 <strtod+0x14>)
 800babc:	6800      	ldr	r0, [r0, #0]
 800babe:	f7ff b9ef 	b.w	800aea0 <_strtod_l>
 800bac2:	bf00      	nop
 800bac4:	20000014 	.word	0x20000014
 800bac8:	2000007c 	.word	0x2000007c

0800bacc <__swbuf_r>:
 800bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bace:	460e      	mov	r6, r1
 800bad0:	4614      	mov	r4, r2
 800bad2:	4605      	mov	r5, r0
 800bad4:	b118      	cbz	r0, 800bade <__swbuf_r+0x12>
 800bad6:	6983      	ldr	r3, [r0, #24]
 800bad8:	b90b      	cbnz	r3, 800bade <__swbuf_r+0x12>
 800bada:	f001 f84b 	bl	800cb74 <__sinit>
 800bade:	4b21      	ldr	r3, [pc, #132]	; (800bb64 <__swbuf_r+0x98>)
 800bae0:	429c      	cmp	r4, r3
 800bae2:	d12b      	bne.n	800bb3c <__swbuf_r+0x70>
 800bae4:	686c      	ldr	r4, [r5, #4]
 800bae6:	69a3      	ldr	r3, [r4, #24]
 800bae8:	60a3      	str	r3, [r4, #8]
 800baea:	89a3      	ldrh	r3, [r4, #12]
 800baec:	071a      	lsls	r2, r3, #28
 800baee:	d52f      	bpl.n	800bb50 <__swbuf_r+0x84>
 800baf0:	6923      	ldr	r3, [r4, #16]
 800baf2:	b36b      	cbz	r3, 800bb50 <__swbuf_r+0x84>
 800baf4:	6923      	ldr	r3, [r4, #16]
 800baf6:	6820      	ldr	r0, [r4, #0]
 800baf8:	1ac0      	subs	r0, r0, r3
 800bafa:	6963      	ldr	r3, [r4, #20]
 800bafc:	b2f6      	uxtb	r6, r6
 800bafe:	4283      	cmp	r3, r0
 800bb00:	4637      	mov	r7, r6
 800bb02:	dc04      	bgt.n	800bb0e <__swbuf_r+0x42>
 800bb04:	4621      	mov	r1, r4
 800bb06:	4628      	mov	r0, r5
 800bb08:	f000 ffa0 	bl	800ca4c <_fflush_r>
 800bb0c:	bb30      	cbnz	r0, 800bb5c <__swbuf_r+0x90>
 800bb0e:	68a3      	ldr	r3, [r4, #8]
 800bb10:	3b01      	subs	r3, #1
 800bb12:	60a3      	str	r3, [r4, #8]
 800bb14:	6823      	ldr	r3, [r4, #0]
 800bb16:	1c5a      	adds	r2, r3, #1
 800bb18:	6022      	str	r2, [r4, #0]
 800bb1a:	701e      	strb	r6, [r3, #0]
 800bb1c:	6963      	ldr	r3, [r4, #20]
 800bb1e:	3001      	adds	r0, #1
 800bb20:	4283      	cmp	r3, r0
 800bb22:	d004      	beq.n	800bb2e <__swbuf_r+0x62>
 800bb24:	89a3      	ldrh	r3, [r4, #12]
 800bb26:	07db      	lsls	r3, r3, #31
 800bb28:	d506      	bpl.n	800bb38 <__swbuf_r+0x6c>
 800bb2a:	2e0a      	cmp	r6, #10
 800bb2c:	d104      	bne.n	800bb38 <__swbuf_r+0x6c>
 800bb2e:	4621      	mov	r1, r4
 800bb30:	4628      	mov	r0, r5
 800bb32:	f000 ff8b 	bl	800ca4c <_fflush_r>
 800bb36:	b988      	cbnz	r0, 800bb5c <__swbuf_r+0x90>
 800bb38:	4638      	mov	r0, r7
 800bb3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb3c:	4b0a      	ldr	r3, [pc, #40]	; (800bb68 <__swbuf_r+0x9c>)
 800bb3e:	429c      	cmp	r4, r3
 800bb40:	d101      	bne.n	800bb46 <__swbuf_r+0x7a>
 800bb42:	68ac      	ldr	r4, [r5, #8]
 800bb44:	e7cf      	b.n	800bae6 <__swbuf_r+0x1a>
 800bb46:	4b09      	ldr	r3, [pc, #36]	; (800bb6c <__swbuf_r+0xa0>)
 800bb48:	429c      	cmp	r4, r3
 800bb4a:	bf08      	it	eq
 800bb4c:	68ec      	ldreq	r4, [r5, #12]
 800bb4e:	e7ca      	b.n	800bae6 <__swbuf_r+0x1a>
 800bb50:	4621      	mov	r1, r4
 800bb52:	4628      	mov	r0, r5
 800bb54:	f000 f80c 	bl	800bb70 <__swsetup_r>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d0cb      	beq.n	800baf4 <__swbuf_r+0x28>
 800bb5c:	f04f 37ff 	mov.w	r7, #4294967295
 800bb60:	e7ea      	b.n	800bb38 <__swbuf_r+0x6c>
 800bb62:	bf00      	nop
 800bb64:	0800e844 	.word	0x0800e844
 800bb68:	0800e864 	.word	0x0800e864
 800bb6c:	0800e824 	.word	0x0800e824

0800bb70 <__swsetup_r>:
 800bb70:	4b32      	ldr	r3, [pc, #200]	; (800bc3c <__swsetup_r+0xcc>)
 800bb72:	b570      	push	{r4, r5, r6, lr}
 800bb74:	681d      	ldr	r5, [r3, #0]
 800bb76:	4606      	mov	r6, r0
 800bb78:	460c      	mov	r4, r1
 800bb7a:	b125      	cbz	r5, 800bb86 <__swsetup_r+0x16>
 800bb7c:	69ab      	ldr	r3, [r5, #24]
 800bb7e:	b913      	cbnz	r3, 800bb86 <__swsetup_r+0x16>
 800bb80:	4628      	mov	r0, r5
 800bb82:	f000 fff7 	bl	800cb74 <__sinit>
 800bb86:	4b2e      	ldr	r3, [pc, #184]	; (800bc40 <__swsetup_r+0xd0>)
 800bb88:	429c      	cmp	r4, r3
 800bb8a:	d10f      	bne.n	800bbac <__swsetup_r+0x3c>
 800bb8c:	686c      	ldr	r4, [r5, #4]
 800bb8e:	89a3      	ldrh	r3, [r4, #12]
 800bb90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb94:	0719      	lsls	r1, r3, #28
 800bb96:	d42c      	bmi.n	800bbf2 <__swsetup_r+0x82>
 800bb98:	06dd      	lsls	r5, r3, #27
 800bb9a:	d411      	bmi.n	800bbc0 <__swsetup_r+0x50>
 800bb9c:	2309      	movs	r3, #9
 800bb9e:	6033      	str	r3, [r6, #0]
 800bba0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bba4:	81a3      	strh	r3, [r4, #12]
 800bba6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbaa:	e03e      	b.n	800bc2a <__swsetup_r+0xba>
 800bbac:	4b25      	ldr	r3, [pc, #148]	; (800bc44 <__swsetup_r+0xd4>)
 800bbae:	429c      	cmp	r4, r3
 800bbb0:	d101      	bne.n	800bbb6 <__swsetup_r+0x46>
 800bbb2:	68ac      	ldr	r4, [r5, #8]
 800bbb4:	e7eb      	b.n	800bb8e <__swsetup_r+0x1e>
 800bbb6:	4b24      	ldr	r3, [pc, #144]	; (800bc48 <__swsetup_r+0xd8>)
 800bbb8:	429c      	cmp	r4, r3
 800bbba:	bf08      	it	eq
 800bbbc:	68ec      	ldreq	r4, [r5, #12]
 800bbbe:	e7e6      	b.n	800bb8e <__swsetup_r+0x1e>
 800bbc0:	0758      	lsls	r0, r3, #29
 800bbc2:	d512      	bpl.n	800bbea <__swsetup_r+0x7a>
 800bbc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbc6:	b141      	cbz	r1, 800bbda <__swsetup_r+0x6a>
 800bbc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbcc:	4299      	cmp	r1, r3
 800bbce:	d002      	beq.n	800bbd6 <__swsetup_r+0x66>
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	f002 f92b 	bl	800de2c <_free_r>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	6363      	str	r3, [r4, #52]	; 0x34
 800bbda:	89a3      	ldrh	r3, [r4, #12]
 800bbdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbe0:	81a3      	strh	r3, [r4, #12]
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	6063      	str	r3, [r4, #4]
 800bbe6:	6923      	ldr	r3, [r4, #16]
 800bbe8:	6023      	str	r3, [r4, #0]
 800bbea:	89a3      	ldrh	r3, [r4, #12]
 800bbec:	f043 0308 	orr.w	r3, r3, #8
 800bbf0:	81a3      	strh	r3, [r4, #12]
 800bbf2:	6923      	ldr	r3, [r4, #16]
 800bbf4:	b94b      	cbnz	r3, 800bc0a <__swsetup_r+0x9a>
 800bbf6:	89a3      	ldrh	r3, [r4, #12]
 800bbf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc00:	d003      	beq.n	800bc0a <__swsetup_r+0x9a>
 800bc02:	4621      	mov	r1, r4
 800bc04:	4630      	mov	r0, r6
 800bc06:	f001 fbed 	bl	800d3e4 <__smakebuf_r>
 800bc0a:	89a0      	ldrh	r0, [r4, #12]
 800bc0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc10:	f010 0301 	ands.w	r3, r0, #1
 800bc14:	d00a      	beq.n	800bc2c <__swsetup_r+0xbc>
 800bc16:	2300      	movs	r3, #0
 800bc18:	60a3      	str	r3, [r4, #8]
 800bc1a:	6963      	ldr	r3, [r4, #20]
 800bc1c:	425b      	negs	r3, r3
 800bc1e:	61a3      	str	r3, [r4, #24]
 800bc20:	6923      	ldr	r3, [r4, #16]
 800bc22:	b943      	cbnz	r3, 800bc36 <__swsetup_r+0xc6>
 800bc24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc28:	d1ba      	bne.n	800bba0 <__swsetup_r+0x30>
 800bc2a:	bd70      	pop	{r4, r5, r6, pc}
 800bc2c:	0781      	lsls	r1, r0, #30
 800bc2e:	bf58      	it	pl
 800bc30:	6963      	ldrpl	r3, [r4, #20]
 800bc32:	60a3      	str	r3, [r4, #8]
 800bc34:	e7f4      	b.n	800bc20 <__swsetup_r+0xb0>
 800bc36:	2000      	movs	r0, #0
 800bc38:	e7f7      	b.n	800bc2a <__swsetup_r+0xba>
 800bc3a:	bf00      	nop
 800bc3c:	20000014 	.word	0x20000014
 800bc40:	0800e844 	.word	0x0800e844
 800bc44:	0800e864 	.word	0x0800e864
 800bc48:	0800e824 	.word	0x0800e824

0800bc4c <quorem>:
 800bc4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc50:	6903      	ldr	r3, [r0, #16]
 800bc52:	690c      	ldr	r4, [r1, #16]
 800bc54:	42a3      	cmp	r3, r4
 800bc56:	4607      	mov	r7, r0
 800bc58:	f2c0 8081 	blt.w	800bd5e <quorem+0x112>
 800bc5c:	3c01      	subs	r4, #1
 800bc5e:	f101 0814 	add.w	r8, r1, #20
 800bc62:	f100 0514 	add.w	r5, r0, #20
 800bc66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc6a:	9301      	str	r3, [sp, #4]
 800bc6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc74:	3301      	adds	r3, #1
 800bc76:	429a      	cmp	r2, r3
 800bc78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc80:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc84:	d331      	bcc.n	800bcea <quorem+0x9e>
 800bc86:	f04f 0e00 	mov.w	lr, #0
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	46ac      	mov	ip, r5
 800bc8e:	46f2      	mov	sl, lr
 800bc90:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc94:	b293      	uxth	r3, r2
 800bc96:	fb06 e303 	mla	r3, r6, r3, lr
 800bc9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	ebaa 0303 	sub.w	r3, sl, r3
 800bca4:	0c12      	lsrs	r2, r2, #16
 800bca6:	f8dc a000 	ldr.w	sl, [ip]
 800bcaa:	fb06 e202 	mla	r2, r6, r2, lr
 800bcae:	fa13 f38a 	uxtah	r3, r3, sl
 800bcb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bcb6:	fa1f fa82 	uxth.w	sl, r2
 800bcba:	f8dc 2000 	ldr.w	r2, [ip]
 800bcbe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bcc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bccc:	4581      	cmp	r9, r0
 800bcce:	f84c 3b04 	str.w	r3, [ip], #4
 800bcd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bcd6:	d2db      	bcs.n	800bc90 <quorem+0x44>
 800bcd8:	f855 300b 	ldr.w	r3, [r5, fp]
 800bcdc:	b92b      	cbnz	r3, 800bcea <quorem+0x9e>
 800bcde:	9b01      	ldr	r3, [sp, #4]
 800bce0:	3b04      	subs	r3, #4
 800bce2:	429d      	cmp	r5, r3
 800bce4:	461a      	mov	r2, r3
 800bce6:	d32e      	bcc.n	800bd46 <quorem+0xfa>
 800bce8:	613c      	str	r4, [r7, #16]
 800bcea:	4638      	mov	r0, r7
 800bcec:	f001 fe9c 	bl	800da28 <__mcmp>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	db24      	blt.n	800bd3e <quorem+0xf2>
 800bcf4:	3601      	adds	r6, #1
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	f04f 0c00 	mov.w	ip, #0
 800bcfc:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd00:	f8d0 e000 	ldr.w	lr, [r0]
 800bd04:	b293      	uxth	r3, r2
 800bd06:	ebac 0303 	sub.w	r3, ip, r3
 800bd0a:	0c12      	lsrs	r2, r2, #16
 800bd0c:	fa13 f38e 	uxtah	r3, r3, lr
 800bd10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd1e:	45c1      	cmp	r9, r8
 800bd20:	f840 3b04 	str.w	r3, [r0], #4
 800bd24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd28:	d2e8      	bcs.n	800bcfc <quorem+0xb0>
 800bd2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd32:	b922      	cbnz	r2, 800bd3e <quorem+0xf2>
 800bd34:	3b04      	subs	r3, #4
 800bd36:	429d      	cmp	r5, r3
 800bd38:	461a      	mov	r2, r3
 800bd3a:	d30a      	bcc.n	800bd52 <quorem+0x106>
 800bd3c:	613c      	str	r4, [r7, #16]
 800bd3e:	4630      	mov	r0, r6
 800bd40:	b003      	add	sp, #12
 800bd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd46:	6812      	ldr	r2, [r2, #0]
 800bd48:	3b04      	subs	r3, #4
 800bd4a:	2a00      	cmp	r2, #0
 800bd4c:	d1cc      	bne.n	800bce8 <quorem+0x9c>
 800bd4e:	3c01      	subs	r4, #1
 800bd50:	e7c7      	b.n	800bce2 <quorem+0x96>
 800bd52:	6812      	ldr	r2, [r2, #0]
 800bd54:	3b04      	subs	r3, #4
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	d1f0      	bne.n	800bd3c <quorem+0xf0>
 800bd5a:	3c01      	subs	r4, #1
 800bd5c:	e7eb      	b.n	800bd36 <quorem+0xea>
 800bd5e:	2000      	movs	r0, #0
 800bd60:	e7ee      	b.n	800bd40 <quorem+0xf4>
 800bd62:	0000      	movs	r0, r0
 800bd64:	0000      	movs	r0, r0
	...

0800bd68 <_dtoa_r>:
 800bd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6c:	ed2d 8b02 	vpush	{d8}
 800bd70:	ec57 6b10 	vmov	r6, r7, d0
 800bd74:	b095      	sub	sp, #84	; 0x54
 800bd76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd7c:	9105      	str	r1, [sp, #20]
 800bd7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bd82:	4604      	mov	r4, r0
 800bd84:	9209      	str	r2, [sp, #36]	; 0x24
 800bd86:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd88:	b975      	cbnz	r5, 800bda8 <_dtoa_r+0x40>
 800bd8a:	2010      	movs	r0, #16
 800bd8c:	f001 fb6a 	bl	800d464 <malloc>
 800bd90:	4602      	mov	r2, r0
 800bd92:	6260      	str	r0, [r4, #36]	; 0x24
 800bd94:	b920      	cbnz	r0, 800bda0 <_dtoa_r+0x38>
 800bd96:	4bb2      	ldr	r3, [pc, #712]	; (800c060 <_dtoa_r+0x2f8>)
 800bd98:	21ea      	movs	r1, #234	; 0xea
 800bd9a:	48b2      	ldr	r0, [pc, #712]	; (800c064 <_dtoa_r+0x2fc>)
 800bd9c:	f002 fad8 	bl	800e350 <__assert_func>
 800bda0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bda4:	6005      	str	r5, [r0, #0]
 800bda6:	60c5      	str	r5, [r0, #12]
 800bda8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdaa:	6819      	ldr	r1, [r3, #0]
 800bdac:	b151      	cbz	r1, 800bdc4 <_dtoa_r+0x5c>
 800bdae:	685a      	ldr	r2, [r3, #4]
 800bdb0:	604a      	str	r2, [r1, #4]
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	4093      	lsls	r3, r2
 800bdb6:	608b      	str	r3, [r1, #8]
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f001 fbad 	bl	800d518 <_Bfree>
 800bdbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	1e3b      	subs	r3, r7, #0
 800bdc6:	bfb9      	ittee	lt
 800bdc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bdcc:	9303      	strlt	r3, [sp, #12]
 800bdce:	2300      	movge	r3, #0
 800bdd0:	f8c8 3000 	strge.w	r3, [r8]
 800bdd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800bdd8:	4ba3      	ldr	r3, [pc, #652]	; (800c068 <_dtoa_r+0x300>)
 800bdda:	bfbc      	itt	lt
 800bddc:	2201      	movlt	r2, #1
 800bdde:	f8c8 2000 	strlt.w	r2, [r8]
 800bde2:	ea33 0309 	bics.w	r3, r3, r9
 800bde6:	d11b      	bne.n	800be20 <_dtoa_r+0xb8>
 800bde8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bdea:	f242 730f 	movw	r3, #9999	; 0x270f
 800bdee:	6013      	str	r3, [r2, #0]
 800bdf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bdf4:	4333      	orrs	r3, r6
 800bdf6:	f000 857a 	beq.w	800c8ee <_dtoa_r+0xb86>
 800bdfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdfc:	b963      	cbnz	r3, 800be18 <_dtoa_r+0xb0>
 800bdfe:	4b9b      	ldr	r3, [pc, #620]	; (800c06c <_dtoa_r+0x304>)
 800be00:	e024      	b.n	800be4c <_dtoa_r+0xe4>
 800be02:	4b9b      	ldr	r3, [pc, #620]	; (800c070 <_dtoa_r+0x308>)
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	3308      	adds	r3, #8
 800be08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be0a:	6013      	str	r3, [r2, #0]
 800be0c:	9800      	ldr	r0, [sp, #0]
 800be0e:	b015      	add	sp, #84	; 0x54
 800be10:	ecbd 8b02 	vpop	{d8}
 800be14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be18:	4b94      	ldr	r3, [pc, #592]	; (800c06c <_dtoa_r+0x304>)
 800be1a:	9300      	str	r3, [sp, #0]
 800be1c:	3303      	adds	r3, #3
 800be1e:	e7f3      	b.n	800be08 <_dtoa_r+0xa0>
 800be20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be24:	2200      	movs	r2, #0
 800be26:	ec51 0b17 	vmov	r0, r1, d7
 800be2a:	2300      	movs	r3, #0
 800be2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800be30:	f7f4 fe4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800be34:	4680      	mov	r8, r0
 800be36:	b158      	cbz	r0, 800be50 <_dtoa_r+0xe8>
 800be38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be3a:	2301      	movs	r3, #1
 800be3c:	6013      	str	r3, [r2, #0]
 800be3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 8551 	beq.w	800c8e8 <_dtoa_r+0xb80>
 800be46:	488b      	ldr	r0, [pc, #556]	; (800c074 <_dtoa_r+0x30c>)
 800be48:	6018      	str	r0, [r3, #0]
 800be4a:	1e43      	subs	r3, r0, #1
 800be4c:	9300      	str	r3, [sp, #0]
 800be4e:	e7dd      	b.n	800be0c <_dtoa_r+0xa4>
 800be50:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800be54:	aa12      	add	r2, sp, #72	; 0x48
 800be56:	a913      	add	r1, sp, #76	; 0x4c
 800be58:	4620      	mov	r0, r4
 800be5a:	f001 ff05 	bl	800dc68 <__d2b>
 800be5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be62:	4683      	mov	fp, r0
 800be64:	2d00      	cmp	r5, #0
 800be66:	d07c      	beq.n	800bf62 <_dtoa_r+0x1fa>
 800be68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be6a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800be6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be72:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800be76:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800be7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800be7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be82:	4b7d      	ldr	r3, [pc, #500]	; (800c078 <_dtoa_r+0x310>)
 800be84:	2200      	movs	r2, #0
 800be86:	4630      	mov	r0, r6
 800be88:	4639      	mov	r1, r7
 800be8a:	f7f4 f9fd 	bl	8000288 <__aeabi_dsub>
 800be8e:	a36e      	add	r3, pc, #440	; (adr r3, 800c048 <_dtoa_r+0x2e0>)
 800be90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be94:	f7f4 fbb0 	bl	80005f8 <__aeabi_dmul>
 800be98:	a36d      	add	r3, pc, #436	; (adr r3, 800c050 <_dtoa_r+0x2e8>)
 800be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9e:	f7f4 f9f5 	bl	800028c <__adddf3>
 800bea2:	4606      	mov	r6, r0
 800bea4:	4628      	mov	r0, r5
 800bea6:	460f      	mov	r7, r1
 800bea8:	f7f4 fb3c 	bl	8000524 <__aeabi_i2d>
 800beac:	a36a      	add	r3, pc, #424	; (adr r3, 800c058 <_dtoa_r+0x2f0>)
 800beae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb2:	f7f4 fba1 	bl	80005f8 <__aeabi_dmul>
 800beb6:	4602      	mov	r2, r0
 800beb8:	460b      	mov	r3, r1
 800beba:	4630      	mov	r0, r6
 800bebc:	4639      	mov	r1, r7
 800bebe:	f7f4 f9e5 	bl	800028c <__adddf3>
 800bec2:	4606      	mov	r6, r0
 800bec4:	460f      	mov	r7, r1
 800bec6:	f7f4 fe47 	bl	8000b58 <__aeabi_d2iz>
 800beca:	2200      	movs	r2, #0
 800becc:	4682      	mov	sl, r0
 800bece:	2300      	movs	r3, #0
 800bed0:	4630      	mov	r0, r6
 800bed2:	4639      	mov	r1, r7
 800bed4:	f7f4 fe02 	bl	8000adc <__aeabi_dcmplt>
 800bed8:	b148      	cbz	r0, 800beee <_dtoa_r+0x186>
 800beda:	4650      	mov	r0, sl
 800bedc:	f7f4 fb22 	bl	8000524 <__aeabi_i2d>
 800bee0:	4632      	mov	r2, r6
 800bee2:	463b      	mov	r3, r7
 800bee4:	f7f4 fdf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800bee8:	b908      	cbnz	r0, 800beee <_dtoa_r+0x186>
 800beea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800beee:	f1ba 0f16 	cmp.w	sl, #22
 800bef2:	d854      	bhi.n	800bf9e <_dtoa_r+0x236>
 800bef4:	4b61      	ldr	r3, [pc, #388]	; (800c07c <_dtoa_r+0x314>)
 800bef6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bf02:	f7f4 fdeb 	bl	8000adc <__aeabi_dcmplt>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d04b      	beq.n	800bfa2 <_dtoa_r+0x23a>
 800bf0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf0e:	2300      	movs	r3, #0
 800bf10:	930e      	str	r3, [sp, #56]	; 0x38
 800bf12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf14:	1b5d      	subs	r5, r3, r5
 800bf16:	1e6b      	subs	r3, r5, #1
 800bf18:	9304      	str	r3, [sp, #16]
 800bf1a:	bf43      	ittte	mi
 800bf1c:	2300      	movmi	r3, #0
 800bf1e:	f1c5 0801 	rsbmi	r8, r5, #1
 800bf22:	9304      	strmi	r3, [sp, #16]
 800bf24:	f04f 0800 	movpl.w	r8, #0
 800bf28:	f1ba 0f00 	cmp.w	sl, #0
 800bf2c:	db3b      	blt.n	800bfa6 <_dtoa_r+0x23e>
 800bf2e:	9b04      	ldr	r3, [sp, #16]
 800bf30:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800bf34:	4453      	add	r3, sl
 800bf36:	9304      	str	r3, [sp, #16]
 800bf38:	2300      	movs	r3, #0
 800bf3a:	9306      	str	r3, [sp, #24]
 800bf3c:	9b05      	ldr	r3, [sp, #20]
 800bf3e:	2b09      	cmp	r3, #9
 800bf40:	d869      	bhi.n	800c016 <_dtoa_r+0x2ae>
 800bf42:	2b05      	cmp	r3, #5
 800bf44:	bfc4      	itt	gt
 800bf46:	3b04      	subgt	r3, #4
 800bf48:	9305      	strgt	r3, [sp, #20]
 800bf4a:	9b05      	ldr	r3, [sp, #20]
 800bf4c:	f1a3 0302 	sub.w	r3, r3, #2
 800bf50:	bfcc      	ite	gt
 800bf52:	2500      	movgt	r5, #0
 800bf54:	2501      	movle	r5, #1
 800bf56:	2b03      	cmp	r3, #3
 800bf58:	d869      	bhi.n	800c02e <_dtoa_r+0x2c6>
 800bf5a:	e8df f003 	tbb	[pc, r3]
 800bf5e:	4e2c      	.short	0x4e2c
 800bf60:	5a4c      	.short	0x5a4c
 800bf62:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bf66:	441d      	add	r5, r3
 800bf68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf6c:	2b20      	cmp	r3, #32
 800bf6e:	bfc1      	itttt	gt
 800bf70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf74:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bf78:	fa09 f303 	lslgt.w	r3, r9, r3
 800bf7c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bf80:	bfda      	itte	le
 800bf82:	f1c3 0320 	rsble	r3, r3, #32
 800bf86:	fa06 f003 	lslle.w	r0, r6, r3
 800bf8a:	4318      	orrgt	r0, r3
 800bf8c:	f7f4 faba 	bl	8000504 <__aeabi_ui2d>
 800bf90:	2301      	movs	r3, #1
 800bf92:	4606      	mov	r6, r0
 800bf94:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bf98:	3d01      	subs	r5, #1
 800bf9a:	9310      	str	r3, [sp, #64]	; 0x40
 800bf9c:	e771      	b.n	800be82 <_dtoa_r+0x11a>
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e7b6      	b.n	800bf10 <_dtoa_r+0x1a8>
 800bfa2:	900e      	str	r0, [sp, #56]	; 0x38
 800bfa4:	e7b5      	b.n	800bf12 <_dtoa_r+0x1aa>
 800bfa6:	f1ca 0300 	rsb	r3, sl, #0
 800bfaa:	9306      	str	r3, [sp, #24]
 800bfac:	2300      	movs	r3, #0
 800bfae:	eba8 080a 	sub.w	r8, r8, sl
 800bfb2:	930d      	str	r3, [sp, #52]	; 0x34
 800bfb4:	e7c2      	b.n	800bf3c <_dtoa_r+0x1d4>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	9308      	str	r3, [sp, #32]
 800bfba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	dc39      	bgt.n	800c034 <_dtoa_r+0x2cc>
 800bfc0:	f04f 0901 	mov.w	r9, #1
 800bfc4:	f8cd 9004 	str.w	r9, [sp, #4]
 800bfc8:	464b      	mov	r3, r9
 800bfca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bfce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	6042      	str	r2, [r0, #4]
 800bfd4:	2204      	movs	r2, #4
 800bfd6:	f102 0614 	add.w	r6, r2, #20
 800bfda:	429e      	cmp	r6, r3
 800bfdc:	6841      	ldr	r1, [r0, #4]
 800bfde:	d92f      	bls.n	800c040 <_dtoa_r+0x2d8>
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	f001 fa59 	bl	800d498 <_Balloc>
 800bfe6:	9000      	str	r0, [sp, #0]
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	d14b      	bne.n	800c084 <_dtoa_r+0x31c>
 800bfec:	4b24      	ldr	r3, [pc, #144]	; (800c080 <_dtoa_r+0x318>)
 800bfee:	4602      	mov	r2, r0
 800bff0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bff4:	e6d1      	b.n	800bd9a <_dtoa_r+0x32>
 800bff6:	2301      	movs	r3, #1
 800bff8:	e7de      	b.n	800bfb8 <_dtoa_r+0x250>
 800bffa:	2300      	movs	r3, #0
 800bffc:	9308      	str	r3, [sp, #32]
 800bffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c000:	eb0a 0903 	add.w	r9, sl, r3
 800c004:	f109 0301 	add.w	r3, r9, #1
 800c008:	2b01      	cmp	r3, #1
 800c00a:	9301      	str	r3, [sp, #4]
 800c00c:	bfb8      	it	lt
 800c00e:	2301      	movlt	r3, #1
 800c010:	e7dd      	b.n	800bfce <_dtoa_r+0x266>
 800c012:	2301      	movs	r3, #1
 800c014:	e7f2      	b.n	800bffc <_dtoa_r+0x294>
 800c016:	2501      	movs	r5, #1
 800c018:	2300      	movs	r3, #0
 800c01a:	9305      	str	r3, [sp, #20]
 800c01c:	9508      	str	r5, [sp, #32]
 800c01e:	f04f 39ff 	mov.w	r9, #4294967295
 800c022:	2200      	movs	r2, #0
 800c024:	f8cd 9004 	str.w	r9, [sp, #4]
 800c028:	2312      	movs	r3, #18
 800c02a:	9209      	str	r2, [sp, #36]	; 0x24
 800c02c:	e7cf      	b.n	800bfce <_dtoa_r+0x266>
 800c02e:	2301      	movs	r3, #1
 800c030:	9308      	str	r3, [sp, #32]
 800c032:	e7f4      	b.n	800c01e <_dtoa_r+0x2b6>
 800c034:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c038:	f8cd 9004 	str.w	r9, [sp, #4]
 800c03c:	464b      	mov	r3, r9
 800c03e:	e7c6      	b.n	800bfce <_dtoa_r+0x266>
 800c040:	3101      	adds	r1, #1
 800c042:	6041      	str	r1, [r0, #4]
 800c044:	0052      	lsls	r2, r2, #1
 800c046:	e7c6      	b.n	800bfd6 <_dtoa_r+0x26e>
 800c048:	636f4361 	.word	0x636f4361
 800c04c:	3fd287a7 	.word	0x3fd287a7
 800c050:	8b60c8b3 	.word	0x8b60c8b3
 800c054:	3fc68a28 	.word	0x3fc68a28
 800c058:	509f79fb 	.word	0x509f79fb
 800c05c:	3fd34413 	.word	0x3fd34413
 800c060:	0800e79d 	.word	0x0800e79d
 800c064:	0800e7b4 	.word	0x0800e7b4
 800c068:	7ff00000 	.word	0x7ff00000
 800c06c:	0800e799 	.word	0x0800e799
 800c070:	0800e790 	.word	0x0800e790
 800c074:	0800e71d 	.word	0x0800e71d
 800c078:	3ff80000 	.word	0x3ff80000
 800c07c:	0800e990 	.word	0x0800e990
 800c080:	0800e813 	.word	0x0800e813
 800c084:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c086:	9a00      	ldr	r2, [sp, #0]
 800c088:	601a      	str	r2, [r3, #0]
 800c08a:	9b01      	ldr	r3, [sp, #4]
 800c08c:	2b0e      	cmp	r3, #14
 800c08e:	f200 80ad 	bhi.w	800c1ec <_dtoa_r+0x484>
 800c092:	2d00      	cmp	r5, #0
 800c094:	f000 80aa 	beq.w	800c1ec <_dtoa_r+0x484>
 800c098:	f1ba 0f00 	cmp.w	sl, #0
 800c09c:	dd36      	ble.n	800c10c <_dtoa_r+0x3a4>
 800c09e:	4ac3      	ldr	r2, [pc, #780]	; (800c3ac <_dtoa_r+0x644>)
 800c0a0:	f00a 030f 	and.w	r3, sl, #15
 800c0a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c0a8:	ed93 7b00 	vldr	d7, [r3]
 800c0ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c0b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c0b4:	eeb0 8a47 	vmov.f32	s16, s14
 800c0b8:	eef0 8a67 	vmov.f32	s17, s15
 800c0bc:	d016      	beq.n	800c0ec <_dtoa_r+0x384>
 800c0be:	4bbc      	ldr	r3, [pc, #752]	; (800c3b0 <_dtoa_r+0x648>)
 800c0c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c0c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c0c8:	f7f4 fbc0 	bl	800084c <__aeabi_ddiv>
 800c0cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0d0:	f007 070f 	and.w	r7, r7, #15
 800c0d4:	2503      	movs	r5, #3
 800c0d6:	4eb6      	ldr	r6, [pc, #728]	; (800c3b0 <_dtoa_r+0x648>)
 800c0d8:	b957      	cbnz	r7, 800c0f0 <_dtoa_r+0x388>
 800c0da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0de:	ec53 2b18 	vmov	r2, r3, d8
 800c0e2:	f7f4 fbb3 	bl	800084c <__aeabi_ddiv>
 800c0e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0ea:	e029      	b.n	800c140 <_dtoa_r+0x3d8>
 800c0ec:	2502      	movs	r5, #2
 800c0ee:	e7f2      	b.n	800c0d6 <_dtoa_r+0x36e>
 800c0f0:	07f9      	lsls	r1, r7, #31
 800c0f2:	d508      	bpl.n	800c106 <_dtoa_r+0x39e>
 800c0f4:	ec51 0b18 	vmov	r0, r1, d8
 800c0f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0fc:	f7f4 fa7c 	bl	80005f8 <__aeabi_dmul>
 800c100:	ec41 0b18 	vmov	d8, r0, r1
 800c104:	3501      	adds	r5, #1
 800c106:	107f      	asrs	r7, r7, #1
 800c108:	3608      	adds	r6, #8
 800c10a:	e7e5      	b.n	800c0d8 <_dtoa_r+0x370>
 800c10c:	f000 80a6 	beq.w	800c25c <_dtoa_r+0x4f4>
 800c110:	f1ca 0600 	rsb	r6, sl, #0
 800c114:	4ba5      	ldr	r3, [pc, #660]	; (800c3ac <_dtoa_r+0x644>)
 800c116:	4fa6      	ldr	r7, [pc, #664]	; (800c3b0 <_dtoa_r+0x648>)
 800c118:	f006 020f 	and.w	r2, r6, #15
 800c11c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c124:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c128:	f7f4 fa66 	bl	80005f8 <__aeabi_dmul>
 800c12c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c130:	1136      	asrs	r6, r6, #4
 800c132:	2300      	movs	r3, #0
 800c134:	2502      	movs	r5, #2
 800c136:	2e00      	cmp	r6, #0
 800c138:	f040 8085 	bne.w	800c246 <_dtoa_r+0x4de>
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d1d2      	bne.n	800c0e6 <_dtoa_r+0x37e>
 800c140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c142:	2b00      	cmp	r3, #0
 800c144:	f000 808c 	beq.w	800c260 <_dtoa_r+0x4f8>
 800c148:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c14c:	4b99      	ldr	r3, [pc, #612]	; (800c3b4 <_dtoa_r+0x64c>)
 800c14e:	2200      	movs	r2, #0
 800c150:	4630      	mov	r0, r6
 800c152:	4639      	mov	r1, r7
 800c154:	f7f4 fcc2 	bl	8000adc <__aeabi_dcmplt>
 800c158:	2800      	cmp	r0, #0
 800c15a:	f000 8081 	beq.w	800c260 <_dtoa_r+0x4f8>
 800c15e:	9b01      	ldr	r3, [sp, #4]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d07d      	beq.n	800c260 <_dtoa_r+0x4f8>
 800c164:	f1b9 0f00 	cmp.w	r9, #0
 800c168:	dd3c      	ble.n	800c1e4 <_dtoa_r+0x47c>
 800c16a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c16e:	9307      	str	r3, [sp, #28]
 800c170:	2200      	movs	r2, #0
 800c172:	4b91      	ldr	r3, [pc, #580]	; (800c3b8 <_dtoa_r+0x650>)
 800c174:	4630      	mov	r0, r6
 800c176:	4639      	mov	r1, r7
 800c178:	f7f4 fa3e 	bl	80005f8 <__aeabi_dmul>
 800c17c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c180:	3501      	adds	r5, #1
 800c182:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c186:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c18a:	4628      	mov	r0, r5
 800c18c:	f7f4 f9ca 	bl	8000524 <__aeabi_i2d>
 800c190:	4632      	mov	r2, r6
 800c192:	463b      	mov	r3, r7
 800c194:	f7f4 fa30 	bl	80005f8 <__aeabi_dmul>
 800c198:	4b88      	ldr	r3, [pc, #544]	; (800c3bc <_dtoa_r+0x654>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	f7f4 f876 	bl	800028c <__adddf3>
 800c1a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c1a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1a8:	9303      	str	r3, [sp, #12]
 800c1aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d15c      	bne.n	800c26a <_dtoa_r+0x502>
 800c1b0:	4b83      	ldr	r3, [pc, #524]	; (800c3c0 <_dtoa_r+0x658>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	4639      	mov	r1, r7
 800c1b8:	f7f4 f866 	bl	8000288 <__aeabi_dsub>
 800c1bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1c0:	4606      	mov	r6, r0
 800c1c2:	460f      	mov	r7, r1
 800c1c4:	f7f4 fca8 	bl	8000b18 <__aeabi_dcmpgt>
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	f040 8296 	bne.w	800c6fa <_dtoa_r+0x992>
 800c1ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c1d2:	4630      	mov	r0, r6
 800c1d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1d8:	4639      	mov	r1, r7
 800c1da:	f7f4 fc7f 	bl	8000adc <__aeabi_dcmplt>
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	f040 8288 	bne.w	800c6f4 <_dtoa_r+0x98c>
 800c1e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c1e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f2c0 8158 	blt.w	800c4a4 <_dtoa_r+0x73c>
 800c1f4:	f1ba 0f0e 	cmp.w	sl, #14
 800c1f8:	f300 8154 	bgt.w	800c4a4 <_dtoa_r+0x73c>
 800c1fc:	4b6b      	ldr	r3, [pc, #428]	; (800c3ac <_dtoa_r+0x644>)
 800c1fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c202:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f280 80e3 	bge.w	800c3d4 <_dtoa_r+0x66c>
 800c20e:	9b01      	ldr	r3, [sp, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	f300 80df 	bgt.w	800c3d4 <_dtoa_r+0x66c>
 800c216:	f040 826d 	bne.w	800c6f4 <_dtoa_r+0x98c>
 800c21a:	4b69      	ldr	r3, [pc, #420]	; (800c3c0 <_dtoa_r+0x658>)
 800c21c:	2200      	movs	r2, #0
 800c21e:	4640      	mov	r0, r8
 800c220:	4649      	mov	r1, r9
 800c222:	f7f4 f9e9 	bl	80005f8 <__aeabi_dmul>
 800c226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c22a:	f7f4 fc6b 	bl	8000b04 <__aeabi_dcmpge>
 800c22e:	9e01      	ldr	r6, [sp, #4]
 800c230:	4637      	mov	r7, r6
 800c232:	2800      	cmp	r0, #0
 800c234:	f040 8243 	bne.w	800c6be <_dtoa_r+0x956>
 800c238:	9d00      	ldr	r5, [sp, #0]
 800c23a:	2331      	movs	r3, #49	; 0x31
 800c23c:	f805 3b01 	strb.w	r3, [r5], #1
 800c240:	f10a 0a01 	add.w	sl, sl, #1
 800c244:	e23f      	b.n	800c6c6 <_dtoa_r+0x95e>
 800c246:	07f2      	lsls	r2, r6, #31
 800c248:	d505      	bpl.n	800c256 <_dtoa_r+0x4ee>
 800c24a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c24e:	f7f4 f9d3 	bl	80005f8 <__aeabi_dmul>
 800c252:	3501      	adds	r5, #1
 800c254:	2301      	movs	r3, #1
 800c256:	1076      	asrs	r6, r6, #1
 800c258:	3708      	adds	r7, #8
 800c25a:	e76c      	b.n	800c136 <_dtoa_r+0x3ce>
 800c25c:	2502      	movs	r5, #2
 800c25e:	e76f      	b.n	800c140 <_dtoa_r+0x3d8>
 800c260:	9b01      	ldr	r3, [sp, #4]
 800c262:	f8cd a01c 	str.w	sl, [sp, #28]
 800c266:	930c      	str	r3, [sp, #48]	; 0x30
 800c268:	e78d      	b.n	800c186 <_dtoa_r+0x41e>
 800c26a:	9900      	ldr	r1, [sp, #0]
 800c26c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c26e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c270:	4b4e      	ldr	r3, [pc, #312]	; (800c3ac <_dtoa_r+0x644>)
 800c272:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c276:	4401      	add	r1, r0
 800c278:	9102      	str	r1, [sp, #8]
 800c27a:	9908      	ldr	r1, [sp, #32]
 800c27c:	eeb0 8a47 	vmov.f32	s16, s14
 800c280:	eef0 8a67 	vmov.f32	s17, s15
 800c284:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c288:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c28c:	2900      	cmp	r1, #0
 800c28e:	d045      	beq.n	800c31c <_dtoa_r+0x5b4>
 800c290:	494c      	ldr	r1, [pc, #304]	; (800c3c4 <_dtoa_r+0x65c>)
 800c292:	2000      	movs	r0, #0
 800c294:	f7f4 fada 	bl	800084c <__aeabi_ddiv>
 800c298:	ec53 2b18 	vmov	r2, r3, d8
 800c29c:	f7f3 fff4 	bl	8000288 <__aeabi_dsub>
 800c2a0:	9d00      	ldr	r5, [sp, #0]
 800c2a2:	ec41 0b18 	vmov	d8, r0, r1
 800c2a6:	4639      	mov	r1, r7
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f7f4 fc55 	bl	8000b58 <__aeabi_d2iz>
 800c2ae:	900c      	str	r0, [sp, #48]	; 0x30
 800c2b0:	f7f4 f938 	bl	8000524 <__aeabi_i2d>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	4639      	mov	r1, r7
 800c2bc:	f7f3 ffe4 	bl	8000288 <__aeabi_dsub>
 800c2c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2c2:	3330      	adds	r3, #48	; 0x30
 800c2c4:	f805 3b01 	strb.w	r3, [r5], #1
 800c2c8:	ec53 2b18 	vmov	r2, r3, d8
 800c2cc:	4606      	mov	r6, r0
 800c2ce:	460f      	mov	r7, r1
 800c2d0:	f7f4 fc04 	bl	8000adc <__aeabi_dcmplt>
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	d165      	bne.n	800c3a4 <_dtoa_r+0x63c>
 800c2d8:	4632      	mov	r2, r6
 800c2da:	463b      	mov	r3, r7
 800c2dc:	4935      	ldr	r1, [pc, #212]	; (800c3b4 <_dtoa_r+0x64c>)
 800c2de:	2000      	movs	r0, #0
 800c2e0:	f7f3 ffd2 	bl	8000288 <__aeabi_dsub>
 800c2e4:	ec53 2b18 	vmov	r2, r3, d8
 800c2e8:	f7f4 fbf8 	bl	8000adc <__aeabi_dcmplt>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	f040 80b9 	bne.w	800c464 <_dtoa_r+0x6fc>
 800c2f2:	9b02      	ldr	r3, [sp, #8]
 800c2f4:	429d      	cmp	r5, r3
 800c2f6:	f43f af75 	beq.w	800c1e4 <_dtoa_r+0x47c>
 800c2fa:	4b2f      	ldr	r3, [pc, #188]	; (800c3b8 <_dtoa_r+0x650>)
 800c2fc:	ec51 0b18 	vmov	r0, r1, d8
 800c300:	2200      	movs	r2, #0
 800c302:	f7f4 f979 	bl	80005f8 <__aeabi_dmul>
 800c306:	4b2c      	ldr	r3, [pc, #176]	; (800c3b8 <_dtoa_r+0x650>)
 800c308:	ec41 0b18 	vmov	d8, r0, r1
 800c30c:	2200      	movs	r2, #0
 800c30e:	4630      	mov	r0, r6
 800c310:	4639      	mov	r1, r7
 800c312:	f7f4 f971 	bl	80005f8 <__aeabi_dmul>
 800c316:	4606      	mov	r6, r0
 800c318:	460f      	mov	r7, r1
 800c31a:	e7c4      	b.n	800c2a6 <_dtoa_r+0x53e>
 800c31c:	ec51 0b17 	vmov	r0, r1, d7
 800c320:	f7f4 f96a 	bl	80005f8 <__aeabi_dmul>
 800c324:	9b02      	ldr	r3, [sp, #8]
 800c326:	9d00      	ldr	r5, [sp, #0]
 800c328:	930c      	str	r3, [sp, #48]	; 0x30
 800c32a:	ec41 0b18 	vmov	d8, r0, r1
 800c32e:	4639      	mov	r1, r7
 800c330:	4630      	mov	r0, r6
 800c332:	f7f4 fc11 	bl	8000b58 <__aeabi_d2iz>
 800c336:	9011      	str	r0, [sp, #68]	; 0x44
 800c338:	f7f4 f8f4 	bl	8000524 <__aeabi_i2d>
 800c33c:	4602      	mov	r2, r0
 800c33e:	460b      	mov	r3, r1
 800c340:	4630      	mov	r0, r6
 800c342:	4639      	mov	r1, r7
 800c344:	f7f3 ffa0 	bl	8000288 <__aeabi_dsub>
 800c348:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c34a:	3330      	adds	r3, #48	; 0x30
 800c34c:	f805 3b01 	strb.w	r3, [r5], #1
 800c350:	9b02      	ldr	r3, [sp, #8]
 800c352:	429d      	cmp	r5, r3
 800c354:	4606      	mov	r6, r0
 800c356:	460f      	mov	r7, r1
 800c358:	f04f 0200 	mov.w	r2, #0
 800c35c:	d134      	bne.n	800c3c8 <_dtoa_r+0x660>
 800c35e:	4b19      	ldr	r3, [pc, #100]	; (800c3c4 <_dtoa_r+0x65c>)
 800c360:	ec51 0b18 	vmov	r0, r1, d8
 800c364:	f7f3 ff92 	bl	800028c <__adddf3>
 800c368:	4602      	mov	r2, r0
 800c36a:	460b      	mov	r3, r1
 800c36c:	4630      	mov	r0, r6
 800c36e:	4639      	mov	r1, r7
 800c370:	f7f4 fbd2 	bl	8000b18 <__aeabi_dcmpgt>
 800c374:	2800      	cmp	r0, #0
 800c376:	d175      	bne.n	800c464 <_dtoa_r+0x6fc>
 800c378:	ec53 2b18 	vmov	r2, r3, d8
 800c37c:	4911      	ldr	r1, [pc, #68]	; (800c3c4 <_dtoa_r+0x65c>)
 800c37e:	2000      	movs	r0, #0
 800c380:	f7f3 ff82 	bl	8000288 <__aeabi_dsub>
 800c384:	4602      	mov	r2, r0
 800c386:	460b      	mov	r3, r1
 800c388:	4630      	mov	r0, r6
 800c38a:	4639      	mov	r1, r7
 800c38c:	f7f4 fba6 	bl	8000adc <__aeabi_dcmplt>
 800c390:	2800      	cmp	r0, #0
 800c392:	f43f af27 	beq.w	800c1e4 <_dtoa_r+0x47c>
 800c396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c398:	1e6b      	subs	r3, r5, #1
 800c39a:	930c      	str	r3, [sp, #48]	; 0x30
 800c39c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c3a0:	2b30      	cmp	r3, #48	; 0x30
 800c3a2:	d0f8      	beq.n	800c396 <_dtoa_r+0x62e>
 800c3a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c3a8:	e04a      	b.n	800c440 <_dtoa_r+0x6d8>
 800c3aa:	bf00      	nop
 800c3ac:	0800e990 	.word	0x0800e990
 800c3b0:	0800e968 	.word	0x0800e968
 800c3b4:	3ff00000 	.word	0x3ff00000
 800c3b8:	40240000 	.word	0x40240000
 800c3bc:	401c0000 	.word	0x401c0000
 800c3c0:	40140000 	.word	0x40140000
 800c3c4:	3fe00000 	.word	0x3fe00000
 800c3c8:	4baf      	ldr	r3, [pc, #700]	; (800c688 <_dtoa_r+0x920>)
 800c3ca:	f7f4 f915 	bl	80005f8 <__aeabi_dmul>
 800c3ce:	4606      	mov	r6, r0
 800c3d0:	460f      	mov	r7, r1
 800c3d2:	e7ac      	b.n	800c32e <_dtoa_r+0x5c6>
 800c3d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c3d8:	9d00      	ldr	r5, [sp, #0]
 800c3da:	4642      	mov	r2, r8
 800c3dc:	464b      	mov	r3, r9
 800c3de:	4630      	mov	r0, r6
 800c3e0:	4639      	mov	r1, r7
 800c3e2:	f7f4 fa33 	bl	800084c <__aeabi_ddiv>
 800c3e6:	f7f4 fbb7 	bl	8000b58 <__aeabi_d2iz>
 800c3ea:	9002      	str	r0, [sp, #8]
 800c3ec:	f7f4 f89a 	bl	8000524 <__aeabi_i2d>
 800c3f0:	4642      	mov	r2, r8
 800c3f2:	464b      	mov	r3, r9
 800c3f4:	f7f4 f900 	bl	80005f8 <__aeabi_dmul>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	4639      	mov	r1, r7
 800c400:	f7f3 ff42 	bl	8000288 <__aeabi_dsub>
 800c404:	9e02      	ldr	r6, [sp, #8]
 800c406:	9f01      	ldr	r7, [sp, #4]
 800c408:	3630      	adds	r6, #48	; 0x30
 800c40a:	f805 6b01 	strb.w	r6, [r5], #1
 800c40e:	9e00      	ldr	r6, [sp, #0]
 800c410:	1bae      	subs	r6, r5, r6
 800c412:	42b7      	cmp	r7, r6
 800c414:	4602      	mov	r2, r0
 800c416:	460b      	mov	r3, r1
 800c418:	d137      	bne.n	800c48a <_dtoa_r+0x722>
 800c41a:	f7f3 ff37 	bl	800028c <__adddf3>
 800c41e:	4642      	mov	r2, r8
 800c420:	464b      	mov	r3, r9
 800c422:	4606      	mov	r6, r0
 800c424:	460f      	mov	r7, r1
 800c426:	f7f4 fb77 	bl	8000b18 <__aeabi_dcmpgt>
 800c42a:	b9c8      	cbnz	r0, 800c460 <_dtoa_r+0x6f8>
 800c42c:	4642      	mov	r2, r8
 800c42e:	464b      	mov	r3, r9
 800c430:	4630      	mov	r0, r6
 800c432:	4639      	mov	r1, r7
 800c434:	f7f4 fb48 	bl	8000ac8 <__aeabi_dcmpeq>
 800c438:	b110      	cbz	r0, 800c440 <_dtoa_r+0x6d8>
 800c43a:	9b02      	ldr	r3, [sp, #8]
 800c43c:	07d9      	lsls	r1, r3, #31
 800c43e:	d40f      	bmi.n	800c460 <_dtoa_r+0x6f8>
 800c440:	4620      	mov	r0, r4
 800c442:	4659      	mov	r1, fp
 800c444:	f001 f868 	bl	800d518 <_Bfree>
 800c448:	2300      	movs	r3, #0
 800c44a:	702b      	strb	r3, [r5, #0]
 800c44c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c44e:	f10a 0001 	add.w	r0, sl, #1
 800c452:	6018      	str	r0, [r3, #0]
 800c454:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c456:	2b00      	cmp	r3, #0
 800c458:	f43f acd8 	beq.w	800be0c <_dtoa_r+0xa4>
 800c45c:	601d      	str	r5, [r3, #0]
 800c45e:	e4d5      	b.n	800be0c <_dtoa_r+0xa4>
 800c460:	f8cd a01c 	str.w	sl, [sp, #28]
 800c464:	462b      	mov	r3, r5
 800c466:	461d      	mov	r5, r3
 800c468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c46c:	2a39      	cmp	r2, #57	; 0x39
 800c46e:	d108      	bne.n	800c482 <_dtoa_r+0x71a>
 800c470:	9a00      	ldr	r2, [sp, #0]
 800c472:	429a      	cmp	r2, r3
 800c474:	d1f7      	bne.n	800c466 <_dtoa_r+0x6fe>
 800c476:	9a07      	ldr	r2, [sp, #28]
 800c478:	9900      	ldr	r1, [sp, #0]
 800c47a:	3201      	adds	r2, #1
 800c47c:	9207      	str	r2, [sp, #28]
 800c47e:	2230      	movs	r2, #48	; 0x30
 800c480:	700a      	strb	r2, [r1, #0]
 800c482:	781a      	ldrb	r2, [r3, #0]
 800c484:	3201      	adds	r2, #1
 800c486:	701a      	strb	r2, [r3, #0]
 800c488:	e78c      	b.n	800c3a4 <_dtoa_r+0x63c>
 800c48a:	4b7f      	ldr	r3, [pc, #508]	; (800c688 <_dtoa_r+0x920>)
 800c48c:	2200      	movs	r2, #0
 800c48e:	f7f4 f8b3 	bl	80005f8 <__aeabi_dmul>
 800c492:	2200      	movs	r2, #0
 800c494:	2300      	movs	r3, #0
 800c496:	4606      	mov	r6, r0
 800c498:	460f      	mov	r7, r1
 800c49a:	f7f4 fb15 	bl	8000ac8 <__aeabi_dcmpeq>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d09b      	beq.n	800c3da <_dtoa_r+0x672>
 800c4a2:	e7cd      	b.n	800c440 <_dtoa_r+0x6d8>
 800c4a4:	9a08      	ldr	r2, [sp, #32]
 800c4a6:	2a00      	cmp	r2, #0
 800c4a8:	f000 80c4 	beq.w	800c634 <_dtoa_r+0x8cc>
 800c4ac:	9a05      	ldr	r2, [sp, #20]
 800c4ae:	2a01      	cmp	r2, #1
 800c4b0:	f300 80a8 	bgt.w	800c604 <_dtoa_r+0x89c>
 800c4b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c4b6:	2a00      	cmp	r2, #0
 800c4b8:	f000 80a0 	beq.w	800c5fc <_dtoa_r+0x894>
 800c4bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c4c0:	9e06      	ldr	r6, [sp, #24]
 800c4c2:	4645      	mov	r5, r8
 800c4c4:	9a04      	ldr	r2, [sp, #16]
 800c4c6:	2101      	movs	r1, #1
 800c4c8:	441a      	add	r2, r3
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	4498      	add	r8, r3
 800c4ce:	9204      	str	r2, [sp, #16]
 800c4d0:	f001 f928 	bl	800d724 <__i2b>
 800c4d4:	4607      	mov	r7, r0
 800c4d6:	2d00      	cmp	r5, #0
 800c4d8:	dd0b      	ble.n	800c4f2 <_dtoa_r+0x78a>
 800c4da:	9b04      	ldr	r3, [sp, #16]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	dd08      	ble.n	800c4f2 <_dtoa_r+0x78a>
 800c4e0:	42ab      	cmp	r3, r5
 800c4e2:	9a04      	ldr	r2, [sp, #16]
 800c4e4:	bfa8      	it	ge
 800c4e6:	462b      	movge	r3, r5
 800c4e8:	eba8 0803 	sub.w	r8, r8, r3
 800c4ec:	1aed      	subs	r5, r5, r3
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	9304      	str	r3, [sp, #16]
 800c4f2:	9b06      	ldr	r3, [sp, #24]
 800c4f4:	b1fb      	cbz	r3, 800c536 <_dtoa_r+0x7ce>
 800c4f6:	9b08      	ldr	r3, [sp, #32]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f000 809f 	beq.w	800c63c <_dtoa_r+0x8d4>
 800c4fe:	2e00      	cmp	r6, #0
 800c500:	dd11      	ble.n	800c526 <_dtoa_r+0x7be>
 800c502:	4639      	mov	r1, r7
 800c504:	4632      	mov	r2, r6
 800c506:	4620      	mov	r0, r4
 800c508:	f001 f9c8 	bl	800d89c <__pow5mult>
 800c50c:	465a      	mov	r2, fp
 800c50e:	4601      	mov	r1, r0
 800c510:	4607      	mov	r7, r0
 800c512:	4620      	mov	r0, r4
 800c514:	f001 f91c 	bl	800d750 <__multiply>
 800c518:	4659      	mov	r1, fp
 800c51a:	9007      	str	r0, [sp, #28]
 800c51c:	4620      	mov	r0, r4
 800c51e:	f000 fffb 	bl	800d518 <_Bfree>
 800c522:	9b07      	ldr	r3, [sp, #28]
 800c524:	469b      	mov	fp, r3
 800c526:	9b06      	ldr	r3, [sp, #24]
 800c528:	1b9a      	subs	r2, r3, r6
 800c52a:	d004      	beq.n	800c536 <_dtoa_r+0x7ce>
 800c52c:	4659      	mov	r1, fp
 800c52e:	4620      	mov	r0, r4
 800c530:	f001 f9b4 	bl	800d89c <__pow5mult>
 800c534:	4683      	mov	fp, r0
 800c536:	2101      	movs	r1, #1
 800c538:	4620      	mov	r0, r4
 800c53a:	f001 f8f3 	bl	800d724 <__i2b>
 800c53e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c540:	2b00      	cmp	r3, #0
 800c542:	4606      	mov	r6, r0
 800c544:	dd7c      	ble.n	800c640 <_dtoa_r+0x8d8>
 800c546:	461a      	mov	r2, r3
 800c548:	4601      	mov	r1, r0
 800c54a:	4620      	mov	r0, r4
 800c54c:	f001 f9a6 	bl	800d89c <__pow5mult>
 800c550:	9b05      	ldr	r3, [sp, #20]
 800c552:	2b01      	cmp	r3, #1
 800c554:	4606      	mov	r6, r0
 800c556:	dd76      	ble.n	800c646 <_dtoa_r+0x8de>
 800c558:	2300      	movs	r3, #0
 800c55a:	9306      	str	r3, [sp, #24]
 800c55c:	6933      	ldr	r3, [r6, #16]
 800c55e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c562:	6918      	ldr	r0, [r3, #16]
 800c564:	f001 f88e 	bl	800d684 <__hi0bits>
 800c568:	f1c0 0020 	rsb	r0, r0, #32
 800c56c:	9b04      	ldr	r3, [sp, #16]
 800c56e:	4418      	add	r0, r3
 800c570:	f010 001f 	ands.w	r0, r0, #31
 800c574:	f000 8086 	beq.w	800c684 <_dtoa_r+0x91c>
 800c578:	f1c0 0320 	rsb	r3, r0, #32
 800c57c:	2b04      	cmp	r3, #4
 800c57e:	dd7f      	ble.n	800c680 <_dtoa_r+0x918>
 800c580:	f1c0 001c 	rsb	r0, r0, #28
 800c584:	9b04      	ldr	r3, [sp, #16]
 800c586:	4403      	add	r3, r0
 800c588:	4480      	add	r8, r0
 800c58a:	4405      	add	r5, r0
 800c58c:	9304      	str	r3, [sp, #16]
 800c58e:	f1b8 0f00 	cmp.w	r8, #0
 800c592:	dd05      	ble.n	800c5a0 <_dtoa_r+0x838>
 800c594:	4659      	mov	r1, fp
 800c596:	4642      	mov	r2, r8
 800c598:	4620      	mov	r0, r4
 800c59a:	f001 f9d9 	bl	800d950 <__lshift>
 800c59e:	4683      	mov	fp, r0
 800c5a0:	9b04      	ldr	r3, [sp, #16]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	dd05      	ble.n	800c5b2 <_dtoa_r+0x84a>
 800c5a6:	4631      	mov	r1, r6
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f001 f9d0 	bl	800d950 <__lshift>
 800c5b0:	4606      	mov	r6, r0
 800c5b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d069      	beq.n	800c68c <_dtoa_r+0x924>
 800c5b8:	4631      	mov	r1, r6
 800c5ba:	4658      	mov	r0, fp
 800c5bc:	f001 fa34 	bl	800da28 <__mcmp>
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	da63      	bge.n	800c68c <_dtoa_r+0x924>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	4659      	mov	r1, fp
 800c5c8:	220a      	movs	r2, #10
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f000 ffc6 	bl	800d55c <__multadd>
 800c5d0:	9b08      	ldr	r3, [sp, #32]
 800c5d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c5d6:	4683      	mov	fp, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 818f 	beq.w	800c8fc <_dtoa_r+0xb94>
 800c5de:	4639      	mov	r1, r7
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	220a      	movs	r2, #10
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	f000 ffb9 	bl	800d55c <__multadd>
 800c5ea:	f1b9 0f00 	cmp.w	r9, #0
 800c5ee:	4607      	mov	r7, r0
 800c5f0:	f300 808e 	bgt.w	800c710 <_dtoa_r+0x9a8>
 800c5f4:	9b05      	ldr	r3, [sp, #20]
 800c5f6:	2b02      	cmp	r3, #2
 800c5f8:	dc50      	bgt.n	800c69c <_dtoa_r+0x934>
 800c5fa:	e089      	b.n	800c710 <_dtoa_r+0x9a8>
 800c5fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c5fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c602:	e75d      	b.n	800c4c0 <_dtoa_r+0x758>
 800c604:	9b01      	ldr	r3, [sp, #4]
 800c606:	1e5e      	subs	r6, r3, #1
 800c608:	9b06      	ldr	r3, [sp, #24]
 800c60a:	42b3      	cmp	r3, r6
 800c60c:	bfbf      	itttt	lt
 800c60e:	9b06      	ldrlt	r3, [sp, #24]
 800c610:	9606      	strlt	r6, [sp, #24]
 800c612:	1af2      	sublt	r2, r6, r3
 800c614:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c616:	bfb6      	itet	lt
 800c618:	189b      	addlt	r3, r3, r2
 800c61a:	1b9e      	subge	r6, r3, r6
 800c61c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c61e:	9b01      	ldr	r3, [sp, #4]
 800c620:	bfb8      	it	lt
 800c622:	2600      	movlt	r6, #0
 800c624:	2b00      	cmp	r3, #0
 800c626:	bfb5      	itete	lt
 800c628:	eba8 0503 	sublt.w	r5, r8, r3
 800c62c:	9b01      	ldrge	r3, [sp, #4]
 800c62e:	2300      	movlt	r3, #0
 800c630:	4645      	movge	r5, r8
 800c632:	e747      	b.n	800c4c4 <_dtoa_r+0x75c>
 800c634:	9e06      	ldr	r6, [sp, #24]
 800c636:	9f08      	ldr	r7, [sp, #32]
 800c638:	4645      	mov	r5, r8
 800c63a:	e74c      	b.n	800c4d6 <_dtoa_r+0x76e>
 800c63c:	9a06      	ldr	r2, [sp, #24]
 800c63e:	e775      	b.n	800c52c <_dtoa_r+0x7c4>
 800c640:	9b05      	ldr	r3, [sp, #20]
 800c642:	2b01      	cmp	r3, #1
 800c644:	dc18      	bgt.n	800c678 <_dtoa_r+0x910>
 800c646:	9b02      	ldr	r3, [sp, #8]
 800c648:	b9b3      	cbnz	r3, 800c678 <_dtoa_r+0x910>
 800c64a:	9b03      	ldr	r3, [sp, #12]
 800c64c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c650:	b9a3      	cbnz	r3, 800c67c <_dtoa_r+0x914>
 800c652:	9b03      	ldr	r3, [sp, #12]
 800c654:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c658:	0d1b      	lsrs	r3, r3, #20
 800c65a:	051b      	lsls	r3, r3, #20
 800c65c:	b12b      	cbz	r3, 800c66a <_dtoa_r+0x902>
 800c65e:	9b04      	ldr	r3, [sp, #16]
 800c660:	3301      	adds	r3, #1
 800c662:	9304      	str	r3, [sp, #16]
 800c664:	f108 0801 	add.w	r8, r8, #1
 800c668:	2301      	movs	r3, #1
 800c66a:	9306      	str	r3, [sp, #24]
 800c66c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f47f af74 	bne.w	800c55c <_dtoa_r+0x7f4>
 800c674:	2001      	movs	r0, #1
 800c676:	e779      	b.n	800c56c <_dtoa_r+0x804>
 800c678:	2300      	movs	r3, #0
 800c67a:	e7f6      	b.n	800c66a <_dtoa_r+0x902>
 800c67c:	9b02      	ldr	r3, [sp, #8]
 800c67e:	e7f4      	b.n	800c66a <_dtoa_r+0x902>
 800c680:	d085      	beq.n	800c58e <_dtoa_r+0x826>
 800c682:	4618      	mov	r0, r3
 800c684:	301c      	adds	r0, #28
 800c686:	e77d      	b.n	800c584 <_dtoa_r+0x81c>
 800c688:	40240000 	.word	0x40240000
 800c68c:	9b01      	ldr	r3, [sp, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	dc38      	bgt.n	800c704 <_dtoa_r+0x99c>
 800c692:	9b05      	ldr	r3, [sp, #20]
 800c694:	2b02      	cmp	r3, #2
 800c696:	dd35      	ble.n	800c704 <_dtoa_r+0x99c>
 800c698:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c69c:	f1b9 0f00 	cmp.w	r9, #0
 800c6a0:	d10d      	bne.n	800c6be <_dtoa_r+0x956>
 800c6a2:	4631      	mov	r1, r6
 800c6a4:	464b      	mov	r3, r9
 800c6a6:	2205      	movs	r2, #5
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f000 ff57 	bl	800d55c <__multadd>
 800c6ae:	4601      	mov	r1, r0
 800c6b0:	4606      	mov	r6, r0
 800c6b2:	4658      	mov	r0, fp
 800c6b4:	f001 f9b8 	bl	800da28 <__mcmp>
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	f73f adbd 	bgt.w	800c238 <_dtoa_r+0x4d0>
 800c6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6c0:	9d00      	ldr	r5, [sp, #0]
 800c6c2:	ea6f 0a03 	mvn.w	sl, r3
 800c6c6:	f04f 0800 	mov.w	r8, #0
 800c6ca:	4631      	mov	r1, r6
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	f000 ff23 	bl	800d518 <_Bfree>
 800c6d2:	2f00      	cmp	r7, #0
 800c6d4:	f43f aeb4 	beq.w	800c440 <_dtoa_r+0x6d8>
 800c6d8:	f1b8 0f00 	cmp.w	r8, #0
 800c6dc:	d005      	beq.n	800c6ea <_dtoa_r+0x982>
 800c6de:	45b8      	cmp	r8, r7
 800c6e0:	d003      	beq.n	800c6ea <_dtoa_r+0x982>
 800c6e2:	4641      	mov	r1, r8
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	f000 ff17 	bl	800d518 <_Bfree>
 800c6ea:	4639      	mov	r1, r7
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f000 ff13 	bl	800d518 <_Bfree>
 800c6f2:	e6a5      	b.n	800c440 <_dtoa_r+0x6d8>
 800c6f4:	2600      	movs	r6, #0
 800c6f6:	4637      	mov	r7, r6
 800c6f8:	e7e1      	b.n	800c6be <_dtoa_r+0x956>
 800c6fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c6fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c700:	4637      	mov	r7, r6
 800c702:	e599      	b.n	800c238 <_dtoa_r+0x4d0>
 800c704:	9b08      	ldr	r3, [sp, #32]
 800c706:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f000 80fd 	beq.w	800c90a <_dtoa_r+0xba2>
 800c710:	2d00      	cmp	r5, #0
 800c712:	dd05      	ble.n	800c720 <_dtoa_r+0x9b8>
 800c714:	4639      	mov	r1, r7
 800c716:	462a      	mov	r2, r5
 800c718:	4620      	mov	r0, r4
 800c71a:	f001 f919 	bl	800d950 <__lshift>
 800c71e:	4607      	mov	r7, r0
 800c720:	9b06      	ldr	r3, [sp, #24]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d05c      	beq.n	800c7e0 <_dtoa_r+0xa78>
 800c726:	6879      	ldr	r1, [r7, #4]
 800c728:	4620      	mov	r0, r4
 800c72a:	f000 feb5 	bl	800d498 <_Balloc>
 800c72e:	4605      	mov	r5, r0
 800c730:	b928      	cbnz	r0, 800c73e <_dtoa_r+0x9d6>
 800c732:	4b80      	ldr	r3, [pc, #512]	; (800c934 <_dtoa_r+0xbcc>)
 800c734:	4602      	mov	r2, r0
 800c736:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c73a:	f7ff bb2e 	b.w	800bd9a <_dtoa_r+0x32>
 800c73e:	693a      	ldr	r2, [r7, #16]
 800c740:	3202      	adds	r2, #2
 800c742:	0092      	lsls	r2, r2, #2
 800c744:	f107 010c 	add.w	r1, r7, #12
 800c748:	300c      	adds	r0, #12
 800c74a:	f7fd fe7d 	bl	800a448 <memcpy>
 800c74e:	2201      	movs	r2, #1
 800c750:	4629      	mov	r1, r5
 800c752:	4620      	mov	r0, r4
 800c754:	f001 f8fc 	bl	800d950 <__lshift>
 800c758:	9b00      	ldr	r3, [sp, #0]
 800c75a:	3301      	adds	r3, #1
 800c75c:	9301      	str	r3, [sp, #4]
 800c75e:	9b00      	ldr	r3, [sp, #0]
 800c760:	444b      	add	r3, r9
 800c762:	9307      	str	r3, [sp, #28]
 800c764:	9b02      	ldr	r3, [sp, #8]
 800c766:	f003 0301 	and.w	r3, r3, #1
 800c76a:	46b8      	mov	r8, r7
 800c76c:	9306      	str	r3, [sp, #24]
 800c76e:	4607      	mov	r7, r0
 800c770:	9b01      	ldr	r3, [sp, #4]
 800c772:	4631      	mov	r1, r6
 800c774:	3b01      	subs	r3, #1
 800c776:	4658      	mov	r0, fp
 800c778:	9302      	str	r3, [sp, #8]
 800c77a:	f7ff fa67 	bl	800bc4c <quorem>
 800c77e:	4603      	mov	r3, r0
 800c780:	3330      	adds	r3, #48	; 0x30
 800c782:	9004      	str	r0, [sp, #16]
 800c784:	4641      	mov	r1, r8
 800c786:	4658      	mov	r0, fp
 800c788:	9308      	str	r3, [sp, #32]
 800c78a:	f001 f94d 	bl	800da28 <__mcmp>
 800c78e:	463a      	mov	r2, r7
 800c790:	4681      	mov	r9, r0
 800c792:	4631      	mov	r1, r6
 800c794:	4620      	mov	r0, r4
 800c796:	f001 f963 	bl	800da60 <__mdiff>
 800c79a:	68c2      	ldr	r2, [r0, #12]
 800c79c:	9b08      	ldr	r3, [sp, #32]
 800c79e:	4605      	mov	r5, r0
 800c7a0:	bb02      	cbnz	r2, 800c7e4 <_dtoa_r+0xa7c>
 800c7a2:	4601      	mov	r1, r0
 800c7a4:	4658      	mov	r0, fp
 800c7a6:	f001 f93f 	bl	800da28 <__mcmp>
 800c7aa:	9b08      	ldr	r3, [sp, #32]
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	4629      	mov	r1, r5
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c7b6:	f000 feaf 	bl	800d518 <_Bfree>
 800c7ba:	9b05      	ldr	r3, [sp, #20]
 800c7bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7be:	9d01      	ldr	r5, [sp, #4]
 800c7c0:	ea43 0102 	orr.w	r1, r3, r2
 800c7c4:	9b06      	ldr	r3, [sp, #24]
 800c7c6:	430b      	orrs	r3, r1
 800c7c8:	9b08      	ldr	r3, [sp, #32]
 800c7ca:	d10d      	bne.n	800c7e8 <_dtoa_r+0xa80>
 800c7cc:	2b39      	cmp	r3, #57	; 0x39
 800c7ce:	d029      	beq.n	800c824 <_dtoa_r+0xabc>
 800c7d0:	f1b9 0f00 	cmp.w	r9, #0
 800c7d4:	dd01      	ble.n	800c7da <_dtoa_r+0xa72>
 800c7d6:	9b04      	ldr	r3, [sp, #16]
 800c7d8:	3331      	adds	r3, #49	; 0x31
 800c7da:	9a02      	ldr	r2, [sp, #8]
 800c7dc:	7013      	strb	r3, [r2, #0]
 800c7de:	e774      	b.n	800c6ca <_dtoa_r+0x962>
 800c7e0:	4638      	mov	r0, r7
 800c7e2:	e7b9      	b.n	800c758 <_dtoa_r+0x9f0>
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	e7e2      	b.n	800c7ae <_dtoa_r+0xa46>
 800c7e8:	f1b9 0f00 	cmp.w	r9, #0
 800c7ec:	db06      	blt.n	800c7fc <_dtoa_r+0xa94>
 800c7ee:	9905      	ldr	r1, [sp, #20]
 800c7f0:	ea41 0909 	orr.w	r9, r1, r9
 800c7f4:	9906      	ldr	r1, [sp, #24]
 800c7f6:	ea59 0101 	orrs.w	r1, r9, r1
 800c7fa:	d120      	bne.n	800c83e <_dtoa_r+0xad6>
 800c7fc:	2a00      	cmp	r2, #0
 800c7fe:	ddec      	ble.n	800c7da <_dtoa_r+0xa72>
 800c800:	4659      	mov	r1, fp
 800c802:	2201      	movs	r2, #1
 800c804:	4620      	mov	r0, r4
 800c806:	9301      	str	r3, [sp, #4]
 800c808:	f001 f8a2 	bl	800d950 <__lshift>
 800c80c:	4631      	mov	r1, r6
 800c80e:	4683      	mov	fp, r0
 800c810:	f001 f90a 	bl	800da28 <__mcmp>
 800c814:	2800      	cmp	r0, #0
 800c816:	9b01      	ldr	r3, [sp, #4]
 800c818:	dc02      	bgt.n	800c820 <_dtoa_r+0xab8>
 800c81a:	d1de      	bne.n	800c7da <_dtoa_r+0xa72>
 800c81c:	07da      	lsls	r2, r3, #31
 800c81e:	d5dc      	bpl.n	800c7da <_dtoa_r+0xa72>
 800c820:	2b39      	cmp	r3, #57	; 0x39
 800c822:	d1d8      	bne.n	800c7d6 <_dtoa_r+0xa6e>
 800c824:	9a02      	ldr	r2, [sp, #8]
 800c826:	2339      	movs	r3, #57	; 0x39
 800c828:	7013      	strb	r3, [r2, #0]
 800c82a:	462b      	mov	r3, r5
 800c82c:	461d      	mov	r5, r3
 800c82e:	3b01      	subs	r3, #1
 800c830:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c834:	2a39      	cmp	r2, #57	; 0x39
 800c836:	d050      	beq.n	800c8da <_dtoa_r+0xb72>
 800c838:	3201      	adds	r2, #1
 800c83a:	701a      	strb	r2, [r3, #0]
 800c83c:	e745      	b.n	800c6ca <_dtoa_r+0x962>
 800c83e:	2a00      	cmp	r2, #0
 800c840:	dd03      	ble.n	800c84a <_dtoa_r+0xae2>
 800c842:	2b39      	cmp	r3, #57	; 0x39
 800c844:	d0ee      	beq.n	800c824 <_dtoa_r+0xabc>
 800c846:	3301      	adds	r3, #1
 800c848:	e7c7      	b.n	800c7da <_dtoa_r+0xa72>
 800c84a:	9a01      	ldr	r2, [sp, #4]
 800c84c:	9907      	ldr	r1, [sp, #28]
 800c84e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c852:	428a      	cmp	r2, r1
 800c854:	d02a      	beq.n	800c8ac <_dtoa_r+0xb44>
 800c856:	4659      	mov	r1, fp
 800c858:	2300      	movs	r3, #0
 800c85a:	220a      	movs	r2, #10
 800c85c:	4620      	mov	r0, r4
 800c85e:	f000 fe7d 	bl	800d55c <__multadd>
 800c862:	45b8      	cmp	r8, r7
 800c864:	4683      	mov	fp, r0
 800c866:	f04f 0300 	mov.w	r3, #0
 800c86a:	f04f 020a 	mov.w	r2, #10
 800c86e:	4641      	mov	r1, r8
 800c870:	4620      	mov	r0, r4
 800c872:	d107      	bne.n	800c884 <_dtoa_r+0xb1c>
 800c874:	f000 fe72 	bl	800d55c <__multadd>
 800c878:	4680      	mov	r8, r0
 800c87a:	4607      	mov	r7, r0
 800c87c:	9b01      	ldr	r3, [sp, #4]
 800c87e:	3301      	adds	r3, #1
 800c880:	9301      	str	r3, [sp, #4]
 800c882:	e775      	b.n	800c770 <_dtoa_r+0xa08>
 800c884:	f000 fe6a 	bl	800d55c <__multadd>
 800c888:	4639      	mov	r1, r7
 800c88a:	4680      	mov	r8, r0
 800c88c:	2300      	movs	r3, #0
 800c88e:	220a      	movs	r2, #10
 800c890:	4620      	mov	r0, r4
 800c892:	f000 fe63 	bl	800d55c <__multadd>
 800c896:	4607      	mov	r7, r0
 800c898:	e7f0      	b.n	800c87c <_dtoa_r+0xb14>
 800c89a:	f1b9 0f00 	cmp.w	r9, #0
 800c89e:	9a00      	ldr	r2, [sp, #0]
 800c8a0:	bfcc      	ite	gt
 800c8a2:	464d      	movgt	r5, r9
 800c8a4:	2501      	movle	r5, #1
 800c8a6:	4415      	add	r5, r2
 800c8a8:	f04f 0800 	mov.w	r8, #0
 800c8ac:	4659      	mov	r1, fp
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	9301      	str	r3, [sp, #4]
 800c8b4:	f001 f84c 	bl	800d950 <__lshift>
 800c8b8:	4631      	mov	r1, r6
 800c8ba:	4683      	mov	fp, r0
 800c8bc:	f001 f8b4 	bl	800da28 <__mcmp>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	dcb2      	bgt.n	800c82a <_dtoa_r+0xac2>
 800c8c4:	d102      	bne.n	800c8cc <_dtoa_r+0xb64>
 800c8c6:	9b01      	ldr	r3, [sp, #4]
 800c8c8:	07db      	lsls	r3, r3, #31
 800c8ca:	d4ae      	bmi.n	800c82a <_dtoa_r+0xac2>
 800c8cc:	462b      	mov	r3, r5
 800c8ce:	461d      	mov	r5, r3
 800c8d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8d4:	2a30      	cmp	r2, #48	; 0x30
 800c8d6:	d0fa      	beq.n	800c8ce <_dtoa_r+0xb66>
 800c8d8:	e6f7      	b.n	800c6ca <_dtoa_r+0x962>
 800c8da:	9a00      	ldr	r2, [sp, #0]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d1a5      	bne.n	800c82c <_dtoa_r+0xac4>
 800c8e0:	f10a 0a01 	add.w	sl, sl, #1
 800c8e4:	2331      	movs	r3, #49	; 0x31
 800c8e6:	e779      	b.n	800c7dc <_dtoa_r+0xa74>
 800c8e8:	4b13      	ldr	r3, [pc, #76]	; (800c938 <_dtoa_r+0xbd0>)
 800c8ea:	f7ff baaf 	b.w	800be4c <_dtoa_r+0xe4>
 800c8ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f47f aa86 	bne.w	800be02 <_dtoa_r+0x9a>
 800c8f6:	4b11      	ldr	r3, [pc, #68]	; (800c93c <_dtoa_r+0xbd4>)
 800c8f8:	f7ff baa8 	b.w	800be4c <_dtoa_r+0xe4>
 800c8fc:	f1b9 0f00 	cmp.w	r9, #0
 800c900:	dc03      	bgt.n	800c90a <_dtoa_r+0xba2>
 800c902:	9b05      	ldr	r3, [sp, #20]
 800c904:	2b02      	cmp	r3, #2
 800c906:	f73f aec9 	bgt.w	800c69c <_dtoa_r+0x934>
 800c90a:	9d00      	ldr	r5, [sp, #0]
 800c90c:	4631      	mov	r1, r6
 800c90e:	4658      	mov	r0, fp
 800c910:	f7ff f99c 	bl	800bc4c <quorem>
 800c914:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c918:	f805 3b01 	strb.w	r3, [r5], #1
 800c91c:	9a00      	ldr	r2, [sp, #0]
 800c91e:	1aaa      	subs	r2, r5, r2
 800c920:	4591      	cmp	r9, r2
 800c922:	ddba      	ble.n	800c89a <_dtoa_r+0xb32>
 800c924:	4659      	mov	r1, fp
 800c926:	2300      	movs	r3, #0
 800c928:	220a      	movs	r2, #10
 800c92a:	4620      	mov	r0, r4
 800c92c:	f000 fe16 	bl	800d55c <__multadd>
 800c930:	4683      	mov	fp, r0
 800c932:	e7eb      	b.n	800c90c <_dtoa_r+0xba4>
 800c934:	0800e813 	.word	0x0800e813
 800c938:	0800e71c 	.word	0x0800e71c
 800c93c:	0800e790 	.word	0x0800e790

0800c940 <__sflush_r>:
 800c940:	898a      	ldrh	r2, [r1, #12]
 800c942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c946:	4605      	mov	r5, r0
 800c948:	0710      	lsls	r0, r2, #28
 800c94a:	460c      	mov	r4, r1
 800c94c:	d458      	bmi.n	800ca00 <__sflush_r+0xc0>
 800c94e:	684b      	ldr	r3, [r1, #4]
 800c950:	2b00      	cmp	r3, #0
 800c952:	dc05      	bgt.n	800c960 <__sflush_r+0x20>
 800c954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c956:	2b00      	cmp	r3, #0
 800c958:	dc02      	bgt.n	800c960 <__sflush_r+0x20>
 800c95a:	2000      	movs	r0, #0
 800c95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c962:	2e00      	cmp	r6, #0
 800c964:	d0f9      	beq.n	800c95a <__sflush_r+0x1a>
 800c966:	2300      	movs	r3, #0
 800c968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c96c:	682f      	ldr	r7, [r5, #0]
 800c96e:	602b      	str	r3, [r5, #0]
 800c970:	d032      	beq.n	800c9d8 <__sflush_r+0x98>
 800c972:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c974:	89a3      	ldrh	r3, [r4, #12]
 800c976:	075a      	lsls	r2, r3, #29
 800c978:	d505      	bpl.n	800c986 <__sflush_r+0x46>
 800c97a:	6863      	ldr	r3, [r4, #4]
 800c97c:	1ac0      	subs	r0, r0, r3
 800c97e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c980:	b10b      	cbz	r3, 800c986 <__sflush_r+0x46>
 800c982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c984:	1ac0      	subs	r0, r0, r3
 800c986:	2300      	movs	r3, #0
 800c988:	4602      	mov	r2, r0
 800c98a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c98c:	6a21      	ldr	r1, [r4, #32]
 800c98e:	4628      	mov	r0, r5
 800c990:	47b0      	blx	r6
 800c992:	1c43      	adds	r3, r0, #1
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	d106      	bne.n	800c9a6 <__sflush_r+0x66>
 800c998:	6829      	ldr	r1, [r5, #0]
 800c99a:	291d      	cmp	r1, #29
 800c99c:	d82c      	bhi.n	800c9f8 <__sflush_r+0xb8>
 800c99e:	4a2a      	ldr	r2, [pc, #168]	; (800ca48 <__sflush_r+0x108>)
 800c9a0:	40ca      	lsrs	r2, r1
 800c9a2:	07d6      	lsls	r6, r2, #31
 800c9a4:	d528      	bpl.n	800c9f8 <__sflush_r+0xb8>
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	6062      	str	r2, [r4, #4]
 800c9aa:	04d9      	lsls	r1, r3, #19
 800c9ac:	6922      	ldr	r2, [r4, #16]
 800c9ae:	6022      	str	r2, [r4, #0]
 800c9b0:	d504      	bpl.n	800c9bc <__sflush_r+0x7c>
 800c9b2:	1c42      	adds	r2, r0, #1
 800c9b4:	d101      	bne.n	800c9ba <__sflush_r+0x7a>
 800c9b6:	682b      	ldr	r3, [r5, #0]
 800c9b8:	b903      	cbnz	r3, 800c9bc <__sflush_r+0x7c>
 800c9ba:	6560      	str	r0, [r4, #84]	; 0x54
 800c9bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9be:	602f      	str	r7, [r5, #0]
 800c9c0:	2900      	cmp	r1, #0
 800c9c2:	d0ca      	beq.n	800c95a <__sflush_r+0x1a>
 800c9c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9c8:	4299      	cmp	r1, r3
 800c9ca:	d002      	beq.n	800c9d2 <__sflush_r+0x92>
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	f001 fa2d 	bl	800de2c <_free_r>
 800c9d2:	2000      	movs	r0, #0
 800c9d4:	6360      	str	r0, [r4, #52]	; 0x34
 800c9d6:	e7c1      	b.n	800c95c <__sflush_r+0x1c>
 800c9d8:	6a21      	ldr	r1, [r4, #32]
 800c9da:	2301      	movs	r3, #1
 800c9dc:	4628      	mov	r0, r5
 800c9de:	47b0      	blx	r6
 800c9e0:	1c41      	adds	r1, r0, #1
 800c9e2:	d1c7      	bne.n	800c974 <__sflush_r+0x34>
 800c9e4:	682b      	ldr	r3, [r5, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d0c4      	beq.n	800c974 <__sflush_r+0x34>
 800c9ea:	2b1d      	cmp	r3, #29
 800c9ec:	d001      	beq.n	800c9f2 <__sflush_r+0xb2>
 800c9ee:	2b16      	cmp	r3, #22
 800c9f0:	d101      	bne.n	800c9f6 <__sflush_r+0xb6>
 800c9f2:	602f      	str	r7, [r5, #0]
 800c9f4:	e7b1      	b.n	800c95a <__sflush_r+0x1a>
 800c9f6:	89a3      	ldrh	r3, [r4, #12]
 800c9f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9fc:	81a3      	strh	r3, [r4, #12]
 800c9fe:	e7ad      	b.n	800c95c <__sflush_r+0x1c>
 800ca00:	690f      	ldr	r7, [r1, #16]
 800ca02:	2f00      	cmp	r7, #0
 800ca04:	d0a9      	beq.n	800c95a <__sflush_r+0x1a>
 800ca06:	0793      	lsls	r3, r2, #30
 800ca08:	680e      	ldr	r6, [r1, #0]
 800ca0a:	bf08      	it	eq
 800ca0c:	694b      	ldreq	r3, [r1, #20]
 800ca0e:	600f      	str	r7, [r1, #0]
 800ca10:	bf18      	it	ne
 800ca12:	2300      	movne	r3, #0
 800ca14:	eba6 0807 	sub.w	r8, r6, r7
 800ca18:	608b      	str	r3, [r1, #8]
 800ca1a:	f1b8 0f00 	cmp.w	r8, #0
 800ca1e:	dd9c      	ble.n	800c95a <__sflush_r+0x1a>
 800ca20:	6a21      	ldr	r1, [r4, #32]
 800ca22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca24:	4643      	mov	r3, r8
 800ca26:	463a      	mov	r2, r7
 800ca28:	4628      	mov	r0, r5
 800ca2a:	47b0      	blx	r6
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	dc06      	bgt.n	800ca3e <__sflush_r+0xfe>
 800ca30:	89a3      	ldrh	r3, [r4, #12]
 800ca32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca36:	81a3      	strh	r3, [r4, #12]
 800ca38:	f04f 30ff 	mov.w	r0, #4294967295
 800ca3c:	e78e      	b.n	800c95c <__sflush_r+0x1c>
 800ca3e:	4407      	add	r7, r0
 800ca40:	eba8 0800 	sub.w	r8, r8, r0
 800ca44:	e7e9      	b.n	800ca1a <__sflush_r+0xda>
 800ca46:	bf00      	nop
 800ca48:	20400001 	.word	0x20400001

0800ca4c <_fflush_r>:
 800ca4c:	b538      	push	{r3, r4, r5, lr}
 800ca4e:	690b      	ldr	r3, [r1, #16]
 800ca50:	4605      	mov	r5, r0
 800ca52:	460c      	mov	r4, r1
 800ca54:	b913      	cbnz	r3, 800ca5c <_fflush_r+0x10>
 800ca56:	2500      	movs	r5, #0
 800ca58:	4628      	mov	r0, r5
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	b118      	cbz	r0, 800ca66 <_fflush_r+0x1a>
 800ca5e:	6983      	ldr	r3, [r0, #24]
 800ca60:	b90b      	cbnz	r3, 800ca66 <_fflush_r+0x1a>
 800ca62:	f000 f887 	bl	800cb74 <__sinit>
 800ca66:	4b14      	ldr	r3, [pc, #80]	; (800cab8 <_fflush_r+0x6c>)
 800ca68:	429c      	cmp	r4, r3
 800ca6a:	d11b      	bne.n	800caa4 <_fflush_r+0x58>
 800ca6c:	686c      	ldr	r4, [r5, #4]
 800ca6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d0ef      	beq.n	800ca56 <_fflush_r+0xa>
 800ca76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca78:	07d0      	lsls	r0, r2, #31
 800ca7a:	d404      	bmi.n	800ca86 <_fflush_r+0x3a>
 800ca7c:	0599      	lsls	r1, r3, #22
 800ca7e:	d402      	bmi.n	800ca86 <_fflush_r+0x3a>
 800ca80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca82:	f000 fc88 	bl	800d396 <__retarget_lock_acquire_recursive>
 800ca86:	4628      	mov	r0, r5
 800ca88:	4621      	mov	r1, r4
 800ca8a:	f7ff ff59 	bl	800c940 <__sflush_r>
 800ca8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca90:	07da      	lsls	r2, r3, #31
 800ca92:	4605      	mov	r5, r0
 800ca94:	d4e0      	bmi.n	800ca58 <_fflush_r+0xc>
 800ca96:	89a3      	ldrh	r3, [r4, #12]
 800ca98:	059b      	lsls	r3, r3, #22
 800ca9a:	d4dd      	bmi.n	800ca58 <_fflush_r+0xc>
 800ca9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca9e:	f000 fc7b 	bl	800d398 <__retarget_lock_release_recursive>
 800caa2:	e7d9      	b.n	800ca58 <_fflush_r+0xc>
 800caa4:	4b05      	ldr	r3, [pc, #20]	; (800cabc <_fflush_r+0x70>)
 800caa6:	429c      	cmp	r4, r3
 800caa8:	d101      	bne.n	800caae <_fflush_r+0x62>
 800caaa:	68ac      	ldr	r4, [r5, #8]
 800caac:	e7df      	b.n	800ca6e <_fflush_r+0x22>
 800caae:	4b04      	ldr	r3, [pc, #16]	; (800cac0 <_fflush_r+0x74>)
 800cab0:	429c      	cmp	r4, r3
 800cab2:	bf08      	it	eq
 800cab4:	68ec      	ldreq	r4, [r5, #12]
 800cab6:	e7da      	b.n	800ca6e <_fflush_r+0x22>
 800cab8:	0800e844 	.word	0x0800e844
 800cabc:	0800e864 	.word	0x0800e864
 800cac0:	0800e824 	.word	0x0800e824

0800cac4 <std>:
 800cac4:	2300      	movs	r3, #0
 800cac6:	b510      	push	{r4, lr}
 800cac8:	4604      	mov	r4, r0
 800caca:	e9c0 3300 	strd	r3, r3, [r0]
 800cace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cad2:	6083      	str	r3, [r0, #8]
 800cad4:	8181      	strh	r1, [r0, #12]
 800cad6:	6643      	str	r3, [r0, #100]	; 0x64
 800cad8:	81c2      	strh	r2, [r0, #14]
 800cada:	6183      	str	r3, [r0, #24]
 800cadc:	4619      	mov	r1, r3
 800cade:	2208      	movs	r2, #8
 800cae0:	305c      	adds	r0, #92	; 0x5c
 800cae2:	f7fd fcbf 	bl	800a464 <memset>
 800cae6:	4b05      	ldr	r3, [pc, #20]	; (800cafc <std+0x38>)
 800cae8:	6263      	str	r3, [r4, #36]	; 0x24
 800caea:	4b05      	ldr	r3, [pc, #20]	; (800cb00 <std+0x3c>)
 800caec:	62a3      	str	r3, [r4, #40]	; 0x28
 800caee:	4b05      	ldr	r3, [pc, #20]	; (800cb04 <std+0x40>)
 800caf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800caf2:	4b05      	ldr	r3, [pc, #20]	; (800cb08 <std+0x44>)
 800caf4:	6224      	str	r4, [r4, #32]
 800caf6:	6323      	str	r3, [r4, #48]	; 0x30
 800caf8:	bd10      	pop	{r4, pc}
 800cafa:	bf00      	nop
 800cafc:	0800e269 	.word	0x0800e269
 800cb00:	0800e28b 	.word	0x0800e28b
 800cb04:	0800e2c3 	.word	0x0800e2c3
 800cb08:	0800e2e7 	.word	0x0800e2e7

0800cb0c <_cleanup_r>:
 800cb0c:	4901      	ldr	r1, [pc, #4]	; (800cb14 <_cleanup_r+0x8>)
 800cb0e:	f000 b8af 	b.w	800cc70 <_fwalk_reent>
 800cb12:	bf00      	nop
 800cb14:	0800ca4d 	.word	0x0800ca4d

0800cb18 <__sfmoreglue>:
 800cb18:	b570      	push	{r4, r5, r6, lr}
 800cb1a:	1e4a      	subs	r2, r1, #1
 800cb1c:	2568      	movs	r5, #104	; 0x68
 800cb1e:	4355      	muls	r5, r2
 800cb20:	460e      	mov	r6, r1
 800cb22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb26:	f001 f9d1 	bl	800decc <_malloc_r>
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	b140      	cbz	r0, 800cb40 <__sfmoreglue+0x28>
 800cb2e:	2100      	movs	r1, #0
 800cb30:	e9c0 1600 	strd	r1, r6, [r0]
 800cb34:	300c      	adds	r0, #12
 800cb36:	60a0      	str	r0, [r4, #8]
 800cb38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb3c:	f7fd fc92 	bl	800a464 <memset>
 800cb40:	4620      	mov	r0, r4
 800cb42:	bd70      	pop	{r4, r5, r6, pc}

0800cb44 <__sfp_lock_acquire>:
 800cb44:	4801      	ldr	r0, [pc, #4]	; (800cb4c <__sfp_lock_acquire+0x8>)
 800cb46:	f000 bc26 	b.w	800d396 <__retarget_lock_acquire_recursive>
 800cb4a:	bf00      	nop
 800cb4c:	20002958 	.word	0x20002958

0800cb50 <__sfp_lock_release>:
 800cb50:	4801      	ldr	r0, [pc, #4]	; (800cb58 <__sfp_lock_release+0x8>)
 800cb52:	f000 bc21 	b.w	800d398 <__retarget_lock_release_recursive>
 800cb56:	bf00      	nop
 800cb58:	20002958 	.word	0x20002958

0800cb5c <__sinit_lock_acquire>:
 800cb5c:	4801      	ldr	r0, [pc, #4]	; (800cb64 <__sinit_lock_acquire+0x8>)
 800cb5e:	f000 bc1a 	b.w	800d396 <__retarget_lock_acquire_recursive>
 800cb62:	bf00      	nop
 800cb64:	20002953 	.word	0x20002953

0800cb68 <__sinit_lock_release>:
 800cb68:	4801      	ldr	r0, [pc, #4]	; (800cb70 <__sinit_lock_release+0x8>)
 800cb6a:	f000 bc15 	b.w	800d398 <__retarget_lock_release_recursive>
 800cb6e:	bf00      	nop
 800cb70:	20002953 	.word	0x20002953

0800cb74 <__sinit>:
 800cb74:	b510      	push	{r4, lr}
 800cb76:	4604      	mov	r4, r0
 800cb78:	f7ff fff0 	bl	800cb5c <__sinit_lock_acquire>
 800cb7c:	69a3      	ldr	r3, [r4, #24]
 800cb7e:	b11b      	cbz	r3, 800cb88 <__sinit+0x14>
 800cb80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb84:	f7ff bff0 	b.w	800cb68 <__sinit_lock_release>
 800cb88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb8c:	6523      	str	r3, [r4, #80]	; 0x50
 800cb8e:	4b13      	ldr	r3, [pc, #76]	; (800cbdc <__sinit+0x68>)
 800cb90:	4a13      	ldr	r2, [pc, #76]	; (800cbe0 <__sinit+0x6c>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb96:	42a3      	cmp	r3, r4
 800cb98:	bf04      	itt	eq
 800cb9a:	2301      	moveq	r3, #1
 800cb9c:	61a3      	streq	r3, [r4, #24]
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f000 f820 	bl	800cbe4 <__sfp>
 800cba4:	6060      	str	r0, [r4, #4]
 800cba6:	4620      	mov	r0, r4
 800cba8:	f000 f81c 	bl	800cbe4 <__sfp>
 800cbac:	60a0      	str	r0, [r4, #8]
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f000 f818 	bl	800cbe4 <__sfp>
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	60e0      	str	r0, [r4, #12]
 800cbb8:	2104      	movs	r1, #4
 800cbba:	6860      	ldr	r0, [r4, #4]
 800cbbc:	f7ff ff82 	bl	800cac4 <std>
 800cbc0:	68a0      	ldr	r0, [r4, #8]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	2109      	movs	r1, #9
 800cbc6:	f7ff ff7d 	bl	800cac4 <std>
 800cbca:	68e0      	ldr	r0, [r4, #12]
 800cbcc:	2202      	movs	r2, #2
 800cbce:	2112      	movs	r1, #18
 800cbd0:	f7ff ff78 	bl	800cac4 <std>
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	61a3      	str	r3, [r4, #24]
 800cbd8:	e7d2      	b.n	800cb80 <__sinit+0xc>
 800cbda:	bf00      	nop
 800cbdc:	0800e708 	.word	0x0800e708
 800cbe0:	0800cb0d 	.word	0x0800cb0d

0800cbe4 <__sfp>:
 800cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe6:	4607      	mov	r7, r0
 800cbe8:	f7ff ffac 	bl	800cb44 <__sfp_lock_acquire>
 800cbec:	4b1e      	ldr	r3, [pc, #120]	; (800cc68 <__sfp+0x84>)
 800cbee:	681e      	ldr	r6, [r3, #0]
 800cbf0:	69b3      	ldr	r3, [r6, #24]
 800cbf2:	b913      	cbnz	r3, 800cbfa <__sfp+0x16>
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	f7ff ffbd 	bl	800cb74 <__sinit>
 800cbfa:	3648      	adds	r6, #72	; 0x48
 800cbfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc00:	3b01      	subs	r3, #1
 800cc02:	d503      	bpl.n	800cc0c <__sfp+0x28>
 800cc04:	6833      	ldr	r3, [r6, #0]
 800cc06:	b30b      	cbz	r3, 800cc4c <__sfp+0x68>
 800cc08:	6836      	ldr	r6, [r6, #0]
 800cc0a:	e7f7      	b.n	800cbfc <__sfp+0x18>
 800cc0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc10:	b9d5      	cbnz	r5, 800cc48 <__sfp+0x64>
 800cc12:	4b16      	ldr	r3, [pc, #88]	; (800cc6c <__sfp+0x88>)
 800cc14:	60e3      	str	r3, [r4, #12]
 800cc16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc1a:	6665      	str	r5, [r4, #100]	; 0x64
 800cc1c:	f000 fbba 	bl	800d394 <__retarget_lock_init_recursive>
 800cc20:	f7ff ff96 	bl	800cb50 <__sfp_lock_release>
 800cc24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc2c:	6025      	str	r5, [r4, #0]
 800cc2e:	61a5      	str	r5, [r4, #24]
 800cc30:	2208      	movs	r2, #8
 800cc32:	4629      	mov	r1, r5
 800cc34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc38:	f7fd fc14 	bl	800a464 <memset>
 800cc3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc44:	4620      	mov	r0, r4
 800cc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc48:	3468      	adds	r4, #104	; 0x68
 800cc4a:	e7d9      	b.n	800cc00 <__sfp+0x1c>
 800cc4c:	2104      	movs	r1, #4
 800cc4e:	4638      	mov	r0, r7
 800cc50:	f7ff ff62 	bl	800cb18 <__sfmoreglue>
 800cc54:	4604      	mov	r4, r0
 800cc56:	6030      	str	r0, [r6, #0]
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	d1d5      	bne.n	800cc08 <__sfp+0x24>
 800cc5c:	f7ff ff78 	bl	800cb50 <__sfp_lock_release>
 800cc60:	230c      	movs	r3, #12
 800cc62:	603b      	str	r3, [r7, #0]
 800cc64:	e7ee      	b.n	800cc44 <__sfp+0x60>
 800cc66:	bf00      	nop
 800cc68:	0800e708 	.word	0x0800e708
 800cc6c:	ffff0001 	.word	0xffff0001

0800cc70 <_fwalk_reent>:
 800cc70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc74:	4606      	mov	r6, r0
 800cc76:	4688      	mov	r8, r1
 800cc78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc7c:	2700      	movs	r7, #0
 800cc7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc82:	f1b9 0901 	subs.w	r9, r9, #1
 800cc86:	d505      	bpl.n	800cc94 <_fwalk_reent+0x24>
 800cc88:	6824      	ldr	r4, [r4, #0]
 800cc8a:	2c00      	cmp	r4, #0
 800cc8c:	d1f7      	bne.n	800cc7e <_fwalk_reent+0xe>
 800cc8e:	4638      	mov	r0, r7
 800cc90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc94:	89ab      	ldrh	r3, [r5, #12]
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d907      	bls.n	800ccaa <_fwalk_reent+0x3a>
 800cc9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc9e:	3301      	adds	r3, #1
 800cca0:	d003      	beq.n	800ccaa <_fwalk_reent+0x3a>
 800cca2:	4629      	mov	r1, r5
 800cca4:	4630      	mov	r0, r6
 800cca6:	47c0      	blx	r8
 800cca8:	4307      	orrs	r7, r0
 800ccaa:	3568      	adds	r5, #104	; 0x68
 800ccac:	e7e9      	b.n	800cc82 <_fwalk_reent+0x12>

0800ccae <rshift>:
 800ccae:	6903      	ldr	r3, [r0, #16]
 800ccb0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ccb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccb8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ccbc:	f100 0414 	add.w	r4, r0, #20
 800ccc0:	dd45      	ble.n	800cd4e <rshift+0xa0>
 800ccc2:	f011 011f 	ands.w	r1, r1, #31
 800ccc6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ccca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ccce:	d10c      	bne.n	800ccea <rshift+0x3c>
 800ccd0:	f100 0710 	add.w	r7, r0, #16
 800ccd4:	4629      	mov	r1, r5
 800ccd6:	42b1      	cmp	r1, r6
 800ccd8:	d334      	bcc.n	800cd44 <rshift+0x96>
 800ccda:	1a9b      	subs	r3, r3, r2
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	1eea      	subs	r2, r5, #3
 800cce0:	4296      	cmp	r6, r2
 800cce2:	bf38      	it	cc
 800cce4:	2300      	movcc	r3, #0
 800cce6:	4423      	add	r3, r4
 800cce8:	e015      	b.n	800cd16 <rshift+0x68>
 800ccea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ccee:	f1c1 0820 	rsb	r8, r1, #32
 800ccf2:	40cf      	lsrs	r7, r1
 800ccf4:	f105 0e04 	add.w	lr, r5, #4
 800ccf8:	46a1      	mov	r9, r4
 800ccfa:	4576      	cmp	r6, lr
 800ccfc:	46f4      	mov	ip, lr
 800ccfe:	d815      	bhi.n	800cd2c <rshift+0x7e>
 800cd00:	1a9b      	subs	r3, r3, r2
 800cd02:	009a      	lsls	r2, r3, #2
 800cd04:	3a04      	subs	r2, #4
 800cd06:	3501      	adds	r5, #1
 800cd08:	42ae      	cmp	r6, r5
 800cd0a:	bf38      	it	cc
 800cd0c:	2200      	movcc	r2, #0
 800cd0e:	18a3      	adds	r3, r4, r2
 800cd10:	50a7      	str	r7, [r4, r2]
 800cd12:	b107      	cbz	r7, 800cd16 <rshift+0x68>
 800cd14:	3304      	adds	r3, #4
 800cd16:	1b1a      	subs	r2, r3, r4
 800cd18:	42a3      	cmp	r3, r4
 800cd1a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cd1e:	bf08      	it	eq
 800cd20:	2300      	moveq	r3, #0
 800cd22:	6102      	str	r2, [r0, #16]
 800cd24:	bf08      	it	eq
 800cd26:	6143      	streq	r3, [r0, #20]
 800cd28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd2c:	f8dc c000 	ldr.w	ip, [ip]
 800cd30:	fa0c fc08 	lsl.w	ip, ip, r8
 800cd34:	ea4c 0707 	orr.w	r7, ip, r7
 800cd38:	f849 7b04 	str.w	r7, [r9], #4
 800cd3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cd40:	40cf      	lsrs	r7, r1
 800cd42:	e7da      	b.n	800ccfa <rshift+0x4c>
 800cd44:	f851 cb04 	ldr.w	ip, [r1], #4
 800cd48:	f847 cf04 	str.w	ip, [r7, #4]!
 800cd4c:	e7c3      	b.n	800ccd6 <rshift+0x28>
 800cd4e:	4623      	mov	r3, r4
 800cd50:	e7e1      	b.n	800cd16 <rshift+0x68>

0800cd52 <__hexdig_fun>:
 800cd52:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cd56:	2b09      	cmp	r3, #9
 800cd58:	d802      	bhi.n	800cd60 <__hexdig_fun+0xe>
 800cd5a:	3820      	subs	r0, #32
 800cd5c:	b2c0      	uxtb	r0, r0
 800cd5e:	4770      	bx	lr
 800cd60:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cd64:	2b05      	cmp	r3, #5
 800cd66:	d801      	bhi.n	800cd6c <__hexdig_fun+0x1a>
 800cd68:	3847      	subs	r0, #71	; 0x47
 800cd6a:	e7f7      	b.n	800cd5c <__hexdig_fun+0xa>
 800cd6c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cd70:	2b05      	cmp	r3, #5
 800cd72:	d801      	bhi.n	800cd78 <__hexdig_fun+0x26>
 800cd74:	3827      	subs	r0, #39	; 0x27
 800cd76:	e7f1      	b.n	800cd5c <__hexdig_fun+0xa>
 800cd78:	2000      	movs	r0, #0
 800cd7a:	4770      	bx	lr

0800cd7c <__gethex>:
 800cd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd80:	ed2d 8b02 	vpush	{d8}
 800cd84:	b089      	sub	sp, #36	; 0x24
 800cd86:	ee08 0a10 	vmov	s16, r0
 800cd8a:	9304      	str	r3, [sp, #16]
 800cd8c:	4bbc      	ldr	r3, [pc, #752]	; (800d080 <__gethex+0x304>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	9301      	str	r3, [sp, #4]
 800cd92:	4618      	mov	r0, r3
 800cd94:	468b      	mov	fp, r1
 800cd96:	4690      	mov	r8, r2
 800cd98:	f7f3 fa1a 	bl	80001d0 <strlen>
 800cd9c:	9b01      	ldr	r3, [sp, #4]
 800cd9e:	f8db 2000 	ldr.w	r2, [fp]
 800cda2:	4403      	add	r3, r0
 800cda4:	4682      	mov	sl, r0
 800cda6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cdaa:	9305      	str	r3, [sp, #20]
 800cdac:	1c93      	adds	r3, r2, #2
 800cdae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cdb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cdb6:	32fe      	adds	r2, #254	; 0xfe
 800cdb8:	18d1      	adds	r1, r2, r3
 800cdba:	461f      	mov	r7, r3
 800cdbc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cdc0:	9100      	str	r1, [sp, #0]
 800cdc2:	2830      	cmp	r0, #48	; 0x30
 800cdc4:	d0f8      	beq.n	800cdb8 <__gethex+0x3c>
 800cdc6:	f7ff ffc4 	bl	800cd52 <__hexdig_fun>
 800cdca:	4604      	mov	r4, r0
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d13a      	bne.n	800ce46 <__gethex+0xca>
 800cdd0:	9901      	ldr	r1, [sp, #4]
 800cdd2:	4652      	mov	r2, sl
 800cdd4:	4638      	mov	r0, r7
 800cdd6:	f001 fa8a 	bl	800e2ee <strncmp>
 800cdda:	4605      	mov	r5, r0
 800cddc:	2800      	cmp	r0, #0
 800cdde:	d168      	bne.n	800ceb2 <__gethex+0x136>
 800cde0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cde4:	eb07 060a 	add.w	r6, r7, sl
 800cde8:	f7ff ffb3 	bl	800cd52 <__hexdig_fun>
 800cdec:	2800      	cmp	r0, #0
 800cdee:	d062      	beq.n	800ceb6 <__gethex+0x13a>
 800cdf0:	4633      	mov	r3, r6
 800cdf2:	7818      	ldrb	r0, [r3, #0]
 800cdf4:	2830      	cmp	r0, #48	; 0x30
 800cdf6:	461f      	mov	r7, r3
 800cdf8:	f103 0301 	add.w	r3, r3, #1
 800cdfc:	d0f9      	beq.n	800cdf2 <__gethex+0x76>
 800cdfe:	f7ff ffa8 	bl	800cd52 <__hexdig_fun>
 800ce02:	2301      	movs	r3, #1
 800ce04:	fab0 f480 	clz	r4, r0
 800ce08:	0964      	lsrs	r4, r4, #5
 800ce0a:	4635      	mov	r5, r6
 800ce0c:	9300      	str	r3, [sp, #0]
 800ce0e:	463a      	mov	r2, r7
 800ce10:	4616      	mov	r6, r2
 800ce12:	3201      	adds	r2, #1
 800ce14:	7830      	ldrb	r0, [r6, #0]
 800ce16:	f7ff ff9c 	bl	800cd52 <__hexdig_fun>
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	d1f8      	bne.n	800ce10 <__gethex+0x94>
 800ce1e:	9901      	ldr	r1, [sp, #4]
 800ce20:	4652      	mov	r2, sl
 800ce22:	4630      	mov	r0, r6
 800ce24:	f001 fa63 	bl	800e2ee <strncmp>
 800ce28:	b980      	cbnz	r0, 800ce4c <__gethex+0xd0>
 800ce2a:	b94d      	cbnz	r5, 800ce40 <__gethex+0xc4>
 800ce2c:	eb06 050a 	add.w	r5, r6, sl
 800ce30:	462a      	mov	r2, r5
 800ce32:	4616      	mov	r6, r2
 800ce34:	3201      	adds	r2, #1
 800ce36:	7830      	ldrb	r0, [r6, #0]
 800ce38:	f7ff ff8b 	bl	800cd52 <__hexdig_fun>
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	d1f8      	bne.n	800ce32 <__gethex+0xb6>
 800ce40:	1bad      	subs	r5, r5, r6
 800ce42:	00ad      	lsls	r5, r5, #2
 800ce44:	e004      	b.n	800ce50 <__gethex+0xd4>
 800ce46:	2400      	movs	r4, #0
 800ce48:	4625      	mov	r5, r4
 800ce4a:	e7e0      	b.n	800ce0e <__gethex+0x92>
 800ce4c:	2d00      	cmp	r5, #0
 800ce4e:	d1f7      	bne.n	800ce40 <__gethex+0xc4>
 800ce50:	7833      	ldrb	r3, [r6, #0]
 800ce52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ce56:	2b50      	cmp	r3, #80	; 0x50
 800ce58:	d13b      	bne.n	800ced2 <__gethex+0x156>
 800ce5a:	7873      	ldrb	r3, [r6, #1]
 800ce5c:	2b2b      	cmp	r3, #43	; 0x2b
 800ce5e:	d02c      	beq.n	800ceba <__gethex+0x13e>
 800ce60:	2b2d      	cmp	r3, #45	; 0x2d
 800ce62:	d02e      	beq.n	800cec2 <__gethex+0x146>
 800ce64:	1c71      	adds	r1, r6, #1
 800ce66:	f04f 0900 	mov.w	r9, #0
 800ce6a:	7808      	ldrb	r0, [r1, #0]
 800ce6c:	f7ff ff71 	bl	800cd52 <__hexdig_fun>
 800ce70:	1e43      	subs	r3, r0, #1
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	2b18      	cmp	r3, #24
 800ce76:	d82c      	bhi.n	800ced2 <__gethex+0x156>
 800ce78:	f1a0 0210 	sub.w	r2, r0, #16
 800ce7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ce80:	f7ff ff67 	bl	800cd52 <__hexdig_fun>
 800ce84:	1e43      	subs	r3, r0, #1
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b18      	cmp	r3, #24
 800ce8a:	d91d      	bls.n	800cec8 <__gethex+0x14c>
 800ce8c:	f1b9 0f00 	cmp.w	r9, #0
 800ce90:	d000      	beq.n	800ce94 <__gethex+0x118>
 800ce92:	4252      	negs	r2, r2
 800ce94:	4415      	add	r5, r2
 800ce96:	f8cb 1000 	str.w	r1, [fp]
 800ce9a:	b1e4      	cbz	r4, 800ced6 <__gethex+0x15a>
 800ce9c:	9b00      	ldr	r3, [sp, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	bf14      	ite	ne
 800cea2:	2700      	movne	r7, #0
 800cea4:	2706      	moveq	r7, #6
 800cea6:	4638      	mov	r0, r7
 800cea8:	b009      	add	sp, #36	; 0x24
 800ceaa:	ecbd 8b02 	vpop	{d8}
 800ceae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb2:	463e      	mov	r6, r7
 800ceb4:	4625      	mov	r5, r4
 800ceb6:	2401      	movs	r4, #1
 800ceb8:	e7ca      	b.n	800ce50 <__gethex+0xd4>
 800ceba:	f04f 0900 	mov.w	r9, #0
 800cebe:	1cb1      	adds	r1, r6, #2
 800cec0:	e7d3      	b.n	800ce6a <__gethex+0xee>
 800cec2:	f04f 0901 	mov.w	r9, #1
 800cec6:	e7fa      	b.n	800cebe <__gethex+0x142>
 800cec8:	230a      	movs	r3, #10
 800ceca:	fb03 0202 	mla	r2, r3, r2, r0
 800cece:	3a10      	subs	r2, #16
 800ced0:	e7d4      	b.n	800ce7c <__gethex+0x100>
 800ced2:	4631      	mov	r1, r6
 800ced4:	e7df      	b.n	800ce96 <__gethex+0x11a>
 800ced6:	1bf3      	subs	r3, r6, r7
 800ced8:	3b01      	subs	r3, #1
 800ceda:	4621      	mov	r1, r4
 800cedc:	2b07      	cmp	r3, #7
 800cede:	dc0b      	bgt.n	800cef8 <__gethex+0x17c>
 800cee0:	ee18 0a10 	vmov	r0, s16
 800cee4:	f000 fad8 	bl	800d498 <_Balloc>
 800cee8:	4604      	mov	r4, r0
 800ceea:	b940      	cbnz	r0, 800cefe <__gethex+0x182>
 800ceec:	4b65      	ldr	r3, [pc, #404]	; (800d084 <__gethex+0x308>)
 800ceee:	4602      	mov	r2, r0
 800cef0:	21de      	movs	r1, #222	; 0xde
 800cef2:	4865      	ldr	r0, [pc, #404]	; (800d088 <__gethex+0x30c>)
 800cef4:	f001 fa2c 	bl	800e350 <__assert_func>
 800cef8:	3101      	adds	r1, #1
 800cefa:	105b      	asrs	r3, r3, #1
 800cefc:	e7ee      	b.n	800cedc <__gethex+0x160>
 800cefe:	f100 0914 	add.w	r9, r0, #20
 800cf02:	f04f 0b00 	mov.w	fp, #0
 800cf06:	f1ca 0301 	rsb	r3, sl, #1
 800cf0a:	f8cd 9008 	str.w	r9, [sp, #8]
 800cf0e:	f8cd b000 	str.w	fp, [sp]
 800cf12:	9306      	str	r3, [sp, #24]
 800cf14:	42b7      	cmp	r7, r6
 800cf16:	d340      	bcc.n	800cf9a <__gethex+0x21e>
 800cf18:	9802      	ldr	r0, [sp, #8]
 800cf1a:	9b00      	ldr	r3, [sp, #0]
 800cf1c:	f840 3b04 	str.w	r3, [r0], #4
 800cf20:	eba0 0009 	sub.w	r0, r0, r9
 800cf24:	1080      	asrs	r0, r0, #2
 800cf26:	0146      	lsls	r6, r0, #5
 800cf28:	6120      	str	r0, [r4, #16]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f000 fbaa 	bl	800d684 <__hi0bits>
 800cf30:	1a30      	subs	r0, r6, r0
 800cf32:	f8d8 6000 	ldr.w	r6, [r8]
 800cf36:	42b0      	cmp	r0, r6
 800cf38:	dd63      	ble.n	800d002 <__gethex+0x286>
 800cf3a:	1b87      	subs	r7, r0, r6
 800cf3c:	4639      	mov	r1, r7
 800cf3e:	4620      	mov	r0, r4
 800cf40:	f000 ff44 	bl	800ddcc <__any_on>
 800cf44:	4682      	mov	sl, r0
 800cf46:	b1a8      	cbz	r0, 800cf74 <__gethex+0x1f8>
 800cf48:	1e7b      	subs	r3, r7, #1
 800cf4a:	1159      	asrs	r1, r3, #5
 800cf4c:	f003 021f 	and.w	r2, r3, #31
 800cf50:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cf54:	f04f 0a01 	mov.w	sl, #1
 800cf58:	fa0a f202 	lsl.w	r2, sl, r2
 800cf5c:	420a      	tst	r2, r1
 800cf5e:	d009      	beq.n	800cf74 <__gethex+0x1f8>
 800cf60:	4553      	cmp	r3, sl
 800cf62:	dd05      	ble.n	800cf70 <__gethex+0x1f4>
 800cf64:	1eb9      	subs	r1, r7, #2
 800cf66:	4620      	mov	r0, r4
 800cf68:	f000 ff30 	bl	800ddcc <__any_on>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	d145      	bne.n	800cffc <__gethex+0x280>
 800cf70:	f04f 0a02 	mov.w	sl, #2
 800cf74:	4639      	mov	r1, r7
 800cf76:	4620      	mov	r0, r4
 800cf78:	f7ff fe99 	bl	800ccae <rshift>
 800cf7c:	443d      	add	r5, r7
 800cf7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf82:	42ab      	cmp	r3, r5
 800cf84:	da4c      	bge.n	800d020 <__gethex+0x2a4>
 800cf86:	ee18 0a10 	vmov	r0, s16
 800cf8a:	4621      	mov	r1, r4
 800cf8c:	f000 fac4 	bl	800d518 <_Bfree>
 800cf90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf92:	2300      	movs	r3, #0
 800cf94:	6013      	str	r3, [r2, #0]
 800cf96:	27a3      	movs	r7, #163	; 0xa3
 800cf98:	e785      	b.n	800cea6 <__gethex+0x12a>
 800cf9a:	1e73      	subs	r3, r6, #1
 800cf9c:	9a05      	ldr	r2, [sp, #20]
 800cf9e:	9303      	str	r3, [sp, #12]
 800cfa0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d019      	beq.n	800cfdc <__gethex+0x260>
 800cfa8:	f1bb 0f20 	cmp.w	fp, #32
 800cfac:	d107      	bne.n	800cfbe <__gethex+0x242>
 800cfae:	9b02      	ldr	r3, [sp, #8]
 800cfb0:	9a00      	ldr	r2, [sp, #0]
 800cfb2:	f843 2b04 	str.w	r2, [r3], #4
 800cfb6:	9302      	str	r3, [sp, #8]
 800cfb8:	2300      	movs	r3, #0
 800cfba:	9300      	str	r3, [sp, #0]
 800cfbc:	469b      	mov	fp, r3
 800cfbe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cfc2:	f7ff fec6 	bl	800cd52 <__hexdig_fun>
 800cfc6:	9b00      	ldr	r3, [sp, #0]
 800cfc8:	f000 000f 	and.w	r0, r0, #15
 800cfcc:	fa00 f00b 	lsl.w	r0, r0, fp
 800cfd0:	4303      	orrs	r3, r0
 800cfd2:	9300      	str	r3, [sp, #0]
 800cfd4:	f10b 0b04 	add.w	fp, fp, #4
 800cfd8:	9b03      	ldr	r3, [sp, #12]
 800cfda:	e00d      	b.n	800cff8 <__gethex+0x27c>
 800cfdc:	9b03      	ldr	r3, [sp, #12]
 800cfde:	9a06      	ldr	r2, [sp, #24]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	42bb      	cmp	r3, r7
 800cfe4:	d3e0      	bcc.n	800cfa8 <__gethex+0x22c>
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	9901      	ldr	r1, [sp, #4]
 800cfea:	9307      	str	r3, [sp, #28]
 800cfec:	4652      	mov	r2, sl
 800cfee:	f001 f97e 	bl	800e2ee <strncmp>
 800cff2:	9b07      	ldr	r3, [sp, #28]
 800cff4:	2800      	cmp	r0, #0
 800cff6:	d1d7      	bne.n	800cfa8 <__gethex+0x22c>
 800cff8:	461e      	mov	r6, r3
 800cffa:	e78b      	b.n	800cf14 <__gethex+0x198>
 800cffc:	f04f 0a03 	mov.w	sl, #3
 800d000:	e7b8      	b.n	800cf74 <__gethex+0x1f8>
 800d002:	da0a      	bge.n	800d01a <__gethex+0x29e>
 800d004:	1a37      	subs	r7, r6, r0
 800d006:	4621      	mov	r1, r4
 800d008:	ee18 0a10 	vmov	r0, s16
 800d00c:	463a      	mov	r2, r7
 800d00e:	f000 fc9f 	bl	800d950 <__lshift>
 800d012:	1bed      	subs	r5, r5, r7
 800d014:	4604      	mov	r4, r0
 800d016:	f100 0914 	add.w	r9, r0, #20
 800d01a:	f04f 0a00 	mov.w	sl, #0
 800d01e:	e7ae      	b.n	800cf7e <__gethex+0x202>
 800d020:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d024:	42a8      	cmp	r0, r5
 800d026:	dd72      	ble.n	800d10e <__gethex+0x392>
 800d028:	1b45      	subs	r5, r0, r5
 800d02a:	42ae      	cmp	r6, r5
 800d02c:	dc36      	bgt.n	800d09c <__gethex+0x320>
 800d02e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d032:	2b02      	cmp	r3, #2
 800d034:	d02a      	beq.n	800d08c <__gethex+0x310>
 800d036:	2b03      	cmp	r3, #3
 800d038:	d02c      	beq.n	800d094 <__gethex+0x318>
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d115      	bne.n	800d06a <__gethex+0x2ee>
 800d03e:	42ae      	cmp	r6, r5
 800d040:	d113      	bne.n	800d06a <__gethex+0x2ee>
 800d042:	2e01      	cmp	r6, #1
 800d044:	d10b      	bne.n	800d05e <__gethex+0x2e2>
 800d046:	9a04      	ldr	r2, [sp, #16]
 800d048:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d04c:	6013      	str	r3, [r2, #0]
 800d04e:	2301      	movs	r3, #1
 800d050:	6123      	str	r3, [r4, #16]
 800d052:	f8c9 3000 	str.w	r3, [r9]
 800d056:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d058:	2762      	movs	r7, #98	; 0x62
 800d05a:	601c      	str	r4, [r3, #0]
 800d05c:	e723      	b.n	800cea6 <__gethex+0x12a>
 800d05e:	1e71      	subs	r1, r6, #1
 800d060:	4620      	mov	r0, r4
 800d062:	f000 feb3 	bl	800ddcc <__any_on>
 800d066:	2800      	cmp	r0, #0
 800d068:	d1ed      	bne.n	800d046 <__gethex+0x2ca>
 800d06a:	ee18 0a10 	vmov	r0, s16
 800d06e:	4621      	mov	r1, r4
 800d070:	f000 fa52 	bl	800d518 <_Bfree>
 800d074:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d076:	2300      	movs	r3, #0
 800d078:	6013      	str	r3, [r2, #0]
 800d07a:	2750      	movs	r7, #80	; 0x50
 800d07c:	e713      	b.n	800cea6 <__gethex+0x12a>
 800d07e:	bf00      	nop
 800d080:	0800e8f0 	.word	0x0800e8f0
 800d084:	0800e813 	.word	0x0800e813
 800d088:	0800e884 	.word	0x0800e884
 800d08c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d1eb      	bne.n	800d06a <__gethex+0x2ee>
 800d092:	e7d8      	b.n	800d046 <__gethex+0x2ca>
 800d094:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d096:	2b00      	cmp	r3, #0
 800d098:	d1d5      	bne.n	800d046 <__gethex+0x2ca>
 800d09a:	e7e6      	b.n	800d06a <__gethex+0x2ee>
 800d09c:	1e6f      	subs	r7, r5, #1
 800d09e:	f1ba 0f00 	cmp.w	sl, #0
 800d0a2:	d131      	bne.n	800d108 <__gethex+0x38c>
 800d0a4:	b127      	cbz	r7, 800d0b0 <__gethex+0x334>
 800d0a6:	4639      	mov	r1, r7
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f000 fe8f 	bl	800ddcc <__any_on>
 800d0ae:	4682      	mov	sl, r0
 800d0b0:	117b      	asrs	r3, r7, #5
 800d0b2:	2101      	movs	r1, #1
 800d0b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d0b8:	f007 071f 	and.w	r7, r7, #31
 800d0bc:	fa01 f707 	lsl.w	r7, r1, r7
 800d0c0:	421f      	tst	r7, r3
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	bf18      	it	ne
 800d0c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800d0cc:	1b76      	subs	r6, r6, r5
 800d0ce:	f7ff fdee 	bl	800ccae <rshift>
 800d0d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d0d6:	2702      	movs	r7, #2
 800d0d8:	f1ba 0f00 	cmp.w	sl, #0
 800d0dc:	d048      	beq.n	800d170 <__gethex+0x3f4>
 800d0de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d0e2:	2b02      	cmp	r3, #2
 800d0e4:	d015      	beq.n	800d112 <__gethex+0x396>
 800d0e6:	2b03      	cmp	r3, #3
 800d0e8:	d017      	beq.n	800d11a <__gethex+0x39e>
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d109      	bne.n	800d102 <__gethex+0x386>
 800d0ee:	f01a 0f02 	tst.w	sl, #2
 800d0f2:	d006      	beq.n	800d102 <__gethex+0x386>
 800d0f4:	f8d9 0000 	ldr.w	r0, [r9]
 800d0f8:	ea4a 0a00 	orr.w	sl, sl, r0
 800d0fc:	f01a 0f01 	tst.w	sl, #1
 800d100:	d10e      	bne.n	800d120 <__gethex+0x3a4>
 800d102:	f047 0710 	orr.w	r7, r7, #16
 800d106:	e033      	b.n	800d170 <__gethex+0x3f4>
 800d108:	f04f 0a01 	mov.w	sl, #1
 800d10c:	e7d0      	b.n	800d0b0 <__gethex+0x334>
 800d10e:	2701      	movs	r7, #1
 800d110:	e7e2      	b.n	800d0d8 <__gethex+0x35c>
 800d112:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d114:	f1c3 0301 	rsb	r3, r3, #1
 800d118:	9315      	str	r3, [sp, #84]	; 0x54
 800d11a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d0f0      	beq.n	800d102 <__gethex+0x386>
 800d120:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d124:	f104 0314 	add.w	r3, r4, #20
 800d128:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d12c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d130:	f04f 0c00 	mov.w	ip, #0
 800d134:	4618      	mov	r0, r3
 800d136:	f853 2b04 	ldr.w	r2, [r3], #4
 800d13a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d13e:	d01c      	beq.n	800d17a <__gethex+0x3fe>
 800d140:	3201      	adds	r2, #1
 800d142:	6002      	str	r2, [r0, #0]
 800d144:	2f02      	cmp	r7, #2
 800d146:	f104 0314 	add.w	r3, r4, #20
 800d14a:	d13f      	bne.n	800d1cc <__gethex+0x450>
 800d14c:	f8d8 2000 	ldr.w	r2, [r8]
 800d150:	3a01      	subs	r2, #1
 800d152:	42b2      	cmp	r2, r6
 800d154:	d10a      	bne.n	800d16c <__gethex+0x3f0>
 800d156:	1171      	asrs	r1, r6, #5
 800d158:	2201      	movs	r2, #1
 800d15a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d15e:	f006 061f 	and.w	r6, r6, #31
 800d162:	fa02 f606 	lsl.w	r6, r2, r6
 800d166:	421e      	tst	r6, r3
 800d168:	bf18      	it	ne
 800d16a:	4617      	movne	r7, r2
 800d16c:	f047 0720 	orr.w	r7, r7, #32
 800d170:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d172:	601c      	str	r4, [r3, #0]
 800d174:	9b04      	ldr	r3, [sp, #16]
 800d176:	601d      	str	r5, [r3, #0]
 800d178:	e695      	b.n	800cea6 <__gethex+0x12a>
 800d17a:	4299      	cmp	r1, r3
 800d17c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d180:	d8d8      	bhi.n	800d134 <__gethex+0x3b8>
 800d182:	68a3      	ldr	r3, [r4, #8]
 800d184:	459b      	cmp	fp, r3
 800d186:	db19      	blt.n	800d1bc <__gethex+0x440>
 800d188:	6861      	ldr	r1, [r4, #4]
 800d18a:	ee18 0a10 	vmov	r0, s16
 800d18e:	3101      	adds	r1, #1
 800d190:	f000 f982 	bl	800d498 <_Balloc>
 800d194:	4681      	mov	r9, r0
 800d196:	b918      	cbnz	r0, 800d1a0 <__gethex+0x424>
 800d198:	4b1a      	ldr	r3, [pc, #104]	; (800d204 <__gethex+0x488>)
 800d19a:	4602      	mov	r2, r0
 800d19c:	2184      	movs	r1, #132	; 0x84
 800d19e:	e6a8      	b.n	800cef2 <__gethex+0x176>
 800d1a0:	6922      	ldr	r2, [r4, #16]
 800d1a2:	3202      	adds	r2, #2
 800d1a4:	f104 010c 	add.w	r1, r4, #12
 800d1a8:	0092      	lsls	r2, r2, #2
 800d1aa:	300c      	adds	r0, #12
 800d1ac:	f7fd f94c 	bl	800a448 <memcpy>
 800d1b0:	4621      	mov	r1, r4
 800d1b2:	ee18 0a10 	vmov	r0, s16
 800d1b6:	f000 f9af 	bl	800d518 <_Bfree>
 800d1ba:	464c      	mov	r4, r9
 800d1bc:	6923      	ldr	r3, [r4, #16]
 800d1be:	1c5a      	adds	r2, r3, #1
 800d1c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d1c4:	6122      	str	r2, [r4, #16]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	615a      	str	r2, [r3, #20]
 800d1ca:	e7bb      	b.n	800d144 <__gethex+0x3c8>
 800d1cc:	6922      	ldr	r2, [r4, #16]
 800d1ce:	455a      	cmp	r2, fp
 800d1d0:	dd0b      	ble.n	800d1ea <__gethex+0x46e>
 800d1d2:	2101      	movs	r1, #1
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f7ff fd6a 	bl	800ccae <rshift>
 800d1da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d1de:	3501      	adds	r5, #1
 800d1e0:	42ab      	cmp	r3, r5
 800d1e2:	f6ff aed0 	blt.w	800cf86 <__gethex+0x20a>
 800d1e6:	2701      	movs	r7, #1
 800d1e8:	e7c0      	b.n	800d16c <__gethex+0x3f0>
 800d1ea:	f016 061f 	ands.w	r6, r6, #31
 800d1ee:	d0fa      	beq.n	800d1e6 <__gethex+0x46a>
 800d1f0:	449a      	add	sl, r3
 800d1f2:	f1c6 0620 	rsb	r6, r6, #32
 800d1f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d1fa:	f000 fa43 	bl	800d684 <__hi0bits>
 800d1fe:	42b0      	cmp	r0, r6
 800d200:	dbe7      	blt.n	800d1d2 <__gethex+0x456>
 800d202:	e7f0      	b.n	800d1e6 <__gethex+0x46a>
 800d204:	0800e813 	.word	0x0800e813

0800d208 <L_shift>:
 800d208:	f1c2 0208 	rsb	r2, r2, #8
 800d20c:	0092      	lsls	r2, r2, #2
 800d20e:	b570      	push	{r4, r5, r6, lr}
 800d210:	f1c2 0620 	rsb	r6, r2, #32
 800d214:	6843      	ldr	r3, [r0, #4]
 800d216:	6804      	ldr	r4, [r0, #0]
 800d218:	fa03 f506 	lsl.w	r5, r3, r6
 800d21c:	432c      	orrs	r4, r5
 800d21e:	40d3      	lsrs	r3, r2
 800d220:	6004      	str	r4, [r0, #0]
 800d222:	f840 3f04 	str.w	r3, [r0, #4]!
 800d226:	4288      	cmp	r0, r1
 800d228:	d3f4      	bcc.n	800d214 <L_shift+0xc>
 800d22a:	bd70      	pop	{r4, r5, r6, pc}

0800d22c <__match>:
 800d22c:	b530      	push	{r4, r5, lr}
 800d22e:	6803      	ldr	r3, [r0, #0]
 800d230:	3301      	adds	r3, #1
 800d232:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d236:	b914      	cbnz	r4, 800d23e <__match+0x12>
 800d238:	6003      	str	r3, [r0, #0]
 800d23a:	2001      	movs	r0, #1
 800d23c:	bd30      	pop	{r4, r5, pc}
 800d23e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d242:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d246:	2d19      	cmp	r5, #25
 800d248:	bf98      	it	ls
 800d24a:	3220      	addls	r2, #32
 800d24c:	42a2      	cmp	r2, r4
 800d24e:	d0f0      	beq.n	800d232 <__match+0x6>
 800d250:	2000      	movs	r0, #0
 800d252:	e7f3      	b.n	800d23c <__match+0x10>

0800d254 <__hexnan>:
 800d254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d258:	680b      	ldr	r3, [r1, #0]
 800d25a:	6801      	ldr	r1, [r0, #0]
 800d25c:	115e      	asrs	r6, r3, #5
 800d25e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d262:	f013 031f 	ands.w	r3, r3, #31
 800d266:	b087      	sub	sp, #28
 800d268:	bf18      	it	ne
 800d26a:	3604      	addne	r6, #4
 800d26c:	2500      	movs	r5, #0
 800d26e:	1f37      	subs	r7, r6, #4
 800d270:	4682      	mov	sl, r0
 800d272:	4690      	mov	r8, r2
 800d274:	9301      	str	r3, [sp, #4]
 800d276:	f846 5c04 	str.w	r5, [r6, #-4]
 800d27a:	46b9      	mov	r9, r7
 800d27c:	463c      	mov	r4, r7
 800d27e:	9502      	str	r5, [sp, #8]
 800d280:	46ab      	mov	fp, r5
 800d282:	784a      	ldrb	r2, [r1, #1]
 800d284:	1c4b      	adds	r3, r1, #1
 800d286:	9303      	str	r3, [sp, #12]
 800d288:	b342      	cbz	r2, 800d2dc <__hexnan+0x88>
 800d28a:	4610      	mov	r0, r2
 800d28c:	9105      	str	r1, [sp, #20]
 800d28e:	9204      	str	r2, [sp, #16]
 800d290:	f7ff fd5f 	bl	800cd52 <__hexdig_fun>
 800d294:	2800      	cmp	r0, #0
 800d296:	d14f      	bne.n	800d338 <__hexnan+0xe4>
 800d298:	9a04      	ldr	r2, [sp, #16]
 800d29a:	9905      	ldr	r1, [sp, #20]
 800d29c:	2a20      	cmp	r2, #32
 800d29e:	d818      	bhi.n	800d2d2 <__hexnan+0x7e>
 800d2a0:	9b02      	ldr	r3, [sp, #8]
 800d2a2:	459b      	cmp	fp, r3
 800d2a4:	dd13      	ble.n	800d2ce <__hexnan+0x7a>
 800d2a6:	454c      	cmp	r4, r9
 800d2a8:	d206      	bcs.n	800d2b8 <__hexnan+0x64>
 800d2aa:	2d07      	cmp	r5, #7
 800d2ac:	dc04      	bgt.n	800d2b8 <__hexnan+0x64>
 800d2ae:	462a      	mov	r2, r5
 800d2b0:	4649      	mov	r1, r9
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f7ff ffa8 	bl	800d208 <L_shift>
 800d2b8:	4544      	cmp	r4, r8
 800d2ba:	d950      	bls.n	800d35e <__hexnan+0x10a>
 800d2bc:	2300      	movs	r3, #0
 800d2be:	f1a4 0904 	sub.w	r9, r4, #4
 800d2c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d2c6:	f8cd b008 	str.w	fp, [sp, #8]
 800d2ca:	464c      	mov	r4, r9
 800d2cc:	461d      	mov	r5, r3
 800d2ce:	9903      	ldr	r1, [sp, #12]
 800d2d0:	e7d7      	b.n	800d282 <__hexnan+0x2e>
 800d2d2:	2a29      	cmp	r2, #41	; 0x29
 800d2d4:	d156      	bne.n	800d384 <__hexnan+0x130>
 800d2d6:	3102      	adds	r1, #2
 800d2d8:	f8ca 1000 	str.w	r1, [sl]
 800d2dc:	f1bb 0f00 	cmp.w	fp, #0
 800d2e0:	d050      	beq.n	800d384 <__hexnan+0x130>
 800d2e2:	454c      	cmp	r4, r9
 800d2e4:	d206      	bcs.n	800d2f4 <__hexnan+0xa0>
 800d2e6:	2d07      	cmp	r5, #7
 800d2e8:	dc04      	bgt.n	800d2f4 <__hexnan+0xa0>
 800d2ea:	462a      	mov	r2, r5
 800d2ec:	4649      	mov	r1, r9
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f7ff ff8a 	bl	800d208 <L_shift>
 800d2f4:	4544      	cmp	r4, r8
 800d2f6:	d934      	bls.n	800d362 <__hexnan+0x10e>
 800d2f8:	f1a8 0204 	sub.w	r2, r8, #4
 800d2fc:	4623      	mov	r3, r4
 800d2fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800d302:	f842 1f04 	str.w	r1, [r2, #4]!
 800d306:	429f      	cmp	r7, r3
 800d308:	d2f9      	bcs.n	800d2fe <__hexnan+0xaa>
 800d30a:	1b3b      	subs	r3, r7, r4
 800d30c:	f023 0303 	bic.w	r3, r3, #3
 800d310:	3304      	adds	r3, #4
 800d312:	3401      	adds	r4, #1
 800d314:	3e03      	subs	r6, #3
 800d316:	42b4      	cmp	r4, r6
 800d318:	bf88      	it	hi
 800d31a:	2304      	movhi	r3, #4
 800d31c:	4443      	add	r3, r8
 800d31e:	2200      	movs	r2, #0
 800d320:	f843 2b04 	str.w	r2, [r3], #4
 800d324:	429f      	cmp	r7, r3
 800d326:	d2fb      	bcs.n	800d320 <__hexnan+0xcc>
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	b91b      	cbnz	r3, 800d334 <__hexnan+0xe0>
 800d32c:	4547      	cmp	r7, r8
 800d32e:	d127      	bne.n	800d380 <__hexnan+0x12c>
 800d330:	2301      	movs	r3, #1
 800d332:	603b      	str	r3, [r7, #0]
 800d334:	2005      	movs	r0, #5
 800d336:	e026      	b.n	800d386 <__hexnan+0x132>
 800d338:	3501      	adds	r5, #1
 800d33a:	2d08      	cmp	r5, #8
 800d33c:	f10b 0b01 	add.w	fp, fp, #1
 800d340:	dd06      	ble.n	800d350 <__hexnan+0xfc>
 800d342:	4544      	cmp	r4, r8
 800d344:	d9c3      	bls.n	800d2ce <__hexnan+0x7a>
 800d346:	2300      	movs	r3, #0
 800d348:	f844 3c04 	str.w	r3, [r4, #-4]
 800d34c:	2501      	movs	r5, #1
 800d34e:	3c04      	subs	r4, #4
 800d350:	6822      	ldr	r2, [r4, #0]
 800d352:	f000 000f 	and.w	r0, r0, #15
 800d356:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d35a:	6022      	str	r2, [r4, #0]
 800d35c:	e7b7      	b.n	800d2ce <__hexnan+0x7a>
 800d35e:	2508      	movs	r5, #8
 800d360:	e7b5      	b.n	800d2ce <__hexnan+0x7a>
 800d362:	9b01      	ldr	r3, [sp, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d0df      	beq.n	800d328 <__hexnan+0xd4>
 800d368:	f04f 32ff 	mov.w	r2, #4294967295
 800d36c:	f1c3 0320 	rsb	r3, r3, #32
 800d370:	fa22 f303 	lsr.w	r3, r2, r3
 800d374:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d378:	401a      	ands	r2, r3
 800d37a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d37e:	e7d3      	b.n	800d328 <__hexnan+0xd4>
 800d380:	3f04      	subs	r7, #4
 800d382:	e7d1      	b.n	800d328 <__hexnan+0xd4>
 800d384:	2004      	movs	r0, #4
 800d386:	b007      	add	sp, #28
 800d388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d38c <_localeconv_r>:
 800d38c:	4800      	ldr	r0, [pc, #0]	; (800d390 <_localeconv_r+0x4>)
 800d38e:	4770      	bx	lr
 800d390:	2000016c 	.word	0x2000016c

0800d394 <__retarget_lock_init_recursive>:
 800d394:	4770      	bx	lr

0800d396 <__retarget_lock_acquire_recursive>:
 800d396:	4770      	bx	lr

0800d398 <__retarget_lock_release_recursive>:
 800d398:	4770      	bx	lr

0800d39a <__swhatbuf_r>:
 800d39a:	b570      	push	{r4, r5, r6, lr}
 800d39c:	460e      	mov	r6, r1
 800d39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3a2:	2900      	cmp	r1, #0
 800d3a4:	b096      	sub	sp, #88	; 0x58
 800d3a6:	4614      	mov	r4, r2
 800d3a8:	461d      	mov	r5, r3
 800d3aa:	da07      	bge.n	800d3bc <__swhatbuf_r+0x22>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	602b      	str	r3, [r5, #0]
 800d3b0:	89b3      	ldrh	r3, [r6, #12]
 800d3b2:	061a      	lsls	r2, r3, #24
 800d3b4:	d410      	bmi.n	800d3d8 <__swhatbuf_r+0x3e>
 800d3b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3ba:	e00e      	b.n	800d3da <__swhatbuf_r+0x40>
 800d3bc:	466a      	mov	r2, sp
 800d3be:	f001 f807 	bl	800e3d0 <_fstat_r>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	dbf2      	blt.n	800d3ac <__swhatbuf_r+0x12>
 800d3c6:	9a01      	ldr	r2, [sp, #4]
 800d3c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d3cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d3d0:	425a      	negs	r2, r3
 800d3d2:	415a      	adcs	r2, r3
 800d3d4:	602a      	str	r2, [r5, #0]
 800d3d6:	e7ee      	b.n	800d3b6 <__swhatbuf_r+0x1c>
 800d3d8:	2340      	movs	r3, #64	; 0x40
 800d3da:	2000      	movs	r0, #0
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	b016      	add	sp, #88	; 0x58
 800d3e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d3e4 <__smakebuf_r>:
 800d3e4:	898b      	ldrh	r3, [r1, #12]
 800d3e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3e8:	079d      	lsls	r5, r3, #30
 800d3ea:	4606      	mov	r6, r0
 800d3ec:	460c      	mov	r4, r1
 800d3ee:	d507      	bpl.n	800d400 <__smakebuf_r+0x1c>
 800d3f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3f4:	6023      	str	r3, [r4, #0]
 800d3f6:	6123      	str	r3, [r4, #16]
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	6163      	str	r3, [r4, #20]
 800d3fc:	b002      	add	sp, #8
 800d3fe:	bd70      	pop	{r4, r5, r6, pc}
 800d400:	ab01      	add	r3, sp, #4
 800d402:	466a      	mov	r2, sp
 800d404:	f7ff ffc9 	bl	800d39a <__swhatbuf_r>
 800d408:	9900      	ldr	r1, [sp, #0]
 800d40a:	4605      	mov	r5, r0
 800d40c:	4630      	mov	r0, r6
 800d40e:	f000 fd5d 	bl	800decc <_malloc_r>
 800d412:	b948      	cbnz	r0, 800d428 <__smakebuf_r+0x44>
 800d414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d418:	059a      	lsls	r2, r3, #22
 800d41a:	d4ef      	bmi.n	800d3fc <__smakebuf_r+0x18>
 800d41c:	f023 0303 	bic.w	r3, r3, #3
 800d420:	f043 0302 	orr.w	r3, r3, #2
 800d424:	81a3      	strh	r3, [r4, #12]
 800d426:	e7e3      	b.n	800d3f0 <__smakebuf_r+0xc>
 800d428:	4b0d      	ldr	r3, [pc, #52]	; (800d460 <__smakebuf_r+0x7c>)
 800d42a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d42c:	89a3      	ldrh	r3, [r4, #12]
 800d42e:	6020      	str	r0, [r4, #0]
 800d430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d434:	81a3      	strh	r3, [r4, #12]
 800d436:	9b00      	ldr	r3, [sp, #0]
 800d438:	6163      	str	r3, [r4, #20]
 800d43a:	9b01      	ldr	r3, [sp, #4]
 800d43c:	6120      	str	r0, [r4, #16]
 800d43e:	b15b      	cbz	r3, 800d458 <__smakebuf_r+0x74>
 800d440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d444:	4630      	mov	r0, r6
 800d446:	f000 ffd5 	bl	800e3f4 <_isatty_r>
 800d44a:	b128      	cbz	r0, 800d458 <__smakebuf_r+0x74>
 800d44c:	89a3      	ldrh	r3, [r4, #12]
 800d44e:	f023 0303 	bic.w	r3, r3, #3
 800d452:	f043 0301 	orr.w	r3, r3, #1
 800d456:	81a3      	strh	r3, [r4, #12]
 800d458:	89a0      	ldrh	r0, [r4, #12]
 800d45a:	4305      	orrs	r5, r0
 800d45c:	81a5      	strh	r5, [r4, #12]
 800d45e:	e7cd      	b.n	800d3fc <__smakebuf_r+0x18>
 800d460:	0800cb0d 	.word	0x0800cb0d

0800d464 <malloc>:
 800d464:	4b02      	ldr	r3, [pc, #8]	; (800d470 <malloc+0xc>)
 800d466:	4601      	mov	r1, r0
 800d468:	6818      	ldr	r0, [r3, #0]
 800d46a:	f000 bd2f 	b.w	800decc <_malloc_r>
 800d46e:	bf00      	nop
 800d470:	20000014 	.word	0x20000014

0800d474 <__ascii_mbtowc>:
 800d474:	b082      	sub	sp, #8
 800d476:	b901      	cbnz	r1, 800d47a <__ascii_mbtowc+0x6>
 800d478:	a901      	add	r1, sp, #4
 800d47a:	b142      	cbz	r2, 800d48e <__ascii_mbtowc+0x1a>
 800d47c:	b14b      	cbz	r3, 800d492 <__ascii_mbtowc+0x1e>
 800d47e:	7813      	ldrb	r3, [r2, #0]
 800d480:	600b      	str	r3, [r1, #0]
 800d482:	7812      	ldrb	r2, [r2, #0]
 800d484:	1e10      	subs	r0, r2, #0
 800d486:	bf18      	it	ne
 800d488:	2001      	movne	r0, #1
 800d48a:	b002      	add	sp, #8
 800d48c:	4770      	bx	lr
 800d48e:	4610      	mov	r0, r2
 800d490:	e7fb      	b.n	800d48a <__ascii_mbtowc+0x16>
 800d492:	f06f 0001 	mvn.w	r0, #1
 800d496:	e7f8      	b.n	800d48a <__ascii_mbtowc+0x16>

0800d498 <_Balloc>:
 800d498:	b570      	push	{r4, r5, r6, lr}
 800d49a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d49c:	4604      	mov	r4, r0
 800d49e:	460d      	mov	r5, r1
 800d4a0:	b976      	cbnz	r6, 800d4c0 <_Balloc+0x28>
 800d4a2:	2010      	movs	r0, #16
 800d4a4:	f7ff ffde 	bl	800d464 <malloc>
 800d4a8:	4602      	mov	r2, r0
 800d4aa:	6260      	str	r0, [r4, #36]	; 0x24
 800d4ac:	b920      	cbnz	r0, 800d4b8 <_Balloc+0x20>
 800d4ae:	4b18      	ldr	r3, [pc, #96]	; (800d510 <_Balloc+0x78>)
 800d4b0:	4818      	ldr	r0, [pc, #96]	; (800d514 <_Balloc+0x7c>)
 800d4b2:	2166      	movs	r1, #102	; 0x66
 800d4b4:	f000 ff4c 	bl	800e350 <__assert_func>
 800d4b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4bc:	6006      	str	r6, [r0, #0]
 800d4be:	60c6      	str	r6, [r0, #12]
 800d4c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d4c2:	68f3      	ldr	r3, [r6, #12]
 800d4c4:	b183      	cbz	r3, 800d4e8 <_Balloc+0x50>
 800d4c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4c8:	68db      	ldr	r3, [r3, #12]
 800d4ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d4ce:	b9b8      	cbnz	r0, 800d500 <_Balloc+0x68>
 800d4d0:	2101      	movs	r1, #1
 800d4d2:	fa01 f605 	lsl.w	r6, r1, r5
 800d4d6:	1d72      	adds	r2, r6, #5
 800d4d8:	0092      	lsls	r2, r2, #2
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f000 fc97 	bl	800de0e <_calloc_r>
 800d4e0:	b160      	cbz	r0, 800d4fc <_Balloc+0x64>
 800d4e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d4e6:	e00e      	b.n	800d506 <_Balloc+0x6e>
 800d4e8:	2221      	movs	r2, #33	; 0x21
 800d4ea:	2104      	movs	r1, #4
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f000 fc8e 	bl	800de0e <_calloc_r>
 800d4f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4f4:	60f0      	str	r0, [r6, #12]
 800d4f6:	68db      	ldr	r3, [r3, #12]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1e4      	bne.n	800d4c6 <_Balloc+0x2e>
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	bd70      	pop	{r4, r5, r6, pc}
 800d500:	6802      	ldr	r2, [r0, #0]
 800d502:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d506:	2300      	movs	r3, #0
 800d508:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d50c:	e7f7      	b.n	800d4fe <_Balloc+0x66>
 800d50e:	bf00      	nop
 800d510:	0800e79d 	.word	0x0800e79d
 800d514:	0800e904 	.word	0x0800e904

0800d518 <_Bfree>:
 800d518:	b570      	push	{r4, r5, r6, lr}
 800d51a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d51c:	4605      	mov	r5, r0
 800d51e:	460c      	mov	r4, r1
 800d520:	b976      	cbnz	r6, 800d540 <_Bfree+0x28>
 800d522:	2010      	movs	r0, #16
 800d524:	f7ff ff9e 	bl	800d464 <malloc>
 800d528:	4602      	mov	r2, r0
 800d52a:	6268      	str	r0, [r5, #36]	; 0x24
 800d52c:	b920      	cbnz	r0, 800d538 <_Bfree+0x20>
 800d52e:	4b09      	ldr	r3, [pc, #36]	; (800d554 <_Bfree+0x3c>)
 800d530:	4809      	ldr	r0, [pc, #36]	; (800d558 <_Bfree+0x40>)
 800d532:	218a      	movs	r1, #138	; 0x8a
 800d534:	f000 ff0c 	bl	800e350 <__assert_func>
 800d538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d53c:	6006      	str	r6, [r0, #0]
 800d53e:	60c6      	str	r6, [r0, #12]
 800d540:	b13c      	cbz	r4, 800d552 <_Bfree+0x3a>
 800d542:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d544:	6862      	ldr	r2, [r4, #4]
 800d546:	68db      	ldr	r3, [r3, #12]
 800d548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d54c:	6021      	str	r1, [r4, #0]
 800d54e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d552:	bd70      	pop	{r4, r5, r6, pc}
 800d554:	0800e79d 	.word	0x0800e79d
 800d558:	0800e904 	.word	0x0800e904

0800d55c <__multadd>:
 800d55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d560:	690e      	ldr	r6, [r1, #16]
 800d562:	4607      	mov	r7, r0
 800d564:	4698      	mov	r8, r3
 800d566:	460c      	mov	r4, r1
 800d568:	f101 0014 	add.w	r0, r1, #20
 800d56c:	2300      	movs	r3, #0
 800d56e:	6805      	ldr	r5, [r0, #0]
 800d570:	b2a9      	uxth	r1, r5
 800d572:	fb02 8101 	mla	r1, r2, r1, r8
 800d576:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d57a:	0c2d      	lsrs	r5, r5, #16
 800d57c:	fb02 c505 	mla	r5, r2, r5, ip
 800d580:	b289      	uxth	r1, r1
 800d582:	3301      	adds	r3, #1
 800d584:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d588:	429e      	cmp	r6, r3
 800d58a:	f840 1b04 	str.w	r1, [r0], #4
 800d58e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d592:	dcec      	bgt.n	800d56e <__multadd+0x12>
 800d594:	f1b8 0f00 	cmp.w	r8, #0
 800d598:	d022      	beq.n	800d5e0 <__multadd+0x84>
 800d59a:	68a3      	ldr	r3, [r4, #8]
 800d59c:	42b3      	cmp	r3, r6
 800d59e:	dc19      	bgt.n	800d5d4 <__multadd+0x78>
 800d5a0:	6861      	ldr	r1, [r4, #4]
 800d5a2:	4638      	mov	r0, r7
 800d5a4:	3101      	adds	r1, #1
 800d5a6:	f7ff ff77 	bl	800d498 <_Balloc>
 800d5aa:	4605      	mov	r5, r0
 800d5ac:	b928      	cbnz	r0, 800d5ba <__multadd+0x5e>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	4b0d      	ldr	r3, [pc, #52]	; (800d5e8 <__multadd+0x8c>)
 800d5b2:	480e      	ldr	r0, [pc, #56]	; (800d5ec <__multadd+0x90>)
 800d5b4:	21b5      	movs	r1, #181	; 0xb5
 800d5b6:	f000 fecb 	bl	800e350 <__assert_func>
 800d5ba:	6922      	ldr	r2, [r4, #16]
 800d5bc:	3202      	adds	r2, #2
 800d5be:	f104 010c 	add.w	r1, r4, #12
 800d5c2:	0092      	lsls	r2, r2, #2
 800d5c4:	300c      	adds	r0, #12
 800d5c6:	f7fc ff3f 	bl	800a448 <memcpy>
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	4638      	mov	r0, r7
 800d5ce:	f7ff ffa3 	bl	800d518 <_Bfree>
 800d5d2:	462c      	mov	r4, r5
 800d5d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d5d8:	3601      	adds	r6, #1
 800d5da:	f8c3 8014 	str.w	r8, [r3, #20]
 800d5de:	6126      	str	r6, [r4, #16]
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5e6:	bf00      	nop
 800d5e8:	0800e813 	.word	0x0800e813
 800d5ec:	0800e904 	.word	0x0800e904

0800d5f0 <__s2b>:
 800d5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5f4:	460c      	mov	r4, r1
 800d5f6:	4615      	mov	r5, r2
 800d5f8:	461f      	mov	r7, r3
 800d5fa:	2209      	movs	r2, #9
 800d5fc:	3308      	adds	r3, #8
 800d5fe:	4606      	mov	r6, r0
 800d600:	fb93 f3f2 	sdiv	r3, r3, r2
 800d604:	2100      	movs	r1, #0
 800d606:	2201      	movs	r2, #1
 800d608:	429a      	cmp	r2, r3
 800d60a:	db09      	blt.n	800d620 <__s2b+0x30>
 800d60c:	4630      	mov	r0, r6
 800d60e:	f7ff ff43 	bl	800d498 <_Balloc>
 800d612:	b940      	cbnz	r0, 800d626 <__s2b+0x36>
 800d614:	4602      	mov	r2, r0
 800d616:	4b19      	ldr	r3, [pc, #100]	; (800d67c <__s2b+0x8c>)
 800d618:	4819      	ldr	r0, [pc, #100]	; (800d680 <__s2b+0x90>)
 800d61a:	21ce      	movs	r1, #206	; 0xce
 800d61c:	f000 fe98 	bl	800e350 <__assert_func>
 800d620:	0052      	lsls	r2, r2, #1
 800d622:	3101      	adds	r1, #1
 800d624:	e7f0      	b.n	800d608 <__s2b+0x18>
 800d626:	9b08      	ldr	r3, [sp, #32]
 800d628:	6143      	str	r3, [r0, #20]
 800d62a:	2d09      	cmp	r5, #9
 800d62c:	f04f 0301 	mov.w	r3, #1
 800d630:	6103      	str	r3, [r0, #16]
 800d632:	dd16      	ble.n	800d662 <__s2b+0x72>
 800d634:	f104 0909 	add.w	r9, r4, #9
 800d638:	46c8      	mov	r8, r9
 800d63a:	442c      	add	r4, r5
 800d63c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d640:	4601      	mov	r1, r0
 800d642:	3b30      	subs	r3, #48	; 0x30
 800d644:	220a      	movs	r2, #10
 800d646:	4630      	mov	r0, r6
 800d648:	f7ff ff88 	bl	800d55c <__multadd>
 800d64c:	45a0      	cmp	r8, r4
 800d64e:	d1f5      	bne.n	800d63c <__s2b+0x4c>
 800d650:	f1a5 0408 	sub.w	r4, r5, #8
 800d654:	444c      	add	r4, r9
 800d656:	1b2d      	subs	r5, r5, r4
 800d658:	1963      	adds	r3, r4, r5
 800d65a:	42bb      	cmp	r3, r7
 800d65c:	db04      	blt.n	800d668 <__s2b+0x78>
 800d65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d662:	340a      	adds	r4, #10
 800d664:	2509      	movs	r5, #9
 800d666:	e7f6      	b.n	800d656 <__s2b+0x66>
 800d668:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d66c:	4601      	mov	r1, r0
 800d66e:	3b30      	subs	r3, #48	; 0x30
 800d670:	220a      	movs	r2, #10
 800d672:	4630      	mov	r0, r6
 800d674:	f7ff ff72 	bl	800d55c <__multadd>
 800d678:	e7ee      	b.n	800d658 <__s2b+0x68>
 800d67a:	bf00      	nop
 800d67c:	0800e813 	.word	0x0800e813
 800d680:	0800e904 	.word	0x0800e904

0800d684 <__hi0bits>:
 800d684:	0c03      	lsrs	r3, r0, #16
 800d686:	041b      	lsls	r3, r3, #16
 800d688:	b9d3      	cbnz	r3, 800d6c0 <__hi0bits+0x3c>
 800d68a:	0400      	lsls	r0, r0, #16
 800d68c:	2310      	movs	r3, #16
 800d68e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d692:	bf04      	itt	eq
 800d694:	0200      	lsleq	r0, r0, #8
 800d696:	3308      	addeq	r3, #8
 800d698:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d69c:	bf04      	itt	eq
 800d69e:	0100      	lsleq	r0, r0, #4
 800d6a0:	3304      	addeq	r3, #4
 800d6a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d6a6:	bf04      	itt	eq
 800d6a8:	0080      	lsleq	r0, r0, #2
 800d6aa:	3302      	addeq	r3, #2
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	db05      	blt.n	800d6bc <__hi0bits+0x38>
 800d6b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d6b4:	f103 0301 	add.w	r3, r3, #1
 800d6b8:	bf08      	it	eq
 800d6ba:	2320      	moveq	r3, #32
 800d6bc:	4618      	mov	r0, r3
 800d6be:	4770      	bx	lr
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	e7e4      	b.n	800d68e <__hi0bits+0xa>

0800d6c4 <__lo0bits>:
 800d6c4:	6803      	ldr	r3, [r0, #0]
 800d6c6:	f013 0207 	ands.w	r2, r3, #7
 800d6ca:	4601      	mov	r1, r0
 800d6cc:	d00b      	beq.n	800d6e6 <__lo0bits+0x22>
 800d6ce:	07da      	lsls	r2, r3, #31
 800d6d0:	d424      	bmi.n	800d71c <__lo0bits+0x58>
 800d6d2:	0798      	lsls	r0, r3, #30
 800d6d4:	bf49      	itett	mi
 800d6d6:	085b      	lsrmi	r3, r3, #1
 800d6d8:	089b      	lsrpl	r3, r3, #2
 800d6da:	2001      	movmi	r0, #1
 800d6dc:	600b      	strmi	r3, [r1, #0]
 800d6de:	bf5c      	itt	pl
 800d6e0:	600b      	strpl	r3, [r1, #0]
 800d6e2:	2002      	movpl	r0, #2
 800d6e4:	4770      	bx	lr
 800d6e6:	b298      	uxth	r0, r3
 800d6e8:	b9b0      	cbnz	r0, 800d718 <__lo0bits+0x54>
 800d6ea:	0c1b      	lsrs	r3, r3, #16
 800d6ec:	2010      	movs	r0, #16
 800d6ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d6f2:	bf04      	itt	eq
 800d6f4:	0a1b      	lsreq	r3, r3, #8
 800d6f6:	3008      	addeq	r0, #8
 800d6f8:	071a      	lsls	r2, r3, #28
 800d6fa:	bf04      	itt	eq
 800d6fc:	091b      	lsreq	r3, r3, #4
 800d6fe:	3004      	addeq	r0, #4
 800d700:	079a      	lsls	r2, r3, #30
 800d702:	bf04      	itt	eq
 800d704:	089b      	lsreq	r3, r3, #2
 800d706:	3002      	addeq	r0, #2
 800d708:	07da      	lsls	r2, r3, #31
 800d70a:	d403      	bmi.n	800d714 <__lo0bits+0x50>
 800d70c:	085b      	lsrs	r3, r3, #1
 800d70e:	f100 0001 	add.w	r0, r0, #1
 800d712:	d005      	beq.n	800d720 <__lo0bits+0x5c>
 800d714:	600b      	str	r3, [r1, #0]
 800d716:	4770      	bx	lr
 800d718:	4610      	mov	r0, r2
 800d71a:	e7e8      	b.n	800d6ee <__lo0bits+0x2a>
 800d71c:	2000      	movs	r0, #0
 800d71e:	4770      	bx	lr
 800d720:	2020      	movs	r0, #32
 800d722:	4770      	bx	lr

0800d724 <__i2b>:
 800d724:	b510      	push	{r4, lr}
 800d726:	460c      	mov	r4, r1
 800d728:	2101      	movs	r1, #1
 800d72a:	f7ff feb5 	bl	800d498 <_Balloc>
 800d72e:	4602      	mov	r2, r0
 800d730:	b928      	cbnz	r0, 800d73e <__i2b+0x1a>
 800d732:	4b05      	ldr	r3, [pc, #20]	; (800d748 <__i2b+0x24>)
 800d734:	4805      	ldr	r0, [pc, #20]	; (800d74c <__i2b+0x28>)
 800d736:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d73a:	f000 fe09 	bl	800e350 <__assert_func>
 800d73e:	2301      	movs	r3, #1
 800d740:	6144      	str	r4, [r0, #20]
 800d742:	6103      	str	r3, [r0, #16]
 800d744:	bd10      	pop	{r4, pc}
 800d746:	bf00      	nop
 800d748:	0800e813 	.word	0x0800e813
 800d74c:	0800e904 	.word	0x0800e904

0800d750 <__multiply>:
 800d750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d754:	4614      	mov	r4, r2
 800d756:	690a      	ldr	r2, [r1, #16]
 800d758:	6923      	ldr	r3, [r4, #16]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	bfb8      	it	lt
 800d75e:	460b      	movlt	r3, r1
 800d760:	460d      	mov	r5, r1
 800d762:	bfbc      	itt	lt
 800d764:	4625      	movlt	r5, r4
 800d766:	461c      	movlt	r4, r3
 800d768:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d76c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d770:	68ab      	ldr	r3, [r5, #8]
 800d772:	6869      	ldr	r1, [r5, #4]
 800d774:	eb0a 0709 	add.w	r7, sl, r9
 800d778:	42bb      	cmp	r3, r7
 800d77a:	b085      	sub	sp, #20
 800d77c:	bfb8      	it	lt
 800d77e:	3101      	addlt	r1, #1
 800d780:	f7ff fe8a 	bl	800d498 <_Balloc>
 800d784:	b930      	cbnz	r0, 800d794 <__multiply+0x44>
 800d786:	4602      	mov	r2, r0
 800d788:	4b42      	ldr	r3, [pc, #264]	; (800d894 <__multiply+0x144>)
 800d78a:	4843      	ldr	r0, [pc, #268]	; (800d898 <__multiply+0x148>)
 800d78c:	f240 115d 	movw	r1, #349	; 0x15d
 800d790:	f000 fdde 	bl	800e350 <__assert_func>
 800d794:	f100 0614 	add.w	r6, r0, #20
 800d798:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d79c:	4633      	mov	r3, r6
 800d79e:	2200      	movs	r2, #0
 800d7a0:	4543      	cmp	r3, r8
 800d7a2:	d31e      	bcc.n	800d7e2 <__multiply+0x92>
 800d7a4:	f105 0c14 	add.w	ip, r5, #20
 800d7a8:	f104 0314 	add.w	r3, r4, #20
 800d7ac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d7b0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d7b4:	9202      	str	r2, [sp, #8]
 800d7b6:	ebac 0205 	sub.w	r2, ip, r5
 800d7ba:	3a15      	subs	r2, #21
 800d7bc:	f022 0203 	bic.w	r2, r2, #3
 800d7c0:	3204      	adds	r2, #4
 800d7c2:	f105 0115 	add.w	r1, r5, #21
 800d7c6:	458c      	cmp	ip, r1
 800d7c8:	bf38      	it	cc
 800d7ca:	2204      	movcc	r2, #4
 800d7cc:	9201      	str	r2, [sp, #4]
 800d7ce:	9a02      	ldr	r2, [sp, #8]
 800d7d0:	9303      	str	r3, [sp, #12]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d808      	bhi.n	800d7e8 <__multiply+0x98>
 800d7d6:	2f00      	cmp	r7, #0
 800d7d8:	dc55      	bgt.n	800d886 <__multiply+0x136>
 800d7da:	6107      	str	r7, [r0, #16]
 800d7dc:	b005      	add	sp, #20
 800d7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e2:	f843 2b04 	str.w	r2, [r3], #4
 800d7e6:	e7db      	b.n	800d7a0 <__multiply+0x50>
 800d7e8:	f8b3 a000 	ldrh.w	sl, [r3]
 800d7ec:	f1ba 0f00 	cmp.w	sl, #0
 800d7f0:	d020      	beq.n	800d834 <__multiply+0xe4>
 800d7f2:	f105 0e14 	add.w	lr, r5, #20
 800d7f6:	46b1      	mov	r9, r6
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d7fe:	f8d9 b000 	ldr.w	fp, [r9]
 800d802:	b2a1      	uxth	r1, r4
 800d804:	fa1f fb8b 	uxth.w	fp, fp
 800d808:	fb0a b101 	mla	r1, sl, r1, fp
 800d80c:	4411      	add	r1, r2
 800d80e:	f8d9 2000 	ldr.w	r2, [r9]
 800d812:	0c24      	lsrs	r4, r4, #16
 800d814:	0c12      	lsrs	r2, r2, #16
 800d816:	fb0a 2404 	mla	r4, sl, r4, r2
 800d81a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d81e:	b289      	uxth	r1, r1
 800d820:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d824:	45f4      	cmp	ip, lr
 800d826:	f849 1b04 	str.w	r1, [r9], #4
 800d82a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d82e:	d8e4      	bhi.n	800d7fa <__multiply+0xaa>
 800d830:	9901      	ldr	r1, [sp, #4]
 800d832:	5072      	str	r2, [r6, r1]
 800d834:	9a03      	ldr	r2, [sp, #12]
 800d836:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d83a:	3304      	adds	r3, #4
 800d83c:	f1b9 0f00 	cmp.w	r9, #0
 800d840:	d01f      	beq.n	800d882 <__multiply+0x132>
 800d842:	6834      	ldr	r4, [r6, #0]
 800d844:	f105 0114 	add.w	r1, r5, #20
 800d848:	46b6      	mov	lr, r6
 800d84a:	f04f 0a00 	mov.w	sl, #0
 800d84e:	880a      	ldrh	r2, [r1, #0]
 800d850:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d854:	fb09 b202 	mla	r2, r9, r2, fp
 800d858:	4492      	add	sl, r2
 800d85a:	b2a4      	uxth	r4, r4
 800d85c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d860:	f84e 4b04 	str.w	r4, [lr], #4
 800d864:	f851 4b04 	ldr.w	r4, [r1], #4
 800d868:	f8be 2000 	ldrh.w	r2, [lr]
 800d86c:	0c24      	lsrs	r4, r4, #16
 800d86e:	fb09 2404 	mla	r4, r9, r4, r2
 800d872:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d876:	458c      	cmp	ip, r1
 800d878:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d87c:	d8e7      	bhi.n	800d84e <__multiply+0xfe>
 800d87e:	9a01      	ldr	r2, [sp, #4]
 800d880:	50b4      	str	r4, [r6, r2]
 800d882:	3604      	adds	r6, #4
 800d884:	e7a3      	b.n	800d7ce <__multiply+0x7e>
 800d886:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d1a5      	bne.n	800d7da <__multiply+0x8a>
 800d88e:	3f01      	subs	r7, #1
 800d890:	e7a1      	b.n	800d7d6 <__multiply+0x86>
 800d892:	bf00      	nop
 800d894:	0800e813 	.word	0x0800e813
 800d898:	0800e904 	.word	0x0800e904

0800d89c <__pow5mult>:
 800d89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8a0:	4615      	mov	r5, r2
 800d8a2:	f012 0203 	ands.w	r2, r2, #3
 800d8a6:	4606      	mov	r6, r0
 800d8a8:	460f      	mov	r7, r1
 800d8aa:	d007      	beq.n	800d8bc <__pow5mult+0x20>
 800d8ac:	4c25      	ldr	r4, [pc, #148]	; (800d944 <__pow5mult+0xa8>)
 800d8ae:	3a01      	subs	r2, #1
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d8b6:	f7ff fe51 	bl	800d55c <__multadd>
 800d8ba:	4607      	mov	r7, r0
 800d8bc:	10ad      	asrs	r5, r5, #2
 800d8be:	d03d      	beq.n	800d93c <__pow5mult+0xa0>
 800d8c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d8c2:	b97c      	cbnz	r4, 800d8e4 <__pow5mult+0x48>
 800d8c4:	2010      	movs	r0, #16
 800d8c6:	f7ff fdcd 	bl	800d464 <malloc>
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	6270      	str	r0, [r6, #36]	; 0x24
 800d8ce:	b928      	cbnz	r0, 800d8dc <__pow5mult+0x40>
 800d8d0:	4b1d      	ldr	r3, [pc, #116]	; (800d948 <__pow5mult+0xac>)
 800d8d2:	481e      	ldr	r0, [pc, #120]	; (800d94c <__pow5mult+0xb0>)
 800d8d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d8d8:	f000 fd3a 	bl	800e350 <__assert_func>
 800d8dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d8e0:	6004      	str	r4, [r0, #0]
 800d8e2:	60c4      	str	r4, [r0, #12]
 800d8e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d8e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d8ec:	b94c      	cbnz	r4, 800d902 <__pow5mult+0x66>
 800d8ee:	f240 2171 	movw	r1, #625	; 0x271
 800d8f2:	4630      	mov	r0, r6
 800d8f4:	f7ff ff16 	bl	800d724 <__i2b>
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800d8fe:	4604      	mov	r4, r0
 800d900:	6003      	str	r3, [r0, #0]
 800d902:	f04f 0900 	mov.w	r9, #0
 800d906:	07eb      	lsls	r3, r5, #31
 800d908:	d50a      	bpl.n	800d920 <__pow5mult+0x84>
 800d90a:	4639      	mov	r1, r7
 800d90c:	4622      	mov	r2, r4
 800d90e:	4630      	mov	r0, r6
 800d910:	f7ff ff1e 	bl	800d750 <__multiply>
 800d914:	4639      	mov	r1, r7
 800d916:	4680      	mov	r8, r0
 800d918:	4630      	mov	r0, r6
 800d91a:	f7ff fdfd 	bl	800d518 <_Bfree>
 800d91e:	4647      	mov	r7, r8
 800d920:	106d      	asrs	r5, r5, #1
 800d922:	d00b      	beq.n	800d93c <__pow5mult+0xa0>
 800d924:	6820      	ldr	r0, [r4, #0]
 800d926:	b938      	cbnz	r0, 800d938 <__pow5mult+0x9c>
 800d928:	4622      	mov	r2, r4
 800d92a:	4621      	mov	r1, r4
 800d92c:	4630      	mov	r0, r6
 800d92e:	f7ff ff0f 	bl	800d750 <__multiply>
 800d932:	6020      	str	r0, [r4, #0]
 800d934:	f8c0 9000 	str.w	r9, [r0]
 800d938:	4604      	mov	r4, r0
 800d93a:	e7e4      	b.n	800d906 <__pow5mult+0x6a>
 800d93c:	4638      	mov	r0, r7
 800d93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d942:	bf00      	nop
 800d944:	0800ea58 	.word	0x0800ea58
 800d948:	0800e79d 	.word	0x0800e79d
 800d94c:	0800e904 	.word	0x0800e904

0800d950 <__lshift>:
 800d950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d954:	460c      	mov	r4, r1
 800d956:	6849      	ldr	r1, [r1, #4]
 800d958:	6923      	ldr	r3, [r4, #16]
 800d95a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d95e:	68a3      	ldr	r3, [r4, #8]
 800d960:	4607      	mov	r7, r0
 800d962:	4691      	mov	r9, r2
 800d964:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d968:	f108 0601 	add.w	r6, r8, #1
 800d96c:	42b3      	cmp	r3, r6
 800d96e:	db0b      	blt.n	800d988 <__lshift+0x38>
 800d970:	4638      	mov	r0, r7
 800d972:	f7ff fd91 	bl	800d498 <_Balloc>
 800d976:	4605      	mov	r5, r0
 800d978:	b948      	cbnz	r0, 800d98e <__lshift+0x3e>
 800d97a:	4602      	mov	r2, r0
 800d97c:	4b28      	ldr	r3, [pc, #160]	; (800da20 <__lshift+0xd0>)
 800d97e:	4829      	ldr	r0, [pc, #164]	; (800da24 <__lshift+0xd4>)
 800d980:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d984:	f000 fce4 	bl	800e350 <__assert_func>
 800d988:	3101      	adds	r1, #1
 800d98a:	005b      	lsls	r3, r3, #1
 800d98c:	e7ee      	b.n	800d96c <__lshift+0x1c>
 800d98e:	2300      	movs	r3, #0
 800d990:	f100 0114 	add.w	r1, r0, #20
 800d994:	f100 0210 	add.w	r2, r0, #16
 800d998:	4618      	mov	r0, r3
 800d99a:	4553      	cmp	r3, sl
 800d99c:	db33      	blt.n	800da06 <__lshift+0xb6>
 800d99e:	6920      	ldr	r0, [r4, #16]
 800d9a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d9a4:	f104 0314 	add.w	r3, r4, #20
 800d9a8:	f019 091f 	ands.w	r9, r9, #31
 800d9ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d9b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d9b4:	d02b      	beq.n	800da0e <__lshift+0xbe>
 800d9b6:	f1c9 0e20 	rsb	lr, r9, #32
 800d9ba:	468a      	mov	sl, r1
 800d9bc:	2200      	movs	r2, #0
 800d9be:	6818      	ldr	r0, [r3, #0]
 800d9c0:	fa00 f009 	lsl.w	r0, r0, r9
 800d9c4:	4302      	orrs	r2, r0
 800d9c6:	f84a 2b04 	str.w	r2, [sl], #4
 800d9ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9ce:	459c      	cmp	ip, r3
 800d9d0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d9d4:	d8f3      	bhi.n	800d9be <__lshift+0x6e>
 800d9d6:	ebac 0304 	sub.w	r3, ip, r4
 800d9da:	3b15      	subs	r3, #21
 800d9dc:	f023 0303 	bic.w	r3, r3, #3
 800d9e0:	3304      	adds	r3, #4
 800d9e2:	f104 0015 	add.w	r0, r4, #21
 800d9e6:	4584      	cmp	ip, r0
 800d9e8:	bf38      	it	cc
 800d9ea:	2304      	movcc	r3, #4
 800d9ec:	50ca      	str	r2, [r1, r3]
 800d9ee:	b10a      	cbz	r2, 800d9f4 <__lshift+0xa4>
 800d9f0:	f108 0602 	add.w	r6, r8, #2
 800d9f4:	3e01      	subs	r6, #1
 800d9f6:	4638      	mov	r0, r7
 800d9f8:	612e      	str	r6, [r5, #16]
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	f7ff fd8c 	bl	800d518 <_Bfree>
 800da00:	4628      	mov	r0, r5
 800da02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da06:	f842 0f04 	str.w	r0, [r2, #4]!
 800da0a:	3301      	adds	r3, #1
 800da0c:	e7c5      	b.n	800d99a <__lshift+0x4a>
 800da0e:	3904      	subs	r1, #4
 800da10:	f853 2b04 	ldr.w	r2, [r3], #4
 800da14:	f841 2f04 	str.w	r2, [r1, #4]!
 800da18:	459c      	cmp	ip, r3
 800da1a:	d8f9      	bhi.n	800da10 <__lshift+0xc0>
 800da1c:	e7ea      	b.n	800d9f4 <__lshift+0xa4>
 800da1e:	bf00      	nop
 800da20:	0800e813 	.word	0x0800e813
 800da24:	0800e904 	.word	0x0800e904

0800da28 <__mcmp>:
 800da28:	b530      	push	{r4, r5, lr}
 800da2a:	6902      	ldr	r2, [r0, #16]
 800da2c:	690c      	ldr	r4, [r1, #16]
 800da2e:	1b12      	subs	r2, r2, r4
 800da30:	d10e      	bne.n	800da50 <__mcmp+0x28>
 800da32:	f100 0314 	add.w	r3, r0, #20
 800da36:	3114      	adds	r1, #20
 800da38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800da3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800da40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800da44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800da48:	42a5      	cmp	r5, r4
 800da4a:	d003      	beq.n	800da54 <__mcmp+0x2c>
 800da4c:	d305      	bcc.n	800da5a <__mcmp+0x32>
 800da4e:	2201      	movs	r2, #1
 800da50:	4610      	mov	r0, r2
 800da52:	bd30      	pop	{r4, r5, pc}
 800da54:	4283      	cmp	r3, r0
 800da56:	d3f3      	bcc.n	800da40 <__mcmp+0x18>
 800da58:	e7fa      	b.n	800da50 <__mcmp+0x28>
 800da5a:	f04f 32ff 	mov.w	r2, #4294967295
 800da5e:	e7f7      	b.n	800da50 <__mcmp+0x28>

0800da60 <__mdiff>:
 800da60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da64:	460c      	mov	r4, r1
 800da66:	4606      	mov	r6, r0
 800da68:	4611      	mov	r1, r2
 800da6a:	4620      	mov	r0, r4
 800da6c:	4617      	mov	r7, r2
 800da6e:	f7ff ffdb 	bl	800da28 <__mcmp>
 800da72:	1e05      	subs	r5, r0, #0
 800da74:	d110      	bne.n	800da98 <__mdiff+0x38>
 800da76:	4629      	mov	r1, r5
 800da78:	4630      	mov	r0, r6
 800da7a:	f7ff fd0d 	bl	800d498 <_Balloc>
 800da7e:	b930      	cbnz	r0, 800da8e <__mdiff+0x2e>
 800da80:	4b39      	ldr	r3, [pc, #228]	; (800db68 <__mdiff+0x108>)
 800da82:	4602      	mov	r2, r0
 800da84:	f240 2132 	movw	r1, #562	; 0x232
 800da88:	4838      	ldr	r0, [pc, #224]	; (800db6c <__mdiff+0x10c>)
 800da8a:	f000 fc61 	bl	800e350 <__assert_func>
 800da8e:	2301      	movs	r3, #1
 800da90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da98:	bfa4      	itt	ge
 800da9a:	463b      	movge	r3, r7
 800da9c:	4627      	movge	r7, r4
 800da9e:	4630      	mov	r0, r6
 800daa0:	6879      	ldr	r1, [r7, #4]
 800daa2:	bfa6      	itte	ge
 800daa4:	461c      	movge	r4, r3
 800daa6:	2500      	movge	r5, #0
 800daa8:	2501      	movlt	r5, #1
 800daaa:	f7ff fcf5 	bl	800d498 <_Balloc>
 800daae:	b920      	cbnz	r0, 800daba <__mdiff+0x5a>
 800dab0:	4b2d      	ldr	r3, [pc, #180]	; (800db68 <__mdiff+0x108>)
 800dab2:	4602      	mov	r2, r0
 800dab4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dab8:	e7e6      	b.n	800da88 <__mdiff+0x28>
 800daba:	693e      	ldr	r6, [r7, #16]
 800dabc:	60c5      	str	r5, [r0, #12]
 800dabe:	6925      	ldr	r5, [r4, #16]
 800dac0:	f107 0114 	add.w	r1, r7, #20
 800dac4:	f104 0914 	add.w	r9, r4, #20
 800dac8:	f100 0e14 	add.w	lr, r0, #20
 800dacc:	f107 0210 	add.w	r2, r7, #16
 800dad0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800dad4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800dad8:	46f2      	mov	sl, lr
 800dada:	2700      	movs	r7, #0
 800dadc:	f859 3b04 	ldr.w	r3, [r9], #4
 800dae0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dae4:	fa1f f883 	uxth.w	r8, r3
 800dae8:	fa17 f78b 	uxtah	r7, r7, fp
 800daec:	0c1b      	lsrs	r3, r3, #16
 800daee:	eba7 0808 	sub.w	r8, r7, r8
 800daf2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800daf6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dafa:	fa1f f888 	uxth.w	r8, r8
 800dafe:	141f      	asrs	r7, r3, #16
 800db00:	454d      	cmp	r5, r9
 800db02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800db06:	f84a 3b04 	str.w	r3, [sl], #4
 800db0a:	d8e7      	bhi.n	800dadc <__mdiff+0x7c>
 800db0c:	1b2b      	subs	r3, r5, r4
 800db0e:	3b15      	subs	r3, #21
 800db10:	f023 0303 	bic.w	r3, r3, #3
 800db14:	3304      	adds	r3, #4
 800db16:	3415      	adds	r4, #21
 800db18:	42a5      	cmp	r5, r4
 800db1a:	bf38      	it	cc
 800db1c:	2304      	movcc	r3, #4
 800db1e:	4419      	add	r1, r3
 800db20:	4473      	add	r3, lr
 800db22:	469e      	mov	lr, r3
 800db24:	460d      	mov	r5, r1
 800db26:	4565      	cmp	r5, ip
 800db28:	d30e      	bcc.n	800db48 <__mdiff+0xe8>
 800db2a:	f10c 0203 	add.w	r2, ip, #3
 800db2e:	1a52      	subs	r2, r2, r1
 800db30:	f022 0203 	bic.w	r2, r2, #3
 800db34:	3903      	subs	r1, #3
 800db36:	458c      	cmp	ip, r1
 800db38:	bf38      	it	cc
 800db3a:	2200      	movcc	r2, #0
 800db3c:	441a      	add	r2, r3
 800db3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800db42:	b17b      	cbz	r3, 800db64 <__mdiff+0x104>
 800db44:	6106      	str	r6, [r0, #16]
 800db46:	e7a5      	b.n	800da94 <__mdiff+0x34>
 800db48:	f855 8b04 	ldr.w	r8, [r5], #4
 800db4c:	fa17 f488 	uxtah	r4, r7, r8
 800db50:	1422      	asrs	r2, r4, #16
 800db52:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800db56:	b2a4      	uxth	r4, r4
 800db58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800db5c:	f84e 4b04 	str.w	r4, [lr], #4
 800db60:	1417      	asrs	r7, r2, #16
 800db62:	e7e0      	b.n	800db26 <__mdiff+0xc6>
 800db64:	3e01      	subs	r6, #1
 800db66:	e7ea      	b.n	800db3e <__mdiff+0xde>
 800db68:	0800e813 	.word	0x0800e813
 800db6c:	0800e904 	.word	0x0800e904

0800db70 <__ulp>:
 800db70:	b082      	sub	sp, #8
 800db72:	ed8d 0b00 	vstr	d0, [sp]
 800db76:	9b01      	ldr	r3, [sp, #4]
 800db78:	4912      	ldr	r1, [pc, #72]	; (800dbc4 <__ulp+0x54>)
 800db7a:	4019      	ands	r1, r3
 800db7c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800db80:	2900      	cmp	r1, #0
 800db82:	dd05      	ble.n	800db90 <__ulp+0x20>
 800db84:	2200      	movs	r2, #0
 800db86:	460b      	mov	r3, r1
 800db88:	ec43 2b10 	vmov	d0, r2, r3
 800db8c:	b002      	add	sp, #8
 800db8e:	4770      	bx	lr
 800db90:	4249      	negs	r1, r1
 800db92:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800db96:	ea4f 5021 	mov.w	r0, r1, asr #20
 800db9a:	f04f 0200 	mov.w	r2, #0
 800db9e:	f04f 0300 	mov.w	r3, #0
 800dba2:	da04      	bge.n	800dbae <__ulp+0x3e>
 800dba4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dba8:	fa41 f300 	asr.w	r3, r1, r0
 800dbac:	e7ec      	b.n	800db88 <__ulp+0x18>
 800dbae:	f1a0 0114 	sub.w	r1, r0, #20
 800dbb2:	291e      	cmp	r1, #30
 800dbb4:	bfda      	itte	le
 800dbb6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dbba:	fa20 f101 	lsrle.w	r1, r0, r1
 800dbbe:	2101      	movgt	r1, #1
 800dbc0:	460a      	mov	r2, r1
 800dbc2:	e7e1      	b.n	800db88 <__ulp+0x18>
 800dbc4:	7ff00000 	.word	0x7ff00000

0800dbc8 <__b2d>:
 800dbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbca:	6905      	ldr	r5, [r0, #16]
 800dbcc:	f100 0714 	add.w	r7, r0, #20
 800dbd0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dbd4:	1f2e      	subs	r6, r5, #4
 800dbd6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f7ff fd52 	bl	800d684 <__hi0bits>
 800dbe0:	f1c0 0320 	rsb	r3, r0, #32
 800dbe4:	280a      	cmp	r0, #10
 800dbe6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dc64 <__b2d+0x9c>
 800dbea:	600b      	str	r3, [r1, #0]
 800dbec:	dc14      	bgt.n	800dc18 <__b2d+0x50>
 800dbee:	f1c0 0e0b 	rsb	lr, r0, #11
 800dbf2:	fa24 f10e 	lsr.w	r1, r4, lr
 800dbf6:	42b7      	cmp	r7, r6
 800dbf8:	ea41 030c 	orr.w	r3, r1, ip
 800dbfc:	bf34      	ite	cc
 800dbfe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dc02:	2100      	movcs	r1, #0
 800dc04:	3015      	adds	r0, #21
 800dc06:	fa04 f000 	lsl.w	r0, r4, r0
 800dc0a:	fa21 f10e 	lsr.w	r1, r1, lr
 800dc0e:	ea40 0201 	orr.w	r2, r0, r1
 800dc12:	ec43 2b10 	vmov	d0, r2, r3
 800dc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc18:	42b7      	cmp	r7, r6
 800dc1a:	bf3a      	itte	cc
 800dc1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dc20:	f1a5 0608 	subcc.w	r6, r5, #8
 800dc24:	2100      	movcs	r1, #0
 800dc26:	380b      	subs	r0, #11
 800dc28:	d017      	beq.n	800dc5a <__b2d+0x92>
 800dc2a:	f1c0 0c20 	rsb	ip, r0, #32
 800dc2e:	fa04 f500 	lsl.w	r5, r4, r0
 800dc32:	42be      	cmp	r6, r7
 800dc34:	fa21 f40c 	lsr.w	r4, r1, ip
 800dc38:	ea45 0504 	orr.w	r5, r5, r4
 800dc3c:	bf8c      	ite	hi
 800dc3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dc42:	2400      	movls	r4, #0
 800dc44:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dc48:	fa01 f000 	lsl.w	r0, r1, r0
 800dc4c:	fa24 f40c 	lsr.w	r4, r4, ip
 800dc50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dc54:	ea40 0204 	orr.w	r2, r0, r4
 800dc58:	e7db      	b.n	800dc12 <__b2d+0x4a>
 800dc5a:	ea44 030c 	orr.w	r3, r4, ip
 800dc5e:	460a      	mov	r2, r1
 800dc60:	e7d7      	b.n	800dc12 <__b2d+0x4a>
 800dc62:	bf00      	nop
 800dc64:	3ff00000 	.word	0x3ff00000

0800dc68 <__d2b>:
 800dc68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc6c:	4689      	mov	r9, r1
 800dc6e:	2101      	movs	r1, #1
 800dc70:	ec57 6b10 	vmov	r6, r7, d0
 800dc74:	4690      	mov	r8, r2
 800dc76:	f7ff fc0f 	bl	800d498 <_Balloc>
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	b930      	cbnz	r0, 800dc8c <__d2b+0x24>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	4b25      	ldr	r3, [pc, #148]	; (800dd18 <__d2b+0xb0>)
 800dc82:	4826      	ldr	r0, [pc, #152]	; (800dd1c <__d2b+0xb4>)
 800dc84:	f240 310a 	movw	r1, #778	; 0x30a
 800dc88:	f000 fb62 	bl	800e350 <__assert_func>
 800dc8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dc90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc94:	bb35      	cbnz	r5, 800dce4 <__d2b+0x7c>
 800dc96:	2e00      	cmp	r6, #0
 800dc98:	9301      	str	r3, [sp, #4]
 800dc9a:	d028      	beq.n	800dcee <__d2b+0x86>
 800dc9c:	4668      	mov	r0, sp
 800dc9e:	9600      	str	r6, [sp, #0]
 800dca0:	f7ff fd10 	bl	800d6c4 <__lo0bits>
 800dca4:	9900      	ldr	r1, [sp, #0]
 800dca6:	b300      	cbz	r0, 800dcea <__d2b+0x82>
 800dca8:	9a01      	ldr	r2, [sp, #4]
 800dcaa:	f1c0 0320 	rsb	r3, r0, #32
 800dcae:	fa02 f303 	lsl.w	r3, r2, r3
 800dcb2:	430b      	orrs	r3, r1
 800dcb4:	40c2      	lsrs	r2, r0
 800dcb6:	6163      	str	r3, [r4, #20]
 800dcb8:	9201      	str	r2, [sp, #4]
 800dcba:	9b01      	ldr	r3, [sp, #4]
 800dcbc:	61a3      	str	r3, [r4, #24]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	bf14      	ite	ne
 800dcc2:	2202      	movne	r2, #2
 800dcc4:	2201      	moveq	r2, #1
 800dcc6:	6122      	str	r2, [r4, #16]
 800dcc8:	b1d5      	cbz	r5, 800dd00 <__d2b+0x98>
 800dcca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dcce:	4405      	add	r5, r0
 800dcd0:	f8c9 5000 	str.w	r5, [r9]
 800dcd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dcd8:	f8c8 0000 	str.w	r0, [r8]
 800dcdc:	4620      	mov	r0, r4
 800dcde:	b003      	add	sp, #12
 800dce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dce8:	e7d5      	b.n	800dc96 <__d2b+0x2e>
 800dcea:	6161      	str	r1, [r4, #20]
 800dcec:	e7e5      	b.n	800dcba <__d2b+0x52>
 800dcee:	a801      	add	r0, sp, #4
 800dcf0:	f7ff fce8 	bl	800d6c4 <__lo0bits>
 800dcf4:	9b01      	ldr	r3, [sp, #4]
 800dcf6:	6163      	str	r3, [r4, #20]
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	6122      	str	r2, [r4, #16]
 800dcfc:	3020      	adds	r0, #32
 800dcfe:	e7e3      	b.n	800dcc8 <__d2b+0x60>
 800dd00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dd08:	f8c9 0000 	str.w	r0, [r9]
 800dd0c:	6918      	ldr	r0, [r3, #16]
 800dd0e:	f7ff fcb9 	bl	800d684 <__hi0bits>
 800dd12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd16:	e7df      	b.n	800dcd8 <__d2b+0x70>
 800dd18:	0800e813 	.word	0x0800e813
 800dd1c:	0800e904 	.word	0x0800e904

0800dd20 <__ratio>:
 800dd20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd24:	4688      	mov	r8, r1
 800dd26:	4669      	mov	r1, sp
 800dd28:	4681      	mov	r9, r0
 800dd2a:	f7ff ff4d 	bl	800dbc8 <__b2d>
 800dd2e:	a901      	add	r1, sp, #4
 800dd30:	4640      	mov	r0, r8
 800dd32:	ec55 4b10 	vmov	r4, r5, d0
 800dd36:	f7ff ff47 	bl	800dbc8 <__b2d>
 800dd3a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dd42:	eba3 0c02 	sub.w	ip, r3, r2
 800dd46:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dd4a:	1a9b      	subs	r3, r3, r2
 800dd4c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dd50:	ec51 0b10 	vmov	r0, r1, d0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	bfd6      	itet	le
 800dd58:	460a      	movle	r2, r1
 800dd5a:	462a      	movgt	r2, r5
 800dd5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dd60:	468b      	mov	fp, r1
 800dd62:	462f      	mov	r7, r5
 800dd64:	bfd4      	ite	le
 800dd66:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dd6a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dd6e:	4620      	mov	r0, r4
 800dd70:	ee10 2a10 	vmov	r2, s0
 800dd74:	465b      	mov	r3, fp
 800dd76:	4639      	mov	r1, r7
 800dd78:	f7f2 fd68 	bl	800084c <__aeabi_ddiv>
 800dd7c:	ec41 0b10 	vmov	d0, r0, r1
 800dd80:	b003      	add	sp, #12
 800dd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd86 <__copybits>:
 800dd86:	3901      	subs	r1, #1
 800dd88:	b570      	push	{r4, r5, r6, lr}
 800dd8a:	1149      	asrs	r1, r1, #5
 800dd8c:	6914      	ldr	r4, [r2, #16]
 800dd8e:	3101      	adds	r1, #1
 800dd90:	f102 0314 	add.w	r3, r2, #20
 800dd94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dd98:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dd9c:	1f05      	subs	r5, r0, #4
 800dd9e:	42a3      	cmp	r3, r4
 800dda0:	d30c      	bcc.n	800ddbc <__copybits+0x36>
 800dda2:	1aa3      	subs	r3, r4, r2
 800dda4:	3b11      	subs	r3, #17
 800dda6:	f023 0303 	bic.w	r3, r3, #3
 800ddaa:	3211      	adds	r2, #17
 800ddac:	42a2      	cmp	r2, r4
 800ddae:	bf88      	it	hi
 800ddb0:	2300      	movhi	r3, #0
 800ddb2:	4418      	add	r0, r3
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	4288      	cmp	r0, r1
 800ddb8:	d305      	bcc.n	800ddc6 <__copybits+0x40>
 800ddba:	bd70      	pop	{r4, r5, r6, pc}
 800ddbc:	f853 6b04 	ldr.w	r6, [r3], #4
 800ddc0:	f845 6f04 	str.w	r6, [r5, #4]!
 800ddc4:	e7eb      	b.n	800dd9e <__copybits+0x18>
 800ddc6:	f840 3b04 	str.w	r3, [r0], #4
 800ddca:	e7f4      	b.n	800ddb6 <__copybits+0x30>

0800ddcc <__any_on>:
 800ddcc:	f100 0214 	add.w	r2, r0, #20
 800ddd0:	6900      	ldr	r0, [r0, #16]
 800ddd2:	114b      	asrs	r3, r1, #5
 800ddd4:	4298      	cmp	r0, r3
 800ddd6:	b510      	push	{r4, lr}
 800ddd8:	db11      	blt.n	800ddfe <__any_on+0x32>
 800ddda:	dd0a      	ble.n	800ddf2 <__any_on+0x26>
 800dddc:	f011 011f 	ands.w	r1, r1, #31
 800dde0:	d007      	beq.n	800ddf2 <__any_on+0x26>
 800dde2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dde6:	fa24 f001 	lsr.w	r0, r4, r1
 800ddea:	fa00 f101 	lsl.w	r1, r0, r1
 800ddee:	428c      	cmp	r4, r1
 800ddf0:	d10b      	bne.n	800de0a <__any_on+0x3e>
 800ddf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d803      	bhi.n	800de02 <__any_on+0x36>
 800ddfa:	2000      	movs	r0, #0
 800ddfc:	bd10      	pop	{r4, pc}
 800ddfe:	4603      	mov	r3, r0
 800de00:	e7f7      	b.n	800ddf2 <__any_on+0x26>
 800de02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800de06:	2900      	cmp	r1, #0
 800de08:	d0f5      	beq.n	800ddf6 <__any_on+0x2a>
 800de0a:	2001      	movs	r0, #1
 800de0c:	e7f6      	b.n	800ddfc <__any_on+0x30>

0800de0e <_calloc_r>:
 800de0e:	b513      	push	{r0, r1, r4, lr}
 800de10:	434a      	muls	r2, r1
 800de12:	4611      	mov	r1, r2
 800de14:	9201      	str	r2, [sp, #4]
 800de16:	f000 f859 	bl	800decc <_malloc_r>
 800de1a:	4604      	mov	r4, r0
 800de1c:	b118      	cbz	r0, 800de26 <_calloc_r+0x18>
 800de1e:	9a01      	ldr	r2, [sp, #4]
 800de20:	2100      	movs	r1, #0
 800de22:	f7fc fb1f 	bl	800a464 <memset>
 800de26:	4620      	mov	r0, r4
 800de28:	b002      	add	sp, #8
 800de2a:	bd10      	pop	{r4, pc}

0800de2c <_free_r>:
 800de2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de2e:	2900      	cmp	r1, #0
 800de30:	d048      	beq.n	800dec4 <_free_r+0x98>
 800de32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de36:	9001      	str	r0, [sp, #4]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f1a1 0404 	sub.w	r4, r1, #4
 800de3e:	bfb8      	it	lt
 800de40:	18e4      	addlt	r4, r4, r3
 800de42:	f000 faf9 	bl	800e438 <__malloc_lock>
 800de46:	4a20      	ldr	r2, [pc, #128]	; (800dec8 <_free_r+0x9c>)
 800de48:	9801      	ldr	r0, [sp, #4]
 800de4a:	6813      	ldr	r3, [r2, #0]
 800de4c:	4615      	mov	r5, r2
 800de4e:	b933      	cbnz	r3, 800de5e <_free_r+0x32>
 800de50:	6063      	str	r3, [r4, #4]
 800de52:	6014      	str	r4, [r2, #0]
 800de54:	b003      	add	sp, #12
 800de56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de5a:	f000 baf3 	b.w	800e444 <__malloc_unlock>
 800de5e:	42a3      	cmp	r3, r4
 800de60:	d90b      	bls.n	800de7a <_free_r+0x4e>
 800de62:	6821      	ldr	r1, [r4, #0]
 800de64:	1862      	adds	r2, r4, r1
 800de66:	4293      	cmp	r3, r2
 800de68:	bf04      	itt	eq
 800de6a:	681a      	ldreq	r2, [r3, #0]
 800de6c:	685b      	ldreq	r3, [r3, #4]
 800de6e:	6063      	str	r3, [r4, #4]
 800de70:	bf04      	itt	eq
 800de72:	1852      	addeq	r2, r2, r1
 800de74:	6022      	streq	r2, [r4, #0]
 800de76:	602c      	str	r4, [r5, #0]
 800de78:	e7ec      	b.n	800de54 <_free_r+0x28>
 800de7a:	461a      	mov	r2, r3
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	b10b      	cbz	r3, 800de84 <_free_r+0x58>
 800de80:	42a3      	cmp	r3, r4
 800de82:	d9fa      	bls.n	800de7a <_free_r+0x4e>
 800de84:	6811      	ldr	r1, [r2, #0]
 800de86:	1855      	adds	r5, r2, r1
 800de88:	42a5      	cmp	r5, r4
 800de8a:	d10b      	bne.n	800dea4 <_free_r+0x78>
 800de8c:	6824      	ldr	r4, [r4, #0]
 800de8e:	4421      	add	r1, r4
 800de90:	1854      	adds	r4, r2, r1
 800de92:	42a3      	cmp	r3, r4
 800de94:	6011      	str	r1, [r2, #0]
 800de96:	d1dd      	bne.n	800de54 <_free_r+0x28>
 800de98:	681c      	ldr	r4, [r3, #0]
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	6053      	str	r3, [r2, #4]
 800de9e:	4421      	add	r1, r4
 800dea0:	6011      	str	r1, [r2, #0]
 800dea2:	e7d7      	b.n	800de54 <_free_r+0x28>
 800dea4:	d902      	bls.n	800deac <_free_r+0x80>
 800dea6:	230c      	movs	r3, #12
 800dea8:	6003      	str	r3, [r0, #0]
 800deaa:	e7d3      	b.n	800de54 <_free_r+0x28>
 800deac:	6825      	ldr	r5, [r4, #0]
 800deae:	1961      	adds	r1, r4, r5
 800deb0:	428b      	cmp	r3, r1
 800deb2:	bf04      	itt	eq
 800deb4:	6819      	ldreq	r1, [r3, #0]
 800deb6:	685b      	ldreq	r3, [r3, #4]
 800deb8:	6063      	str	r3, [r4, #4]
 800deba:	bf04      	itt	eq
 800debc:	1949      	addeq	r1, r1, r5
 800debe:	6021      	streq	r1, [r4, #0]
 800dec0:	6054      	str	r4, [r2, #4]
 800dec2:	e7c7      	b.n	800de54 <_free_r+0x28>
 800dec4:	b003      	add	sp, #12
 800dec6:	bd30      	pop	{r4, r5, pc}
 800dec8:	200026b0 	.word	0x200026b0

0800decc <_malloc_r>:
 800decc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dece:	1ccd      	adds	r5, r1, #3
 800ded0:	f025 0503 	bic.w	r5, r5, #3
 800ded4:	3508      	adds	r5, #8
 800ded6:	2d0c      	cmp	r5, #12
 800ded8:	bf38      	it	cc
 800deda:	250c      	movcc	r5, #12
 800dedc:	2d00      	cmp	r5, #0
 800dede:	4606      	mov	r6, r0
 800dee0:	db01      	blt.n	800dee6 <_malloc_r+0x1a>
 800dee2:	42a9      	cmp	r1, r5
 800dee4:	d903      	bls.n	800deee <_malloc_r+0x22>
 800dee6:	230c      	movs	r3, #12
 800dee8:	6033      	str	r3, [r6, #0]
 800deea:	2000      	movs	r0, #0
 800deec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deee:	f000 faa3 	bl	800e438 <__malloc_lock>
 800def2:	4921      	ldr	r1, [pc, #132]	; (800df78 <_malloc_r+0xac>)
 800def4:	680a      	ldr	r2, [r1, #0]
 800def6:	4614      	mov	r4, r2
 800def8:	b99c      	cbnz	r4, 800df22 <_malloc_r+0x56>
 800defa:	4f20      	ldr	r7, [pc, #128]	; (800df7c <_malloc_r+0xb0>)
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	b923      	cbnz	r3, 800df0a <_malloc_r+0x3e>
 800df00:	4621      	mov	r1, r4
 800df02:	4630      	mov	r0, r6
 800df04:	f000 f9a0 	bl	800e248 <_sbrk_r>
 800df08:	6038      	str	r0, [r7, #0]
 800df0a:	4629      	mov	r1, r5
 800df0c:	4630      	mov	r0, r6
 800df0e:	f000 f99b 	bl	800e248 <_sbrk_r>
 800df12:	1c43      	adds	r3, r0, #1
 800df14:	d123      	bne.n	800df5e <_malloc_r+0x92>
 800df16:	230c      	movs	r3, #12
 800df18:	6033      	str	r3, [r6, #0]
 800df1a:	4630      	mov	r0, r6
 800df1c:	f000 fa92 	bl	800e444 <__malloc_unlock>
 800df20:	e7e3      	b.n	800deea <_malloc_r+0x1e>
 800df22:	6823      	ldr	r3, [r4, #0]
 800df24:	1b5b      	subs	r3, r3, r5
 800df26:	d417      	bmi.n	800df58 <_malloc_r+0x8c>
 800df28:	2b0b      	cmp	r3, #11
 800df2a:	d903      	bls.n	800df34 <_malloc_r+0x68>
 800df2c:	6023      	str	r3, [r4, #0]
 800df2e:	441c      	add	r4, r3
 800df30:	6025      	str	r5, [r4, #0]
 800df32:	e004      	b.n	800df3e <_malloc_r+0x72>
 800df34:	6863      	ldr	r3, [r4, #4]
 800df36:	42a2      	cmp	r2, r4
 800df38:	bf0c      	ite	eq
 800df3a:	600b      	streq	r3, [r1, #0]
 800df3c:	6053      	strne	r3, [r2, #4]
 800df3e:	4630      	mov	r0, r6
 800df40:	f000 fa80 	bl	800e444 <__malloc_unlock>
 800df44:	f104 000b 	add.w	r0, r4, #11
 800df48:	1d23      	adds	r3, r4, #4
 800df4a:	f020 0007 	bic.w	r0, r0, #7
 800df4e:	1ac2      	subs	r2, r0, r3
 800df50:	d0cc      	beq.n	800deec <_malloc_r+0x20>
 800df52:	1a1b      	subs	r3, r3, r0
 800df54:	50a3      	str	r3, [r4, r2]
 800df56:	e7c9      	b.n	800deec <_malloc_r+0x20>
 800df58:	4622      	mov	r2, r4
 800df5a:	6864      	ldr	r4, [r4, #4]
 800df5c:	e7cc      	b.n	800def8 <_malloc_r+0x2c>
 800df5e:	1cc4      	adds	r4, r0, #3
 800df60:	f024 0403 	bic.w	r4, r4, #3
 800df64:	42a0      	cmp	r0, r4
 800df66:	d0e3      	beq.n	800df30 <_malloc_r+0x64>
 800df68:	1a21      	subs	r1, r4, r0
 800df6a:	4630      	mov	r0, r6
 800df6c:	f000 f96c 	bl	800e248 <_sbrk_r>
 800df70:	3001      	adds	r0, #1
 800df72:	d1dd      	bne.n	800df30 <_malloc_r+0x64>
 800df74:	e7cf      	b.n	800df16 <_malloc_r+0x4a>
 800df76:	bf00      	nop
 800df78:	200026b0 	.word	0x200026b0
 800df7c:	200026b4 	.word	0x200026b4

0800df80 <__sfputc_r>:
 800df80:	6893      	ldr	r3, [r2, #8]
 800df82:	3b01      	subs	r3, #1
 800df84:	2b00      	cmp	r3, #0
 800df86:	b410      	push	{r4}
 800df88:	6093      	str	r3, [r2, #8]
 800df8a:	da08      	bge.n	800df9e <__sfputc_r+0x1e>
 800df8c:	6994      	ldr	r4, [r2, #24]
 800df8e:	42a3      	cmp	r3, r4
 800df90:	db01      	blt.n	800df96 <__sfputc_r+0x16>
 800df92:	290a      	cmp	r1, #10
 800df94:	d103      	bne.n	800df9e <__sfputc_r+0x1e>
 800df96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df9a:	f7fd bd97 	b.w	800bacc <__swbuf_r>
 800df9e:	6813      	ldr	r3, [r2, #0]
 800dfa0:	1c58      	adds	r0, r3, #1
 800dfa2:	6010      	str	r0, [r2, #0]
 800dfa4:	7019      	strb	r1, [r3, #0]
 800dfa6:	4608      	mov	r0, r1
 800dfa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfac:	4770      	bx	lr

0800dfae <__sfputs_r>:
 800dfae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfb0:	4606      	mov	r6, r0
 800dfb2:	460f      	mov	r7, r1
 800dfb4:	4614      	mov	r4, r2
 800dfb6:	18d5      	adds	r5, r2, r3
 800dfb8:	42ac      	cmp	r4, r5
 800dfba:	d101      	bne.n	800dfc0 <__sfputs_r+0x12>
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	e007      	b.n	800dfd0 <__sfputs_r+0x22>
 800dfc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfc4:	463a      	mov	r2, r7
 800dfc6:	4630      	mov	r0, r6
 800dfc8:	f7ff ffda 	bl	800df80 <__sfputc_r>
 800dfcc:	1c43      	adds	r3, r0, #1
 800dfce:	d1f3      	bne.n	800dfb8 <__sfputs_r+0xa>
 800dfd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dfd4 <_vfiprintf_r>:
 800dfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd8:	460d      	mov	r5, r1
 800dfda:	b09d      	sub	sp, #116	; 0x74
 800dfdc:	4614      	mov	r4, r2
 800dfde:	4698      	mov	r8, r3
 800dfe0:	4606      	mov	r6, r0
 800dfe2:	b118      	cbz	r0, 800dfec <_vfiprintf_r+0x18>
 800dfe4:	6983      	ldr	r3, [r0, #24]
 800dfe6:	b90b      	cbnz	r3, 800dfec <_vfiprintf_r+0x18>
 800dfe8:	f7fe fdc4 	bl	800cb74 <__sinit>
 800dfec:	4b89      	ldr	r3, [pc, #548]	; (800e214 <_vfiprintf_r+0x240>)
 800dfee:	429d      	cmp	r5, r3
 800dff0:	d11b      	bne.n	800e02a <_vfiprintf_r+0x56>
 800dff2:	6875      	ldr	r5, [r6, #4]
 800dff4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dff6:	07d9      	lsls	r1, r3, #31
 800dff8:	d405      	bmi.n	800e006 <_vfiprintf_r+0x32>
 800dffa:	89ab      	ldrh	r3, [r5, #12]
 800dffc:	059a      	lsls	r2, r3, #22
 800dffe:	d402      	bmi.n	800e006 <_vfiprintf_r+0x32>
 800e000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e002:	f7ff f9c8 	bl	800d396 <__retarget_lock_acquire_recursive>
 800e006:	89ab      	ldrh	r3, [r5, #12]
 800e008:	071b      	lsls	r3, r3, #28
 800e00a:	d501      	bpl.n	800e010 <_vfiprintf_r+0x3c>
 800e00c:	692b      	ldr	r3, [r5, #16]
 800e00e:	b9eb      	cbnz	r3, 800e04c <_vfiprintf_r+0x78>
 800e010:	4629      	mov	r1, r5
 800e012:	4630      	mov	r0, r6
 800e014:	f7fd fdac 	bl	800bb70 <__swsetup_r>
 800e018:	b1c0      	cbz	r0, 800e04c <_vfiprintf_r+0x78>
 800e01a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e01c:	07dc      	lsls	r4, r3, #31
 800e01e:	d50e      	bpl.n	800e03e <_vfiprintf_r+0x6a>
 800e020:	f04f 30ff 	mov.w	r0, #4294967295
 800e024:	b01d      	add	sp, #116	; 0x74
 800e026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e02a:	4b7b      	ldr	r3, [pc, #492]	; (800e218 <_vfiprintf_r+0x244>)
 800e02c:	429d      	cmp	r5, r3
 800e02e:	d101      	bne.n	800e034 <_vfiprintf_r+0x60>
 800e030:	68b5      	ldr	r5, [r6, #8]
 800e032:	e7df      	b.n	800dff4 <_vfiprintf_r+0x20>
 800e034:	4b79      	ldr	r3, [pc, #484]	; (800e21c <_vfiprintf_r+0x248>)
 800e036:	429d      	cmp	r5, r3
 800e038:	bf08      	it	eq
 800e03a:	68f5      	ldreq	r5, [r6, #12]
 800e03c:	e7da      	b.n	800dff4 <_vfiprintf_r+0x20>
 800e03e:	89ab      	ldrh	r3, [r5, #12]
 800e040:	0598      	lsls	r0, r3, #22
 800e042:	d4ed      	bmi.n	800e020 <_vfiprintf_r+0x4c>
 800e044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e046:	f7ff f9a7 	bl	800d398 <__retarget_lock_release_recursive>
 800e04a:	e7e9      	b.n	800e020 <_vfiprintf_r+0x4c>
 800e04c:	2300      	movs	r3, #0
 800e04e:	9309      	str	r3, [sp, #36]	; 0x24
 800e050:	2320      	movs	r3, #32
 800e052:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e056:	f8cd 800c 	str.w	r8, [sp, #12]
 800e05a:	2330      	movs	r3, #48	; 0x30
 800e05c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e220 <_vfiprintf_r+0x24c>
 800e060:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e064:	f04f 0901 	mov.w	r9, #1
 800e068:	4623      	mov	r3, r4
 800e06a:	469a      	mov	sl, r3
 800e06c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e070:	b10a      	cbz	r2, 800e076 <_vfiprintf_r+0xa2>
 800e072:	2a25      	cmp	r2, #37	; 0x25
 800e074:	d1f9      	bne.n	800e06a <_vfiprintf_r+0x96>
 800e076:	ebba 0b04 	subs.w	fp, sl, r4
 800e07a:	d00b      	beq.n	800e094 <_vfiprintf_r+0xc0>
 800e07c:	465b      	mov	r3, fp
 800e07e:	4622      	mov	r2, r4
 800e080:	4629      	mov	r1, r5
 800e082:	4630      	mov	r0, r6
 800e084:	f7ff ff93 	bl	800dfae <__sfputs_r>
 800e088:	3001      	adds	r0, #1
 800e08a:	f000 80aa 	beq.w	800e1e2 <_vfiprintf_r+0x20e>
 800e08e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e090:	445a      	add	r2, fp
 800e092:	9209      	str	r2, [sp, #36]	; 0x24
 800e094:	f89a 3000 	ldrb.w	r3, [sl]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	f000 80a2 	beq.w	800e1e2 <_vfiprintf_r+0x20e>
 800e09e:	2300      	movs	r3, #0
 800e0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0a8:	f10a 0a01 	add.w	sl, sl, #1
 800e0ac:	9304      	str	r3, [sp, #16]
 800e0ae:	9307      	str	r3, [sp, #28]
 800e0b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0b4:	931a      	str	r3, [sp, #104]	; 0x68
 800e0b6:	4654      	mov	r4, sl
 800e0b8:	2205      	movs	r2, #5
 800e0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0be:	4858      	ldr	r0, [pc, #352]	; (800e220 <_vfiprintf_r+0x24c>)
 800e0c0:	f7f2 f88e 	bl	80001e0 <memchr>
 800e0c4:	9a04      	ldr	r2, [sp, #16]
 800e0c6:	b9d8      	cbnz	r0, 800e100 <_vfiprintf_r+0x12c>
 800e0c8:	06d1      	lsls	r1, r2, #27
 800e0ca:	bf44      	itt	mi
 800e0cc:	2320      	movmi	r3, #32
 800e0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0d2:	0713      	lsls	r3, r2, #28
 800e0d4:	bf44      	itt	mi
 800e0d6:	232b      	movmi	r3, #43	; 0x2b
 800e0d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e0e0:	2b2a      	cmp	r3, #42	; 0x2a
 800e0e2:	d015      	beq.n	800e110 <_vfiprintf_r+0x13c>
 800e0e4:	9a07      	ldr	r2, [sp, #28]
 800e0e6:	4654      	mov	r4, sl
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	f04f 0c0a 	mov.w	ip, #10
 800e0ee:	4621      	mov	r1, r4
 800e0f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0f4:	3b30      	subs	r3, #48	; 0x30
 800e0f6:	2b09      	cmp	r3, #9
 800e0f8:	d94e      	bls.n	800e198 <_vfiprintf_r+0x1c4>
 800e0fa:	b1b0      	cbz	r0, 800e12a <_vfiprintf_r+0x156>
 800e0fc:	9207      	str	r2, [sp, #28]
 800e0fe:	e014      	b.n	800e12a <_vfiprintf_r+0x156>
 800e100:	eba0 0308 	sub.w	r3, r0, r8
 800e104:	fa09 f303 	lsl.w	r3, r9, r3
 800e108:	4313      	orrs	r3, r2
 800e10a:	9304      	str	r3, [sp, #16]
 800e10c:	46a2      	mov	sl, r4
 800e10e:	e7d2      	b.n	800e0b6 <_vfiprintf_r+0xe2>
 800e110:	9b03      	ldr	r3, [sp, #12]
 800e112:	1d19      	adds	r1, r3, #4
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	9103      	str	r1, [sp, #12]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	bfbb      	ittet	lt
 800e11c:	425b      	neglt	r3, r3
 800e11e:	f042 0202 	orrlt.w	r2, r2, #2
 800e122:	9307      	strge	r3, [sp, #28]
 800e124:	9307      	strlt	r3, [sp, #28]
 800e126:	bfb8      	it	lt
 800e128:	9204      	strlt	r2, [sp, #16]
 800e12a:	7823      	ldrb	r3, [r4, #0]
 800e12c:	2b2e      	cmp	r3, #46	; 0x2e
 800e12e:	d10c      	bne.n	800e14a <_vfiprintf_r+0x176>
 800e130:	7863      	ldrb	r3, [r4, #1]
 800e132:	2b2a      	cmp	r3, #42	; 0x2a
 800e134:	d135      	bne.n	800e1a2 <_vfiprintf_r+0x1ce>
 800e136:	9b03      	ldr	r3, [sp, #12]
 800e138:	1d1a      	adds	r2, r3, #4
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	9203      	str	r2, [sp, #12]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	bfb8      	it	lt
 800e142:	f04f 33ff 	movlt.w	r3, #4294967295
 800e146:	3402      	adds	r4, #2
 800e148:	9305      	str	r3, [sp, #20]
 800e14a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e230 <_vfiprintf_r+0x25c>
 800e14e:	7821      	ldrb	r1, [r4, #0]
 800e150:	2203      	movs	r2, #3
 800e152:	4650      	mov	r0, sl
 800e154:	f7f2 f844 	bl	80001e0 <memchr>
 800e158:	b140      	cbz	r0, 800e16c <_vfiprintf_r+0x198>
 800e15a:	2340      	movs	r3, #64	; 0x40
 800e15c:	eba0 000a 	sub.w	r0, r0, sl
 800e160:	fa03 f000 	lsl.w	r0, r3, r0
 800e164:	9b04      	ldr	r3, [sp, #16]
 800e166:	4303      	orrs	r3, r0
 800e168:	3401      	adds	r4, #1
 800e16a:	9304      	str	r3, [sp, #16]
 800e16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e170:	482c      	ldr	r0, [pc, #176]	; (800e224 <_vfiprintf_r+0x250>)
 800e172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e176:	2206      	movs	r2, #6
 800e178:	f7f2 f832 	bl	80001e0 <memchr>
 800e17c:	2800      	cmp	r0, #0
 800e17e:	d03f      	beq.n	800e200 <_vfiprintf_r+0x22c>
 800e180:	4b29      	ldr	r3, [pc, #164]	; (800e228 <_vfiprintf_r+0x254>)
 800e182:	bb1b      	cbnz	r3, 800e1cc <_vfiprintf_r+0x1f8>
 800e184:	9b03      	ldr	r3, [sp, #12]
 800e186:	3307      	adds	r3, #7
 800e188:	f023 0307 	bic.w	r3, r3, #7
 800e18c:	3308      	adds	r3, #8
 800e18e:	9303      	str	r3, [sp, #12]
 800e190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e192:	443b      	add	r3, r7
 800e194:	9309      	str	r3, [sp, #36]	; 0x24
 800e196:	e767      	b.n	800e068 <_vfiprintf_r+0x94>
 800e198:	fb0c 3202 	mla	r2, ip, r2, r3
 800e19c:	460c      	mov	r4, r1
 800e19e:	2001      	movs	r0, #1
 800e1a0:	e7a5      	b.n	800e0ee <_vfiprintf_r+0x11a>
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	3401      	adds	r4, #1
 800e1a6:	9305      	str	r3, [sp, #20]
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	f04f 0c0a 	mov.w	ip, #10
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1b4:	3a30      	subs	r2, #48	; 0x30
 800e1b6:	2a09      	cmp	r2, #9
 800e1b8:	d903      	bls.n	800e1c2 <_vfiprintf_r+0x1ee>
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d0c5      	beq.n	800e14a <_vfiprintf_r+0x176>
 800e1be:	9105      	str	r1, [sp, #20]
 800e1c0:	e7c3      	b.n	800e14a <_vfiprintf_r+0x176>
 800e1c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	e7f0      	b.n	800e1ae <_vfiprintf_r+0x1da>
 800e1cc:	ab03      	add	r3, sp, #12
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	462a      	mov	r2, r5
 800e1d2:	4b16      	ldr	r3, [pc, #88]	; (800e22c <_vfiprintf_r+0x258>)
 800e1d4:	a904      	add	r1, sp, #16
 800e1d6:	4630      	mov	r0, r6
 800e1d8:	f7fc f9ec 	bl	800a5b4 <_printf_float>
 800e1dc:	4607      	mov	r7, r0
 800e1de:	1c78      	adds	r0, r7, #1
 800e1e0:	d1d6      	bne.n	800e190 <_vfiprintf_r+0x1bc>
 800e1e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1e4:	07d9      	lsls	r1, r3, #31
 800e1e6:	d405      	bmi.n	800e1f4 <_vfiprintf_r+0x220>
 800e1e8:	89ab      	ldrh	r3, [r5, #12]
 800e1ea:	059a      	lsls	r2, r3, #22
 800e1ec:	d402      	bmi.n	800e1f4 <_vfiprintf_r+0x220>
 800e1ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1f0:	f7ff f8d2 	bl	800d398 <__retarget_lock_release_recursive>
 800e1f4:	89ab      	ldrh	r3, [r5, #12]
 800e1f6:	065b      	lsls	r3, r3, #25
 800e1f8:	f53f af12 	bmi.w	800e020 <_vfiprintf_r+0x4c>
 800e1fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1fe:	e711      	b.n	800e024 <_vfiprintf_r+0x50>
 800e200:	ab03      	add	r3, sp, #12
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	462a      	mov	r2, r5
 800e206:	4b09      	ldr	r3, [pc, #36]	; (800e22c <_vfiprintf_r+0x258>)
 800e208:	a904      	add	r1, sp, #16
 800e20a:	4630      	mov	r0, r6
 800e20c:	f7fc fc76 	bl	800aafc <_printf_i>
 800e210:	e7e4      	b.n	800e1dc <_vfiprintf_r+0x208>
 800e212:	bf00      	nop
 800e214:	0800e844 	.word	0x0800e844
 800e218:	0800e864 	.word	0x0800e864
 800e21c:	0800e824 	.word	0x0800e824
 800e220:	0800ea64 	.word	0x0800ea64
 800e224:	0800ea6e 	.word	0x0800ea6e
 800e228:	0800a5b5 	.word	0x0800a5b5
 800e22c:	0800dfaf 	.word	0x0800dfaf
 800e230:	0800ea6a 	.word	0x0800ea6a
 800e234:	00000000 	.word	0x00000000

0800e238 <nan>:
 800e238:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e240 <nan+0x8>
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop
 800e240:	00000000 	.word	0x00000000
 800e244:	7ff80000 	.word	0x7ff80000

0800e248 <_sbrk_r>:
 800e248:	b538      	push	{r3, r4, r5, lr}
 800e24a:	4d06      	ldr	r5, [pc, #24]	; (800e264 <_sbrk_r+0x1c>)
 800e24c:	2300      	movs	r3, #0
 800e24e:	4604      	mov	r4, r0
 800e250:	4608      	mov	r0, r1
 800e252:	602b      	str	r3, [r5, #0]
 800e254:	f7f3 fe4c 	bl	8001ef0 <_sbrk>
 800e258:	1c43      	adds	r3, r0, #1
 800e25a:	d102      	bne.n	800e262 <_sbrk_r+0x1a>
 800e25c:	682b      	ldr	r3, [r5, #0]
 800e25e:	b103      	cbz	r3, 800e262 <_sbrk_r+0x1a>
 800e260:	6023      	str	r3, [r4, #0]
 800e262:	bd38      	pop	{r3, r4, r5, pc}
 800e264:	2000295c 	.word	0x2000295c

0800e268 <__sread>:
 800e268:	b510      	push	{r4, lr}
 800e26a:	460c      	mov	r4, r1
 800e26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e270:	f000 f8ee 	bl	800e450 <_read_r>
 800e274:	2800      	cmp	r0, #0
 800e276:	bfab      	itete	ge
 800e278:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e27a:	89a3      	ldrhlt	r3, [r4, #12]
 800e27c:	181b      	addge	r3, r3, r0
 800e27e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e282:	bfac      	ite	ge
 800e284:	6563      	strge	r3, [r4, #84]	; 0x54
 800e286:	81a3      	strhlt	r3, [r4, #12]
 800e288:	bd10      	pop	{r4, pc}

0800e28a <__swrite>:
 800e28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e28e:	461f      	mov	r7, r3
 800e290:	898b      	ldrh	r3, [r1, #12]
 800e292:	05db      	lsls	r3, r3, #23
 800e294:	4605      	mov	r5, r0
 800e296:	460c      	mov	r4, r1
 800e298:	4616      	mov	r6, r2
 800e29a:	d505      	bpl.n	800e2a8 <__swrite+0x1e>
 800e29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2a0:	2302      	movs	r3, #2
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f000 f8b6 	bl	800e414 <_lseek_r>
 800e2a8:	89a3      	ldrh	r3, [r4, #12]
 800e2aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e2b2:	81a3      	strh	r3, [r4, #12]
 800e2b4:	4632      	mov	r2, r6
 800e2b6:	463b      	mov	r3, r7
 800e2b8:	4628      	mov	r0, r5
 800e2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2be:	f000 b835 	b.w	800e32c <_write_r>

0800e2c2 <__sseek>:
 800e2c2:	b510      	push	{r4, lr}
 800e2c4:	460c      	mov	r4, r1
 800e2c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ca:	f000 f8a3 	bl	800e414 <_lseek_r>
 800e2ce:	1c43      	adds	r3, r0, #1
 800e2d0:	89a3      	ldrh	r3, [r4, #12]
 800e2d2:	bf15      	itete	ne
 800e2d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e2d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e2da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e2de:	81a3      	strheq	r3, [r4, #12]
 800e2e0:	bf18      	it	ne
 800e2e2:	81a3      	strhne	r3, [r4, #12]
 800e2e4:	bd10      	pop	{r4, pc}

0800e2e6 <__sclose>:
 800e2e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ea:	f000 b84f 	b.w	800e38c <_close_r>

0800e2ee <strncmp>:
 800e2ee:	b510      	push	{r4, lr}
 800e2f0:	b16a      	cbz	r2, 800e30e <strncmp+0x20>
 800e2f2:	3901      	subs	r1, #1
 800e2f4:	1884      	adds	r4, r0, r2
 800e2f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e2fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d103      	bne.n	800e30a <strncmp+0x1c>
 800e302:	42a0      	cmp	r0, r4
 800e304:	d001      	beq.n	800e30a <strncmp+0x1c>
 800e306:	2b00      	cmp	r3, #0
 800e308:	d1f5      	bne.n	800e2f6 <strncmp+0x8>
 800e30a:	1a98      	subs	r0, r3, r2
 800e30c:	bd10      	pop	{r4, pc}
 800e30e:	4610      	mov	r0, r2
 800e310:	e7fc      	b.n	800e30c <strncmp+0x1e>

0800e312 <__ascii_wctomb>:
 800e312:	b149      	cbz	r1, 800e328 <__ascii_wctomb+0x16>
 800e314:	2aff      	cmp	r2, #255	; 0xff
 800e316:	bf85      	ittet	hi
 800e318:	238a      	movhi	r3, #138	; 0x8a
 800e31a:	6003      	strhi	r3, [r0, #0]
 800e31c:	700a      	strbls	r2, [r1, #0]
 800e31e:	f04f 30ff 	movhi.w	r0, #4294967295
 800e322:	bf98      	it	ls
 800e324:	2001      	movls	r0, #1
 800e326:	4770      	bx	lr
 800e328:	4608      	mov	r0, r1
 800e32a:	4770      	bx	lr

0800e32c <_write_r>:
 800e32c:	b538      	push	{r3, r4, r5, lr}
 800e32e:	4d07      	ldr	r5, [pc, #28]	; (800e34c <_write_r+0x20>)
 800e330:	4604      	mov	r4, r0
 800e332:	4608      	mov	r0, r1
 800e334:	4611      	mov	r1, r2
 800e336:	2200      	movs	r2, #0
 800e338:	602a      	str	r2, [r5, #0]
 800e33a:	461a      	mov	r2, r3
 800e33c:	f7f3 fd87 	bl	8001e4e <_write>
 800e340:	1c43      	adds	r3, r0, #1
 800e342:	d102      	bne.n	800e34a <_write_r+0x1e>
 800e344:	682b      	ldr	r3, [r5, #0]
 800e346:	b103      	cbz	r3, 800e34a <_write_r+0x1e>
 800e348:	6023      	str	r3, [r4, #0]
 800e34a:	bd38      	pop	{r3, r4, r5, pc}
 800e34c:	2000295c 	.word	0x2000295c

0800e350 <__assert_func>:
 800e350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e352:	4614      	mov	r4, r2
 800e354:	461a      	mov	r2, r3
 800e356:	4b09      	ldr	r3, [pc, #36]	; (800e37c <__assert_func+0x2c>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4605      	mov	r5, r0
 800e35c:	68d8      	ldr	r0, [r3, #12]
 800e35e:	b14c      	cbz	r4, 800e374 <__assert_func+0x24>
 800e360:	4b07      	ldr	r3, [pc, #28]	; (800e380 <__assert_func+0x30>)
 800e362:	9100      	str	r1, [sp, #0]
 800e364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e368:	4906      	ldr	r1, [pc, #24]	; (800e384 <__assert_func+0x34>)
 800e36a:	462b      	mov	r3, r5
 800e36c:	f000 f81e 	bl	800e3ac <fiprintf>
 800e370:	f000 f880 	bl	800e474 <abort>
 800e374:	4b04      	ldr	r3, [pc, #16]	; (800e388 <__assert_func+0x38>)
 800e376:	461c      	mov	r4, r3
 800e378:	e7f3      	b.n	800e362 <__assert_func+0x12>
 800e37a:	bf00      	nop
 800e37c:	20000014 	.word	0x20000014
 800e380:	0800ea75 	.word	0x0800ea75
 800e384:	0800ea82 	.word	0x0800ea82
 800e388:	0800eab0 	.word	0x0800eab0

0800e38c <_close_r>:
 800e38c:	b538      	push	{r3, r4, r5, lr}
 800e38e:	4d06      	ldr	r5, [pc, #24]	; (800e3a8 <_close_r+0x1c>)
 800e390:	2300      	movs	r3, #0
 800e392:	4604      	mov	r4, r0
 800e394:	4608      	mov	r0, r1
 800e396:	602b      	str	r3, [r5, #0]
 800e398:	f7f3 fd75 	bl	8001e86 <_close>
 800e39c:	1c43      	adds	r3, r0, #1
 800e39e:	d102      	bne.n	800e3a6 <_close_r+0x1a>
 800e3a0:	682b      	ldr	r3, [r5, #0]
 800e3a2:	b103      	cbz	r3, 800e3a6 <_close_r+0x1a>
 800e3a4:	6023      	str	r3, [r4, #0]
 800e3a6:	bd38      	pop	{r3, r4, r5, pc}
 800e3a8:	2000295c 	.word	0x2000295c

0800e3ac <fiprintf>:
 800e3ac:	b40e      	push	{r1, r2, r3}
 800e3ae:	b503      	push	{r0, r1, lr}
 800e3b0:	4601      	mov	r1, r0
 800e3b2:	ab03      	add	r3, sp, #12
 800e3b4:	4805      	ldr	r0, [pc, #20]	; (800e3cc <fiprintf+0x20>)
 800e3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3ba:	6800      	ldr	r0, [r0, #0]
 800e3bc:	9301      	str	r3, [sp, #4]
 800e3be:	f7ff fe09 	bl	800dfd4 <_vfiprintf_r>
 800e3c2:	b002      	add	sp, #8
 800e3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3c8:	b003      	add	sp, #12
 800e3ca:	4770      	bx	lr
 800e3cc:	20000014 	.word	0x20000014

0800e3d0 <_fstat_r>:
 800e3d0:	b538      	push	{r3, r4, r5, lr}
 800e3d2:	4d07      	ldr	r5, [pc, #28]	; (800e3f0 <_fstat_r+0x20>)
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	4604      	mov	r4, r0
 800e3d8:	4608      	mov	r0, r1
 800e3da:	4611      	mov	r1, r2
 800e3dc:	602b      	str	r3, [r5, #0]
 800e3de:	f7f3 fd5e 	bl	8001e9e <_fstat>
 800e3e2:	1c43      	adds	r3, r0, #1
 800e3e4:	d102      	bne.n	800e3ec <_fstat_r+0x1c>
 800e3e6:	682b      	ldr	r3, [r5, #0]
 800e3e8:	b103      	cbz	r3, 800e3ec <_fstat_r+0x1c>
 800e3ea:	6023      	str	r3, [r4, #0]
 800e3ec:	bd38      	pop	{r3, r4, r5, pc}
 800e3ee:	bf00      	nop
 800e3f0:	2000295c 	.word	0x2000295c

0800e3f4 <_isatty_r>:
 800e3f4:	b538      	push	{r3, r4, r5, lr}
 800e3f6:	4d06      	ldr	r5, [pc, #24]	; (800e410 <_isatty_r+0x1c>)
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	4608      	mov	r0, r1
 800e3fe:	602b      	str	r3, [r5, #0]
 800e400:	f7f3 fd5d 	bl	8001ebe <_isatty>
 800e404:	1c43      	adds	r3, r0, #1
 800e406:	d102      	bne.n	800e40e <_isatty_r+0x1a>
 800e408:	682b      	ldr	r3, [r5, #0]
 800e40a:	b103      	cbz	r3, 800e40e <_isatty_r+0x1a>
 800e40c:	6023      	str	r3, [r4, #0]
 800e40e:	bd38      	pop	{r3, r4, r5, pc}
 800e410:	2000295c 	.word	0x2000295c

0800e414 <_lseek_r>:
 800e414:	b538      	push	{r3, r4, r5, lr}
 800e416:	4d07      	ldr	r5, [pc, #28]	; (800e434 <_lseek_r+0x20>)
 800e418:	4604      	mov	r4, r0
 800e41a:	4608      	mov	r0, r1
 800e41c:	4611      	mov	r1, r2
 800e41e:	2200      	movs	r2, #0
 800e420:	602a      	str	r2, [r5, #0]
 800e422:	461a      	mov	r2, r3
 800e424:	f7f3 fd56 	bl	8001ed4 <_lseek>
 800e428:	1c43      	adds	r3, r0, #1
 800e42a:	d102      	bne.n	800e432 <_lseek_r+0x1e>
 800e42c:	682b      	ldr	r3, [r5, #0]
 800e42e:	b103      	cbz	r3, 800e432 <_lseek_r+0x1e>
 800e430:	6023      	str	r3, [r4, #0]
 800e432:	bd38      	pop	{r3, r4, r5, pc}
 800e434:	2000295c 	.word	0x2000295c

0800e438 <__malloc_lock>:
 800e438:	4801      	ldr	r0, [pc, #4]	; (800e440 <__malloc_lock+0x8>)
 800e43a:	f7fe bfac 	b.w	800d396 <__retarget_lock_acquire_recursive>
 800e43e:	bf00      	nop
 800e440:	20002954 	.word	0x20002954

0800e444 <__malloc_unlock>:
 800e444:	4801      	ldr	r0, [pc, #4]	; (800e44c <__malloc_unlock+0x8>)
 800e446:	f7fe bfa7 	b.w	800d398 <__retarget_lock_release_recursive>
 800e44a:	bf00      	nop
 800e44c:	20002954 	.word	0x20002954

0800e450 <_read_r>:
 800e450:	b538      	push	{r3, r4, r5, lr}
 800e452:	4d07      	ldr	r5, [pc, #28]	; (800e470 <_read_r+0x20>)
 800e454:	4604      	mov	r4, r0
 800e456:	4608      	mov	r0, r1
 800e458:	4611      	mov	r1, r2
 800e45a:	2200      	movs	r2, #0
 800e45c:	602a      	str	r2, [r5, #0]
 800e45e:	461a      	mov	r2, r3
 800e460:	f7f3 fcd8 	bl	8001e14 <_read>
 800e464:	1c43      	adds	r3, r0, #1
 800e466:	d102      	bne.n	800e46e <_read_r+0x1e>
 800e468:	682b      	ldr	r3, [r5, #0]
 800e46a:	b103      	cbz	r3, 800e46e <_read_r+0x1e>
 800e46c:	6023      	str	r3, [r4, #0]
 800e46e:	bd38      	pop	{r3, r4, r5, pc}
 800e470:	2000295c 	.word	0x2000295c

0800e474 <abort>:
 800e474:	b508      	push	{r3, lr}
 800e476:	2006      	movs	r0, #6
 800e478:	f000 f82c 	bl	800e4d4 <raise>
 800e47c:	2001      	movs	r0, #1
 800e47e:	f7f3 fcbf 	bl	8001e00 <_exit>

0800e482 <_raise_r>:
 800e482:	291f      	cmp	r1, #31
 800e484:	b538      	push	{r3, r4, r5, lr}
 800e486:	4604      	mov	r4, r0
 800e488:	460d      	mov	r5, r1
 800e48a:	d904      	bls.n	800e496 <_raise_r+0x14>
 800e48c:	2316      	movs	r3, #22
 800e48e:	6003      	str	r3, [r0, #0]
 800e490:	f04f 30ff 	mov.w	r0, #4294967295
 800e494:	bd38      	pop	{r3, r4, r5, pc}
 800e496:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e498:	b112      	cbz	r2, 800e4a0 <_raise_r+0x1e>
 800e49a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e49e:	b94b      	cbnz	r3, 800e4b4 <_raise_r+0x32>
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f000 f831 	bl	800e508 <_getpid_r>
 800e4a6:	462a      	mov	r2, r5
 800e4a8:	4601      	mov	r1, r0
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4b0:	f000 b818 	b.w	800e4e4 <_kill_r>
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d00a      	beq.n	800e4ce <_raise_r+0x4c>
 800e4b8:	1c59      	adds	r1, r3, #1
 800e4ba:	d103      	bne.n	800e4c4 <_raise_r+0x42>
 800e4bc:	2316      	movs	r3, #22
 800e4be:	6003      	str	r3, [r0, #0]
 800e4c0:	2001      	movs	r0, #1
 800e4c2:	e7e7      	b.n	800e494 <_raise_r+0x12>
 800e4c4:	2400      	movs	r4, #0
 800e4c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	4798      	blx	r3
 800e4ce:	2000      	movs	r0, #0
 800e4d0:	e7e0      	b.n	800e494 <_raise_r+0x12>
	...

0800e4d4 <raise>:
 800e4d4:	4b02      	ldr	r3, [pc, #8]	; (800e4e0 <raise+0xc>)
 800e4d6:	4601      	mov	r1, r0
 800e4d8:	6818      	ldr	r0, [r3, #0]
 800e4da:	f7ff bfd2 	b.w	800e482 <_raise_r>
 800e4de:	bf00      	nop
 800e4e0:	20000014 	.word	0x20000014

0800e4e4 <_kill_r>:
 800e4e4:	b538      	push	{r3, r4, r5, lr}
 800e4e6:	4d07      	ldr	r5, [pc, #28]	; (800e504 <_kill_r+0x20>)
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	4608      	mov	r0, r1
 800e4ee:	4611      	mov	r1, r2
 800e4f0:	602b      	str	r3, [r5, #0]
 800e4f2:	f7f3 fc75 	bl	8001de0 <_kill>
 800e4f6:	1c43      	adds	r3, r0, #1
 800e4f8:	d102      	bne.n	800e500 <_kill_r+0x1c>
 800e4fa:	682b      	ldr	r3, [r5, #0]
 800e4fc:	b103      	cbz	r3, 800e500 <_kill_r+0x1c>
 800e4fe:	6023      	str	r3, [r4, #0]
 800e500:	bd38      	pop	{r3, r4, r5, pc}
 800e502:	bf00      	nop
 800e504:	2000295c 	.word	0x2000295c

0800e508 <_getpid_r>:
 800e508:	f7f3 bc62 	b.w	8001dd0 <_getpid>

0800e50c <_init>:
 800e50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e50e:	bf00      	nop
 800e510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e512:	bc08      	pop	{r3}
 800e514:	469e      	mov	lr, r3
 800e516:	4770      	bx	lr

0800e518 <_fini>:
 800e518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e51a:	bf00      	nop
 800e51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e51e:	bc08      	pop	{r3}
 800e520:	469e      	mov	lr, r3
 800e522:	4770      	bx	lr
